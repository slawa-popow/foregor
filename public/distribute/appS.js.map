{"version":3,"file":"appS.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,+FAAyC;AACzC,qIAA0E;AAC1E,qKAAuF;AACvF,4JAAiF;AACjF,wHAAyD;AACzD,0EAAgC;AAChC,oGAA+C;AAC/C,gGAA4G;AAC5G,iHAAwD;AASxD,MAAM,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;AACrD,WAAW,CAAE,GAAG,EAAE;IACd,IAAI,KAAK;QACL,KAAK,CAAC,WAAW,GAAG,wBAAwB;YACpC,IAAI,IAAI,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,eAAe,EAAC,CAAC,CAAC;AAChF,CAAC,EAAE,IAAI,CAAC,CAAC;AAET,CAAC,GAAG,EAAE;IACF,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IACxD,IAAI,UAAU,EAAE;QACZ,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE;YACjC,MAAM,KAAK,GAAqB,IAAI,CAAC;YACrC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAChD,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxB,MAAM,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC3C,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAChC;QAEL,CAAC,CAAC,CAAC;KACN;AAEL,CAAC,CAAC,EAAE,CAAC;AAIL,MAAM,eAAe,GAAG,gBAAgB,CAAC;AACzC,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;AAC7D,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;AAE9D,MAAM,qBAAqB,GAAG,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;AACvE,qBAAqB,aAArB,qBAAqB,uBAArB,qBAAqB,CAAE,gBAAgB,CAAC,OAAO,EAAE,SAAG,CAAC,kBAAkB,CAAC,CAAC;AAEzE,MAAM,qBAAqB,GAAG,IAAI,6BAAmB,CAAC,cAAc,CAAC,CAAC,CAAE,iCAAiC;AAC5F,0BAAkB,GAAG,IAAI,6BAAmB,CAAC,uBAAuB,CAAC,CAAC;AAEnF,eAAe;AACf,iBAAO,CAAC,iBAAiB,CAAC,IAAI,iBAAO,CAAC,kBAAK,CAAC,CAAC,CAAC;AAC9C,MAAM,gBAAgB,GAAG,IAAI,uBAAa,CAAC,aAAa,CAAC,CAAC;AAC1D,MAAM,eAAe,GAAG,IAAI,2BAAY,CAAC,gBAAgB,CAAC,CAAC;AAC3D,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;AAC5D,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,gBAAgB,CAAC,OAAO,EAAE,GAAS,EAAE;IAC7C,SAAG,CAAC,SAAS,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IACnC,SAAG,CAAC,WAAW,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAAC;IAC9D,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IAC3D,MAAM,OAAO,GAAsB,WAAY,CAAC,OAAO,CAAC;IACxD,MAAM,GAAG,GAAG,MAAM,iBAAO,CAAC,WAAW,CAAC,EAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,EAAC,CAAC,CAAC;IAC3F,MAAM,OAAO,GAAG,IAAI,qBAAM,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;IACjD,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACjC,SAAG,CAAC,SAAS,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;IACpC,SAAG,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;AACnC,CAAC,EAAC,CAAC;AAEH;;GAEG;AACH,MAAM,UAAU,GAAG,GAAS,EAAE;IAC1B,iBAAO,CAAC,oBAAoB,CAAC,IAAI,yCAAmB,CAAC,kBAAK,CAAC,CAAC,CAAC,CAAW,gDAAgD;IACxH,MAAM,OAAO,GAAG,MAAM,iBAAO,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAQ,uCAAuC;IAC/G,MAAM,iBAAiB,GAAG,IAAI,2BAAY,CAAC,qBAAqB,CAAC,CAAC,CAAM,6CAA6C;IACrH,MAAM,MAAM,GAAG,IAAI,qBAAM,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAqB,kCAAkC;IAC1G,MAAM,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAgC,yDAAyD;IACjI,iBAAO,CAAC,yBAAyB,CAAC,IAAI,+CAAsB,CAAC,kBAAK,CAAC,CAAC,CAAC;IACrE,MAAM,YAAY,GAAG,MAAM,iBAAO,CAAC,sBAAsB,EAAE,CAAC;IAC5D,MAAM,eAAe,GAAG,IAAI,2BAAY,CAAC,0BAAkB,CAAC,CAAC;IAC7D,MAAM,QAAQ,GAAG,IAAI,qBAAM,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;IAC9D,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACtC,CAAC,EAAC;AAIF,IAAI,UAAU,IAAI,SAAS;IACvB,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE;QACnC,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAO,CAAC,EAAE,EAAE;YACpC,MAAM,MAAM,GAAG,CAAC,CAAC,MAA2B,CAAC;YAC7C,QAAQ,MAAM,CAAC,IAAI,EAAE;gBACjB,KAAK,2BAAY,CAAC,OAAO,CAAC,CAAC;oBACvB,MAAM,UAAU,EAAE,CAAC;oBACnB,MAAM;iBACT;gBACD,KAAK,2BAAY,CAAC,OAAO,CAAC,CAAC;oBAEvB,MAAM,KAAK,GAAG,IAAI,uBAAa,CAAC,iBAAiB,CAAC,CAAC,CAAE,YAAY;oBACjE,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;wBAAE,MAAM;oBAClC,MAAM,SAAG,CAAC,cAAc,CAAC,eAAe,EAAE,KAAK,EAAE,iBAAO,CAAC,CAAC;iBAE7D;aACJ;QACL,CAAC,EAAC,CAAC;KACN;AAEL,UAAU,EAAE,CAAC;AAGb,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC;AAC3D,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;AAE/B,IAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAO,CAAC,EAAE,EAAE;IACxC,IAAI;QACA,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,MAAM,IAAI,GAAG,MAAM,kBAAK,CAAC,YAAY,EAAE,CAAC;QACxC,IAAI,IAAI,EAAE;YACN,iDAAiD;YACjD,gCAAgC;YAGhC,gDAAgD;YAChD,yCAAyC;YACzC,gBAAgB;YAChB,mCAAmC;YACnC,iCAAiC;YACjC,iBAAiB;YACjB,iBAAiB;YACjB,MAAM,OAAO,GAAG,kBAAK,CAAC,qBAAqB,EAAE,CAAC;YAC9C,aAAa;YACb,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SAC5C;KAEJ;IAAC,OAAO,CAAC,EAAE;QAAE,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC;KAAE;AACzD,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;ACrIF,MAAM,OAAO,GAAG,6BAA6B,CAAC;AAC9C,uBAAuB;AACV,YAAI,GAAG,OAAO,CAAC;AAG5B,MAAa,UAAU;IAGnB,YAAY,IAAY;QADxB,SAAI,GAAG,YAAI,CAAC;QAER,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,qBAAqB;QACjB,OAAO,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC;IAC1C,CAAC;IAEK,cAAc,CAAC,GAAW;;YAC5B,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,EAAE;gBACtC,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,gCAAgC;iBACjD;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;aAC3B,CAAC,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAC7B,CAAC;KAAA;IAGK,YAAY;;YACd,IAAI;gBACA,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,kBAAkB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;gBAC1E,OAAO,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;aAC5B;YAAC,OAAO,CAAC,EAAE;gBAAE,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC;aAAE;YACjE,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAED,8BAA8B;IACxB,gBAAgB,CAAC,GAAW,EAAE,GAAW;;YAC3C,MAAM,WAAW,GAAG,EAAC,QAAQ,EAAE,GAAG,EAAC,CAAC;YACpC,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,GAAC,GAAG,EAAE;gBACpC,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,gCAAgC;iBACjD;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;aACpC,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YACjC,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAED,0BAA0B;IACpB,0BAA0B,CAAC,QAAkB;;YAC/C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,aAAa,EAAE;gBACpD,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,QAAQ;aACjB,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAErC,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAGD,sBAAsB;IAChB,SAAS,CAAC,IAAe;;YAC3B,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,WAAW,EAAE;gBAClD,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACL,cAAc,EAAE,gCAAgC;iBACjD;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aAC/B,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAErC,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAED,yCAAyC;IACnC,eAAe;;YACjB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,iBAAiB,EAAE;gBACxD,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACL,cAAc,EAAE,gCAAgC;iBACjD;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;aAC7B,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACrC,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAGK,SAAS,CAAI,KAAa;;YAC5B,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,WAAW,EAAE;gBAClD,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACL,cAAc,EAAE,gCAAgC;iBACjD;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC;aACzC,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACrC,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAGD,4DAA4D;IACtD,iCAAiC,CAAC,QAAgB;;YACpD,MAAM,OAAO,GAAG,EAAC,QAAQ,EAAE,QAAQ,EAAC,CAAC;YACrC,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,gBAAgB,EAAE;gBACnD,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,gCAAgC;iBACjD;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;aAChC,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YACjC,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAED,kDAAkD;IAC5C,gBAAgB,CAAC,IAAoC;;YACvD,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,cAAc,EAAE;gBACjD,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,gCAAgC;iBACjD;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;aAC7B,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YACjC,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;CACJ;AA5HD,gCA4HC;AAGY,aAAK,GAAG,IAAI,UAAU,CAAC,YAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;AClI1C,MAAa,MAAM;IAGf,YAAmB,IAAY,EAAE,IAAS;QAAvB,SAAI,GAAJ,IAAI,CAAQ;QAFvB,SAAI,GAAS,EAAE,CAAC;QAGpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,IAAI,IAAI,CAAC,CAAM;QACX,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;SACrB;IACL,CAAC;IAED,IAAI,IAAI;QACJ,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,OAAO,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,IAAI,EAAC;SAC/C;QACD,OAAO,EAAC,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAC,CAAC;IACnC,CAAC;CAEJ;AArBD,wBAqBC;AAID,MAAa,YAAY;IAErB,YAAmB,MAAkB;QAAlB,WAAM,GAAN,MAAM,CAAY;IAAG,CAAC;IAEnC,OAAO,CAAI,MAAiB;;YAC9B,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAI,MAAM,CAAC,CAAC;aAChD;QACL,CAAC;KAAA;CAEJ;AAVD,oCAUC;;;;;;;;;;;;;;ACpCD,MAAsB,WAAW;IAG7B,YAAuB,QAAoB;QAApB,aAAQ,GAAR,QAAQ,CAAY;QAFjC,gBAAW,GAAQ,IAAI,CAAC;IAEY,CAAC;IAI/C,WAAW;QACP,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC;QACxC,OAAO,cAAc,CAAC;IAC1B,CAAC;CACJ;AAXD,kCAWC;;;;;;;;;;;;;;;;;;;;;;;ACdD,+GAA4C;AAG5C;;;GAGG;AACH,MAAa,wBAAyB,SAAQ,yBAAW;IAErD,YAAY,QAAoB;QAC5B,KAAK,CAAC,QAAQ,CAAC;IACnB,CAAC;IAGK,OAAO,CAAI,KAAa;;YAC1B,IAAI,CAAC,WAAW,IAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAI,KAAK,CAAQ,EAAC,CAAE,QAAQ;YAC5E,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;KAAA;CAEJ;AAZD,4DAYC;;;;;;;;;;;;;;;;;;;;;;;ACnBD,+GAA4C;AAG5C;;;GAGG;AACH,MAAa,kBAAmB,SAAQ,yBAAW;IAE/C,YAAY,QAAoB;QAC5B,KAAK,CAAC,QAAQ,CAAC;IACnB,CAAC;IAGK,OAAO,CAAI,QAAkB;;YAC/B,IAAI,CAAC,WAAW,IAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,0BAA0B,CAAC,QAAQ,CAAQ,EAAC,CAAE,QAAQ;YAC7F,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;KAAA;CAEJ;AAZD,gDAYC;;;;;;;;;;;;;;;;;;;;;;;AClBD,+GAA4C;AAG5C;;GAEG;AACH,MAAa,sBAAuB,SAAQ,yBAAW;IAEnD,YAAY,QAAoB;QAC5B,KAAK,CAAC,QAAQ,CAAC;IACnB,CAAC;IAGK,OAAO;;YACT,IAAI,CAAC,WAAW,IAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAsB,EAAC;YAC7E,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;KAAA;CAEJ;AAZD,wDAYC;;;;;;;;;;;;;;;;;;;;;;;ACnBD,+GAA4C;AAG5C;;;GAGG;AACH,MAAa,qBAAsB,SAAQ,yBAAW;IAElD,YAAY,QAAoB;QAC5B,KAAK,CAAC,QAAQ,CAAC;IACnB,CAAC;IAGK,OAAO,CAAI,GAAW,EAAE,GAAW;;YACrC,IAAI,CAAC,WAAW,IAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,GAAG,CAAQ,EAAC;YACzE,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;KAAA;CAEJ;AAZD,sDAYC;;;;;;;;;;;;;;;;;;;;;;;ACnBD,+GAA4C;AAG5C;;;GAGG;AACH,MAAa,mBAAoB,SAAQ,yBAAW;IAEhD,YAAY,QAAoB;QAC5B,KAAK,CAAC,QAAQ,CAAC,CAAC;IACpB,CAAC;IAGK,OAAO,CAAI,GAAW;;YACxB,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACnD,CAAC;KAAA;CACJ;AAVD,kDAUC;;;;;;;;;;;;;;;;;;;;;;;ACjBD,+GAA4C;AAG5C;;;;GAIG;AACH,MAAa,uBAAwB,SAAQ,yBAAW;IAEpD,YAAY,QAAoB;QAC5B,KAAK,CAAC,QAAQ,CAAC;IACnB,CAAC;IAGK,OAAO,CAAI,QAAgB;;YAC7B,IAAI,CAAC,WAAW,IAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iCAAiC,CAAC,QAAQ,CAAQ,EAAC;YAC1F,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;KAAA;CAEJ;AAZD,0DAYC;;;;;;;;;;;;;;;;;;;;;;;ACnBD,+GAA4C;AAG5C;;;GAGG;AACH,MAAa,OAAQ,SAAQ,yBAAW;IAEpC,YAAY,QAAoB;QAC5B,KAAK,CAAC,QAAQ,CAAC;IACnB,CAAC;IAGK,OAAO,CAAI,IAAe;;YAC5B,IAAI,CAAC,WAAW,IAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAQ,EAAC,CAAE,QAAQ;YACxE,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,CAAC;KAAA;CAEJ;AAZD,0BAYC;;;;;;;;;;;;;;;;;;;;;;;ACrBD,8JAAiF;AACjF,gGAAmD;AACnD,2FAAqC;AAErC,wJAA6E;AAC7E,iIAAsE;AACtE,4FAA8E;AAC9E,oKAAqF;AACrF,qJAA2E;AAC3E,+DAAwC;AACxC,uKAAuF;AAG1E,WAAG,GAAG,CAAC,GAAG,EAAE;IAErB;;;;;;OAMG;IACH,SAAe,cAAc,CAAC,WAAmB,EAAE,KAAiB,EAAE,OAAgB;;YAClF,MAAM,GAAG,GAAG,kBAAkB,CAAC;YAC/B,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACjD,OAAO,CAAC,gBAAgB,CAAC,IAAI,6CAAqB,CAAC,kBAAK,CAAC,CAAC,CAAC;YAC3D,OAAO,CAAC,oBAAoB,CAAC,IAAI,yCAAmB,CAAC,kBAAK,CAAC,CAAC,CAAC;YAC7D,MAAM,OAAO,GAAa,MAAM,OAAO,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;YAC1E,MAAM,YAAY,GAAG,IAAI,2BAAY,CAAC,KAAK,CAAC,CAAC;YAC7C,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;gBACnB,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAsB,CAAC;gBAC3D,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,EAAE,wBAAwB,EAAE,yBAAyB,CAAC,CAAC;gBACxF,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC;gBACb,CAAC,CAAC,WAAW,GAAG,EAAE,CAAC;gBACnB,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAO,CAAC,EAAE,EAAE;oBACxC,IAAmB,CAAC,CAAC,MAAO,CAAC,QAAQ,KAAK,GAAG,EAAE;wBAC3C,CAAC,CAAC,cAAc,EAAE,CAAC;wBACnB,MAAM,GAAG,GAAkB,CAAC,CAAC,MAAO,CAAC,WAAqB,CAAC;wBAC3D,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,qBAAqB,CAA4B,GAAG,EAAE,GAAG,CAAgC,CAAC;wBACvH,YAAY;wBACZ,MAAM,MAAM,GAAG,IAAI,qBAAM,CAA4B,GAAG,EAAE,MAAM,CAAC,CAAC;wBAClE,MAAM,YAAY,CAAC,OAAO,CAA4B,MAAM,CAAC,CAAC;qBACjE;gBACD,CAAC,EAAC,CAAC;gBACH,GAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAGD;;;;;;OAMG;IACH,SAAe,0BAA0B,CAAC,MAAmB,EAAE,QAAkB,EAAE,aAAsB,IAAI;;YACzG,MAAM,KAAK,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC;YAC5B,IAAI,UAAU;gBACV,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACzB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACnB,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAChD,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC/C,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAChC,MAAM,kBAAkB,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACxC,MAAM,UAAU,GAAG,kBAAkB,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,GAAC,CAAC,EAAE,kBAAkB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC9G,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;gBAChC,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,CAAC,MAAM,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAGD,SAAS,iBAAiB,CAAC,MAAmB,EAAE,KAA4C;QACxF,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED,SAAS,iBAAiB,CAAC,MAAmB,EAAE,KAA4C;QACxF,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;IAGD,MAAM,sBAAsB,GAAG,IAAI,uCAAkB,CAAC,kBAAK,CAAC,CAAC;IAE7D;;;OAGG;IACH,SAAe,kBAAkB,CAAC,CAAQ;;YACtC,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,MAAM,IAAI,GAAsB,CAAC,CAAC,MAAO,CAAC,IAAuB,CAAC;YAClE,MAAM,KAAK,GAAG,CAAC,kBAAkB,EAAE,cAAc,EAAE,iBAAiB,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;YACzH,MAAM,KAAK,GAAG,IAAI,QAAQ,EAAE,CAAC;YAC7B,IAAI,CAAC,GAAG,CAAC,CAAC;YAEV,KAAK,IAAI,EAAE,IAAI,IAAI,EAAE;gBACjB,IAAI,CAAC,GAAG,CAAC;oBAAE,MAAM;gBACjB,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI,EAAE,YAAY,iBAAiB,EAAE;oBACjC,MAAM,IAAI,GAAG,EAAE,CAAC,UAA2C,CAAC;oBAC5D,IAAI,KAAK,GAAG,EAAE,CAAC;oBACf,KAAK,IAAI,CAAC,IAAI,IAAI,EAAE;wBAChB,IAAI,CAAC,YAAY,iBAAiB,IAAI,CAAC,CAAC,QAAQ,EAAE;4BAC9C,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;4BAChB,MAAM;yBACT;qBACJ;oBACD,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBAC7B;qBAAM,IAAI,EAAE,YAAY,gBAAgB,EAAE;oBACvC,IAAI,EAAE,CAAC,IAAI,KAAK,MAAM,EAAE;wBACpB,MAAM,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC;wBACrB,IAAI,GAAG,EAAE;4BACL,KAAK,IAAI,CAAC,IAAI,GAAG,EAAE;gCACf,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;6BAC3B;yBAEJ;qBACJ;yBAAM;wBACH,MAAM,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;wBACvB,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;qBAC7B;iBACJ;gBACD,CAAC,IAAI,CAAC,CAAC;aACV;YACD,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC,cAAc,CAAC,OAAO,EAAE,EAAC,QAAQ,EAAE,eAAe,EAAC,CAAC,CAAC;YACjF,MAAM,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC/B,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YACnC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAEnC,SAAS,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YAC7B,WAAW,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;YAC7C,iBAAO,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC;YAEnD,MAAM,MAAM,GAAG,MAAM,iBAAO,CAAC,mBAAmB,CAAmB,KAAK,CAAC,CAAC;YAC1E,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;gBAClE,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAE,OAAO,CAAC,CAAC,OAAO,GAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAExE,SAAS,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;gBAC9B,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;aAClC;iBAAM;gBACH,SAAS,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;gBAC9B,WAAW,CAAC,SAAS,CAAC,CAAC;gBAEvB,MAAM,eAAe,GAAG,IAAI,2BAAY,CAAC,sBAAkB,CAAC,CAAC;gBAC7D,MAAM,QAAQ,GAAG,IAAI,qBAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;gBACxD,MAAM,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;aAC3C;YACD,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAqB,CAAC;YACxE,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;YAElB,0DAA0D;QAC9D,CAAC;KAAA;IAED,MAAM,uBAAuB,GAAG,IAAI,iDAAuB,CAAC,kBAAK,CAAC,CAAC,CAAC,yCAAyC;IAC7G,MAAM,aAAa,GAAG,IAAI,mDAAwB,CAAC,kBAAK,CAAC,CAAC;IAC1D;;;OAGG;IACH,SAAe,cAAc,CAAC,CAAQ;;YAClC,MAAM,IAAI,GAAkB,CAAC,CAAC,MAAO,CAAC,UAA2C,CAAC;YAClF,iBAAO,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,CAAC;YACtD,KAAK,IAAI,EAAE,IAAI,IAAI,EAAE;gBACjB,IAAI,EAAE,YAAY,iBAAiB,IAAI,EAAE,CAAC,QAAQ,EAAE;oBAChD,MAAM,WAAW,GAAG,IAAI,yBAAe,CAAC,WAAW,CAAC,CAAC;oBACrD,MAAM,UAAU,GAAG,IAAI,wBAAc,CAAC,UAAU,CAAC,CAAC;oBAClD,MAAM,MAAM,GAAG,MAAM,iBAAO,CAAC,iBAAiB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;oBACzD,MAAM,iBAAiB,GAAG,IAAI,2BAAY,CAAC,WAAW,CAAC,CAAC;oBACxD,MAAM,gBAAgB,GAAG,IAAI,2BAAY,CAAC,UAAU,CAAC,CAAC;oBACtD,MAAM,QAAQ,GAAG,IAAI,qBAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;oBAC5D,MAAM,OAAO,GAAG,IAAI,qBAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC1D,MAAM,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAC1C,MAAM,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;oBAExC,MAAM;iBACT;aACJ;QACL,CAAC;KAAA;IAGD;;;;OAIG;IACH,SAAS,eAAe,CAAC,EAAU;QAC/B,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,SAAe,gBAAgB,CAAI,OAAY;;YAC3C,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC;YAClG,qDAAqD;YACrD,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YACnC,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,uDAAuD;YAChG,MAAM,UAAU,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;YACxG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;gBACrB,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACxC,EAAE,CAAC,WAAW,GAAG,CAAC,CAAC;gBACnB,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACtB,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACzB,MAAM,eAAe,GAAG,CAAC,QAAgB,EAAU,EAAE;gBACjD,IAAI;oBACD,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACnC,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;oBACvB,OAAO,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,GAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC9C;gBAAC,OAAO,CAAC,EAAE,GAAE;gBACd,OAAO,EAAE,CAAC;YACd,CAAC;YACD,qDAAqD;YACrD,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC9C,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBACpB,MAAM,IAAI,GAAG,GAAuB,CAAC;gBACrC,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACxC,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAO,CAAC,EAAE,EAAE;oBACrC,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;oBACtB,IAAI,IAAI,YAAY,iBAAiB,EAAE;wBACnC,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACpC,iBAAO,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;wBAEvC,MAAM,MAAM,GAAG,MAAM,iBAAO,CAAC,iBAAiB,CAAmB,KAAK,CAAC,CAAC;wBACxE,MAAM,SAAS,GAAG,IAAI,qBAAM,CAAC,MAAM,GAAC,KAAK,EAAE,MAAM,CAAC,CAAC;wBACnD,MAAM,YAAY,GAAG,IAAI,2BAAY,CAAC,sBAAkB,CAAC,CAAC;wBAC1D,MAAM,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;qBACzC;gBACL,CAAC,EAAC,CAAC;gBAEH,KAAK,IAAI,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE;oBAC3G,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE,EAAG,EAAE;oBACjE,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;oBACxC,EAAE,CAAC,WAAW,GAAG,EAAE,GAAC,QAAQ,CAAC;oBAC7B,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;iBAC1B;gBACD,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAsB,CAAC;gBAC3D,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC1C,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,EAAE,wBAAwB,EAAE,wBAAwB,CAAC,CAAC;gBACvF,CAAC,CAAC,WAAW,GAAG,SAAS,CAAC;gBAC1B,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAClB,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAEzB,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAGD,SAAe,aAAa,CAAC,IAAqB,EAAE,OAAc;;YAC9D,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAC;QACnD,CAAC;KAAA;IAGD;;;;OAIG;IACH,SAAe,SAAS,CAAI,OAAY;;YACpC,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC;YAChF,qDAAqD;YACrD,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC9C,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YACnC,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,UAAU,GAAG,CAAC,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;YAC7E,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;gBACrB,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACxC,EAAE,CAAC,WAAW,GAAG,CAAC,CAAC;gBACnB,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACtB,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACzB,qDAAqD;YACrD,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC9C,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBACvB,MAAM,IAAI,GAAG,GAAgC,CAAC;gBAC9C,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACxC,KAAK,IAAI,QAAQ,IAAI,CAAC,EAAE,GAAC,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,KAAK,IAAI,EAAE,EAAE,IAAI,CAAC,OAAO,IAAI,EAAE;oBACrE,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE;oBACnC,MAAM,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;oBACxC,EAAE,CAAC,WAAW,GAAG,QAAQ,CAAC;oBAC1B,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;iBACtB;gBACjB,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAED;;;OAGG;IACH,SAAS,WAAW,CAAC,EAAU,EAAE,OAAe,EAAE;QAC9C,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC3C,MAAO,CAAC,WAAW,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACH,SAAS,SAAS,CAAC,EAAW,EAAE,EAAU;QACtC,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC5C,IAAI,EAAE,EAAE;YACJ,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YACzC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SACvC;aAAM;YACH,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACvC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACzC;IACL,CAAC;IAED,MAAM,SAAS,GAAG;QACd,cAAc,EAAE,eAAe;QAC/B,SAAS,EAAE,0BAA0B;QACrC,iBAAiB,EAAE,iBAAiB;QACpC,cAAc,EAAE,kBAAkB;QAClC,SAAS,EAAE,WAAW,EAAE,gBAAgB;QACxC,aAAa;KAChB,CAAC;IAGF,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;ACpUL;;GAEG;AACH,MAAa,OAAO;IAApB;QACY,sBAAiB,GAAuB,IAAI,CAAC,CAAG,yCAAyC;QACzF,kBAAa,GAAuB,IAAI,CAAC,CAAO,2DAA2D;QAC3G,wBAAmB,GAAuB,IAAI,CAAC,CAAC,kEAAkE;QAClH,oBAAe,GAAuB,IAAI,CAAC,CAAK,mDAAmD;QACnG,wBAAmB,GAAuB,IAAI,CAAC,CAAC,2DAA2D;QAC3G,uBAAkB,GAAuB,IAAI,CAAC,CAAE,0CAA0C;QAC1F,YAAO,GAAuB,IAAI,CAAC,CAAa,eAAe;IAkH3E,CAAC;IAhHI;;;;MAIE;IACF,kBAAkB,CAAC,OAAoB;QACpC,IAAI,CAAC,IAAI,CAAC,eAAe;YACrB,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;IACvC,CAAC;IAEK,mBAAmB,CAAI,QAAkB;;YAC3C,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC/F,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAClC,CAAC;KAAA;IAGD;;;OAGG;IACH,iBAAiB,CAAC,OAAoB;QAClC,IAAI,OAAO;YACP,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/B,CAAC;IAEK,WAAW,CAAI,WAAsB;;YACvC,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAI,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAClF,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAClC,CAAC;KAAA;IAGA;;;MAGE;IACF,eAAe,CAAC,OAAoB;QACjC,IAAI,OAAO;YACP,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;IAC1C,CAAC;IAEK,iBAAiB,CAAI,KAAa;;YACpC,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAClG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAClC,CAAC;KAAA;IAGA;;;MAGE;IACF,yBAAyB,CAAC,OAAoB;QAC3C,IAAI,OAAO;YACP,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;IAC3C,CAAC;IAEK,sBAAsB;;YACxB,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAK,CAAC,CAAC,CAAC,IAAI,CAAC;YAC/F,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAClC,CAAC;KAAA;IAGD;;;;;OAKG;IACH,oBAAoB,CAAC,OAAoB;QACrC,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;IACvC,CAAC;IAEK,iBAAiB,CAAC,QAAgB;;YACpC,IAAI,KAAK,GAAG,EAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAC;YAC3D,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAuB,QAAQ,CAAC,CAAC;gBACtF,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;oBAC1C,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;aACxB;YAED,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAGD;;;;OAIG;IACH,gBAAgB,CAAC,OAAoB;QACjC,IAAI,CAAC,IAAI,CAAC,aAAa;YACnB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IACrC,CAAC;IAEK,qBAAqB,CAAsC,GAAW,EAAE,GAAW;;YACrF,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAI,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC3F,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;QAClC,CAAC;KAAA;IAGD;;;;OAIG;IACH,oBAAoB,CAAC,OAAoB;QACrC,IAAI,CAAC,IAAI,CAAC,iBAAiB;YACvB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;IACzC,CAAC;IAEK,gBAAgB,CAAC,GAAW;;YAC9B,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACrF,CAAC;KAAA;CACJ;AAzHD,0BAyHC;AAEY,eAAO,GAAG,IAAI,OAAO,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;AClIrC,uEAA6B;AAE7B,sEAAsE;AAGtE,MAAsB,UAAU;IAG5B,YAAY,EAAU;QAFtB,QAAG,GAAuB,IAAI,CAAC,CAAE,0CAA0C;QAGvE,MAAM,CAAC,GAAG,SAAG,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9B,CAAC;IAID,aAAa,CAAC,GAAgB;QAC1B,IAAI,IAAI,CAAC,GAAG;YACR,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAED,cAAc;QACV,IAAI,IAAI,CAAC,GAAG;YACR,KAAK,IAAI,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC/C,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;aACjC;IACT,CAAC;CACJ;AArBD,gCAqBC;AAED;;;;;;;GAOG;AAEH,MAAa,aAAc,SAAQ,UAAU;IAEzC,YAAa,EAAU;QACnB,KAAK,CAAC,EAAE,CAAC,CAAC;IACd,CAAC;IAED;;;OAGG;IACG,eAAe,CAAI,MAAiB;;YACtC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACpC,MAAM,GAAG,GAAG,MAAM,SAAG,CAAC,SAAS,CAAI,OAAO,CAAC,CAAC;YAC5C,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACxB,MAAM,GAAG,GAAG,QAAQ,CAAC,cAAc,CAAC,0BAA0B,CAAC,CAAC;YAChE,GAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,GAAG,YAAY,OAAO,CAAC,MAAM,GAAG,CAAC;QACnE,CAAC;KAAA;CACJ;AAlBD,sCAkBC;AAGD;;GAEG;AACH,MAAa,mBAAoB,SAAQ,UAAU;IAE/C,YAAa,EAAU;QACnB,KAAK,CAAC,EAAE,CAAC,CAAC;IACd,CAAC;IAED;;;OAGG;IACG,eAAe,CAAI,MAAiB;;YACtC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACpC,MAAM,KAAK,GAAG,MAAM,SAAG,CAAC,gBAAgB,CAAI,OAAO,CAAC,CAAC;YACrD,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC1B,mEAAmE;YACnE,kEAAkE;QACtE,CAAC;KAAA;CACJ;AAlBD,kDAkBC;AAID;;GAEG;AACH,MAAa,mBAAoB,SAAQ,UAAU;IAE/C,YAAY,KAAa;QACrB,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAEK,eAAe,CAAI,MAAiB;;YACtC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAmB,CAAC;YAChD,IAAI,IAAI,CAAC,GAAG,EAAE;gBACV,SAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,EAAE,SAAG,CAAC,cAAc,CAAC,CAAC;gBACpD,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,MAAM,SAAG,CAAC,0BAA0B,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC;gBACvD,SAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,EAAE,SAAG,CAAC,cAAc,CAAC,CAAC;aACvD;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC;aACxF;QACL,CAAC;KAAA;CACJ;AAjBD,kDAiBC;AAGD;;GAEG;AACH,MAAa,aAAc,SAAQ,UAAU;IAEzC,YAAY,KAAa;QACrB,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAEK,eAAe,CAAI,MAAiB;;YACtC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAmB,CAAC;YAChD,IAAI,IAAI,CAAC,GAAG,EAAE;gBACV,yBAAyB;gBACzB,MAAM,SAAG,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;aAC9C;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC;aAClF;QACL,CAAC;KAAA;CAEJ;AAhBD,sCAgBC;AAGD;;GAEG;AACH,MAAa,eAAgB,SAAQ,UAAU;IAE3C,YAAY,KAAa;QACrB,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAEK,eAAe,CAAI,MAAiB;;YACtC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAmB,CAAC;YAChD,IAAI,IAAI,CAAC,GAAG,EAAE;gBACV,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,MAAM,SAAG,CAAC,0BAA0B,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;aAClE;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC;aACpF;QACL,CAAC;KAAA;CAEJ;AAhBD,0CAgBC;AAGD;;GAEG;AACH,MAAa,cAAe,SAAQ,UAAU;IAE1C,YAAY,KAAa;QACrB,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAEK,eAAe,CAAI,MAAiB;;YACtC,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAmB,CAAC;YAChD,IAAI,IAAI,CAAC,GAAG,EAAE;gBACV,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,MAAM,SAAG,CAAC,0BAA0B,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;aAClE;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC;aACnF;QACL,CAAC;KAAA;CACJ;AAfD,wCAeC;;;;;;;;;;;;;;ACxKD;;;GAGG;AACH,IAAY,YAAoD;AAAhE,WAAY,YAAY;IAAE,mCAAiB;IAAE,oCAAkB;AAAA,CAAC,EAApD,YAAY,4BAAZ,YAAY,QAAwC;AAAA,CAAC;;;;;;;UCLjE;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://foregor/./public/index.ts","webpack://foregor/./public/src/AppConnect.ts","webpack://foregor/./public/src/ResultHolder.ts/ResultHolder.ts","webpack://foregor/./public/src/concreteCommands/BaseCommand.ts","webpack://foregor/./public/src/concreteCommands/CmdDeleteRowTableOprihod.ts","webpack://foregor/./public/src/concreteCommands/CmdSendFormOprihod.ts","webpack://foregor/./public/src/concreteCommands/GetAllFromTableOprihod.ts","webpack://foregor/./public/src/concreteCommands/GetAllProdsByPathName.ts","webpack://foregor/./public/src/concreteCommands/GetAllProductFolder.ts","webpack://foregor/./public/src/concreteCommands/GetAttributesByPathName.ts","webpack://foregor/./public/src/concreteCommands/Oprihod.ts","webpack://foregor/./public/src/dom.ts","webpack://foregor/./public/src/invoke/Invoker.ts","webpack://foregor/./public/src/page/clients.ts","webpack://foregor/./public/src/types/EnumPageName.ts","webpack://foregor/webpack/bootstrap","webpack://foregor/webpack/before-startup","webpack://foregor/webpack/startup","webpack://foregor/webpack/after-startup"],"sourcesContent":["\r\nimport { appcn } from \"./src/AppConnect\";\r\nimport { Holder, ResultHolder } from \"./src/ResultHolder.ts/ResultHolder\";\r\nimport { GetAllFromTableOprihod } from \"./src/concreteCommands/GetAllFromTableOprihod\";\r\nimport { GetAllProductFolder } from \"./src/concreteCommands/GetAllProductFolder\";\r\nimport { Oprihod } from \"./src/concreteCommands/Oprihod\";\r\nimport { dom } from \"./src/dom\"; \r\nimport { invoker } from \"./src/invoke/Invoker\";\r\nimport { AllDataTableOprihod, AnswerOprihod, FillSelectPathNames, TableProducts } from \"./src/page/clients\";\r\nimport { EnumPageName } from \"./src/types/EnumPageName\";\r\nimport { TelegramWebApps } from 'telegram-webapps-types';\r\n\r\ndeclare const window: {\r\n    Telegram: TelegramWebApps.SDK;\r\n} & Window;\r\n\r\n\r\n\r\nconst datep = document.getElementById('currenttime');  \r\nsetInterval( () => {\r\n    if (datep)\r\n        datep.textContent = 'Таблица оприходования ' + \r\n                new Date().toLocaleString(\"ru-RU\", {timeZone: \"Europe/Moscow\"});\r\n}, 1000);\r\n \r\n(() =>{\r\n    const inputCount = document.getElementById(\"sel-count\");\r\n    if (inputCount) {\r\n        inputCount.addEventListener(\"keyup\", function() {\r\n            const input = <HTMLInputElement>this;\r\n            input.value = input.value.replace(/[^\\d]/g, \"\");\r\n            if (input.value.length > 7) {\r\n                const chank = [...input.value].slice(0, 6);\r\n                input.value = chank.join('');\r\n            }\r\n            \r\n        });\r\n    }\r\n\r\n})();\r\n\r\n\r\n\r\nconst idContainerCats = 'div-categories'; \r\nconst cntAllprd = document.getElementById('li-menu-allprod');\r\nconst cntOprihod = document.getElementById('li-menu-oprihod');\r\n\r\nconst sendFormOprihodButton = document.getElementById('input-product');\r\nsendFormOprihodButton?.addEventListener('click', dom.clbSendFormOprihod);\r\n\r\nconst clientFillselPathName = new FillSelectPathNames('sel-pathName');  // клиент select thml \"Категории\"\r\nexport const clientTableOptihod = new AllDataTableOprihod('contain-table-oprihod');\r\n\r\n// оприходовать\r\ninvoker.setCommandOprihod(new Oprihod(appcn));\r\nconst clientResOprihod = new AnswerOprihod(\"oprihodinfo\");\r\nconst answerResHolder = new ResultHolder(clientResOprihod);\r\nconst btnOprihod = document.getElementById('input-oprihod');\r\nbtnOprihod?.addEventListener('click', async () => {\r\n    dom.loadImage(true, 'loadoprihod');\r\n    dom.textMessage('oprihodinfo', 'оприходование в МойСклад...');\r\n    const isCheckSend = document.getElementById('issendsklad');\r\n    const ischeck = (<HTMLInputElement>isCheckSend).checked;\r\n    const res = await invoker.sendOprihod({who: \"admin\", role: \"admin\", isSendSklad: ischeck});\r\n    const rHolder = new Holder('answerOprihod', res);\r\n    answerResHolder.execute(rHolder);\r\n    dom.loadImage(false, 'loadoprihod');\r\n    dom.textMessage('oprihodinfo');\r\n});\r\n\r\n/**\r\n * старт при загрузке стр. \r\n */\r\nconst firstStart = async () => {\r\n    invoker.setAllProductsFolder(new GetAllProductFolder(appcn));           // установить команду получения списка категорий\r\n    const arrCats = await invoker.getAllProdFolder('allProdFolder');        // получить список категорий по команде\r\n    const holderSelPathName = new ResultHolder(clientFillselPathName);      // создать хранителя результата вып-я команды\r\n    const holder = new Holder('sel-pathName', arrCats);                     // объект результата вып-я команды\r\n    await holderSelPathName.execute(holder);                                // хранитель отдает результат клиенту (здесь select html)\r\n    invoker.setGetAllDataTableOprihod(new GetAllFromTableOprihod(appcn));\r\n    const tableDataOpr = await invoker.getAllDataTableOprihod();\r\n    const holderTableOprh = new ResultHolder(clientTableOptihod);\r\n    const holderTO = new Holder('holderFirstStart', tableDataOpr);\r\n    holderTableOprh.execute(holderTO);\r\n}; \r\n\r\n\r\n\r\nif (cntOprihod && cntAllprd)\r\n    for (let v of [cntOprihod, cntAllprd]) {\r\n        v.addEventListener('click', async (e) => {\r\n            const target = e.target as HTMLAnchorElement;\r\n            switch (target.name) {\r\n                case EnumPageName.OPRIHOD: {\r\n                    await firstStart();          \r\n                    break;\r\n                }\r\n                case EnumPageName.ALLPROD: {\r\n                    \r\n                    const table = new TableProducts('table-container');  //ClientData\r\n                    if (!table || (!table.cnt)) break;\r\n                    await dom.createListCats(idContainerCats, table, invoker); \r\n\r\n                }\r\n            } \r\n        });\r\n    }\r\n\r\nfirstStart();\r\n\r\n\r\nconst dwnl = document.getElementById('input-downloadfile');\r\nwindow.Telegram.WebApp.ready();\r\n\r\ndwnl!.addEventListener('click', async (e) => {\r\n    try {\r\n        e.preventDefault();\r\n        const blob = await appcn.getExcelFile();\r\n        if (blob) {\r\n            // const file = window.URL.createObjectURL(blob);\r\n            // window.location.assign(file);\r\n        \r\n            \r\n            // const url = window.URL.createObjectURL(blob);\r\n            // const a = document.createElement('a');\r\n            // a.href = url;\r\n            // a.download = \"AllOprihods.xlsx\";\r\n            // document.body.appendChild(a); \r\n            // a.click();    \r\n            // a.remove();   \r\n            const urllink = appcn.getLinkDownloadExcell();\r\n            // @ts-ignore\r\n            window.Telegram.WebApp.openLink(urllink);\r\n        }\r\n\r\n    } catch (e) { console.log('error download file', e) } \r\n})\r\n\r\n\r\n\r\n","import { TelegramWebApps } from \"telegram-webapps-types\";\r\nimport { DoOprihod, TypeInputOprihod } from \"./types/TypesFrontend\";\r\n\r\nconst DEVHOST = 'https://foregor.vercel.app/';\r\n// const DEVHOST = '/';\r\nexport const HOST = DEVHOST;\r\n\r\n\r\nexport class AppConnect {\r\n\r\n    host = HOST;\r\n    constructor(host: string) {\r\n        this.host = host;\r\n    }\r\n\r\n    getLinkDownloadExcell(): string {\r\n        return this.host + 'getOprihodsExcel';\r\n    }\r\n\r\n    async getProdFolders(url: string) {\r\n        const resp = await fetch(this.host + url, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json;charset=utf-8' \r\n            },\r\n            body: JSON.stringify({})\r\n        });\r\n        return await resp.json();\r\n    }\r\n\r\n\r\n    async getExcelFile() {\r\n        try {\r\n            const resp = await fetch(this.host + 'getOprihodsExcel', {method: 'GET'});\r\n            return await resp.blob();\r\n        } catch (e) { console.log('error AppConnect -> getExcelFile()') } \r\n        return null;    \r\n    }\r\n\r\n    // получить товары по pathName\r\n    async getProductByCats(url: string, uri: string) {\r\n        const requestData = {URISklad: uri};\r\n        const resp = await fetch(this.host+url, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(requestData)\r\n        });\r\n        const result = await resp.json();\r\n        return result;\r\n    }\r\n\r\n    // отправить форму оприход\r\n    async getRespSendFormDataOprihod(formData: FormData) {\r\n        const response = await fetch(this.host + 'formOprihod', {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n        const result = await response.json();\r\n        \r\n        return result;\r\n    }\r\n\r\n\r\n    // Кнопка оприходовать\r\n    async doOprihod(data: DoOprihod) {\r\n        const response = await fetch(this.host + 'doOprihod', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n              },\r\n              body: JSON.stringify(data)\r\n        });\r\n        const result = await response.json();\r\n        \r\n        return result;\r\n    }\r\n\r\n    // получить таблицу добавленных продуктов\r\n    async getTableOprihod(): Promise<TypeInputOprihod> {\r\n        const response = await fetch(this.host + 'getTableOprihod', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n              },\r\n              body: JSON.stringify({})\r\n        });\r\n        const result = await response.json();\r\n        return result;\r\n    }\r\n\r\n\r\n    async deleteRow<T>(idrow: string): Promise<T> {\r\n        const response = await fetch(this.host + 'deleteRow', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n              },\r\n              body: JSON.stringify({delId: idrow})\r\n        });\r\n        const result = await response.json();\r\n        return result;\r\n    }\r\n\r\n\r\n    // получить списки цвет и название по pathName для select-ов\r\n    async getAttributesNameColorsByPathName(pathName: string) {\r\n        const reqData = {pathName: pathName};\r\n        const resp = await fetch(this.host + 'getAttrsByPath', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(reqData)\r\n        });\r\n        const result = await resp.json();\r\n        return result;\r\n    }\r\n\r\n    // отправка на сервер данных от телеграм /////тест\r\n    async sendTelegramData(data: TelegramWebApps.WebAppInitData) {\r\n        const resp = await fetch(this.host + 'fromTelegram', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n        const result = await resp.json();\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nexport const appcn = new AppConnect(HOST);","import { ClientData } from \"../page/clients\";\r\nimport { HolderData } from \"../types/HolderData\";\r\n\r\n\r\n\r\nexport class Holder<T> {\r\n    private hold: T[]  = [];\r\n    \r\n    constructor(public name: string, data: T[]) {\r\n        this.data = data;\r\n    }\r\n\r\n    set data(d: T[]) {\r\n        if (Array.isArray(d)) {\r\n            this.hold.length = 0;\r\n            this.hold = [...d]\r\n        }\r\n    }\r\n\r\n    get data(): HolderData<T> {\r\n        if (this.hold) {\r\n            return {name: this.name, arrData: this.hold}\r\n        }\r\n        return {name: '', arrData: []};\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport class ResultHolder {\r\n\r\n    constructor(public client: ClientData) {}\r\n\r\n    async execute<T>(holder: Holder<T>) {\r\n        if (this.client) {\r\n            await this.client.executeCallback<T>(holder);\r\n        }\r\n    }\r\n\r\n}","import { AppConnect } from \"../AppConnect\";\r\nimport { Command } from \"../types/Command\";\r\n\r\n\r\nexport abstract class BaseCommand implements Command{\r\n    protected respExecute: any = null;\r\n\r\n    constructor (protected reciever: AppConnect) {}\r\n\r\n    abstract execute<T>(...args: any[]): Promise<T[]>;\r\n\r\n    getResponse() {\r\n        const returnResponse = this.respExecute;\r\n        return returnResponse;\r\n    }\r\n}","import { AppConnect } from \"../AppConnect\";\r\nimport { BaseCommand } from \"./BaseCommand\";\r\n\r\n\r\n/**\r\n * Удалить строку таблицы оприходования\r\n *  \r\n */\r\nexport class CmdDeleteRowTableOprihod extends BaseCommand {\r\n    \r\n    constructor(reciever: AppConnect) {\r\n        super(reciever)\r\n    }\r\n    \r\n\r\n    async execute<T>(idrow: string): Promise<T[]> {\r\n        this.respExecute = await this.reciever.deleteRow<T>(idrow) as T[];  //appcnt\r\n        return this.getResponse();\r\n    }\r\n\r\n}","import { AppConnect } from \"../AppConnect\";\r\nimport { BaseCommand } from \"./BaseCommand\";\r\n\r\n\r\n/**\r\n * Отправить заполненную форму цвет имя кол-во фото\r\n * на сервер. получить таблицу\r\n */\r\nexport class CmdSendFormOprihod extends BaseCommand {\r\n    \r\n    constructor(reciever: AppConnect) {\r\n        super(reciever)\r\n    }\r\n    \r\n\r\n    async execute<T>(formData: FormData): Promise<T[]> {\r\n        this.respExecute = await this.reciever.getRespSendFormDataOprihod(formData) as T[];  //appcnt\r\n        return this.getResponse();\r\n    }\r\n\r\n}","import { AppConnect } from \"../AppConnect\";\r\nimport { TypeInputOprihod } from \"../types/TypesFrontend\";\r\nimport { BaseCommand } from \"./BaseCommand\";\r\n\r\n\r\n/**\r\n * Команда. Получить всю таблицу добавленной продукции для оприходования\r\n */\r\nexport class GetAllFromTableOprihod extends BaseCommand {\r\n    \r\n    constructor(reciever: AppConnect) {\r\n        super(reciever)\r\n    }\r\n    \r\n\r\n    async execute<T>(): Promise<T[]> {\r\n        this.respExecute = await this.reciever.getTableOprihod() as TypeInputOprihod;\r\n        return this.getResponse();\r\n    }\r\n\r\n}","import { AppConnect } from \"../AppConnect\";\r\nimport { BaseCommand } from \"./BaseCommand\";\r\n\r\n\r\n/**\r\n * Команда. Получить список продукции по URI pathName \r\n * МойСклад/Продукция Плиточка\r\n */\r\nexport class GetAllProdsByPathName extends BaseCommand {\r\n    \r\n    constructor(reciever: AppConnect) {\r\n        super(reciever)\r\n    }\r\n    \r\n\r\n    async execute<T>(url: string, uri: string): Promise<T[]> {\r\n        this.respExecute = await this.reciever.getProductByCats(url, uri) as T[];\r\n        return this.getResponse();\r\n    }\r\n\r\n}","import { AppConnect } from \"../AppConnect\";\r\nimport { BaseCommand } from \"./BaseCommand\";\r\n\r\n\r\n/**\r\n * Команда получения списка разделов (категорий)\r\n * МойСклад/Продукция Плиточка\r\n */\r\nexport class GetAllProductFolder extends BaseCommand {\r\n\r\n    constructor(reciever: AppConnect) {\r\n        super(reciever);\r\n    }\r\n    \r\n\r\n    async execute<T>(uri: string): Promise<T> {\r\n        return await this.reciever.getProdFolders(uri);\r\n    }\r\n}","import { AppConnect } from \"../AppConnect\";\r\nimport { BaseCommand } from \"./BaseCommand\";\r\n\r\n\r\n/**\r\n * Команда. Получить атрибуты: имя, цвет по pathName \r\n * type: AttributesByPathName\r\n * (выбранный элемент списка select html \"Категории\")\r\n */\r\nexport class GetAttributesByPathName extends BaseCommand {\r\n    \r\n    constructor(reciever: AppConnect) {\r\n        super(reciever)\r\n    }\r\n    \r\n\r\n    async execute<T>(pathName: string): Promise<T[]> {\r\n        this.respExecute = await this.reciever.getAttributesNameColorsByPathName(pathName) as T[];\r\n        return this.getResponse();\r\n    }\r\n\r\n}","import { AppConnect } from \"../AppConnect\";\r\nimport { DoOprihod } from \"../types/TypesFrontend\";\r\nimport { BaseCommand } from \"./BaseCommand\";\r\n\r\n\r\n/**\r\n * Оприходовать таблицу в МойСклад\r\n *  \r\n */\r\nexport class Oprihod extends BaseCommand {\r\n    \r\n    constructor(reciever: AppConnect) {\r\n        super(reciever)\r\n    }\r\n    \r\n\r\n    async execute<T>(data: DoOprihod): Promise<T[]> {\r\n        this.respExecute = await this.reciever.doOprihod(data) as T[];  //appcnt\r\n        return this.getResponse();\r\n    }\r\n\r\n}","import { GetAllProdsByPathName } from './concreteCommands/GetAllProdsByPathName';\r\nimport { Invoker, invoker} from './invoke/Invoker';\r\nimport { appcn } from './AppConnect';\r\nimport { MinimizeResponseListProds, TypeInputOprihod } from './types/TypesFrontend';\r\nimport { GetAllProductFolder } from './concreteCommands/GetAllProductFolder';\r\nimport { Holder, ResultHolder } from './ResultHolder.ts/ResultHolder';\r\nimport { ClientData, FillSelectColor, FillSelectName, } from './page/clients';\r\nimport { GetAttributesByPathName } from './concreteCommands/GetAttributesByPathName';\r\nimport { CmdSendFormOprihod } from './concreteCommands/CmdSendFormOprihod';\r\nimport { clientTableOptihod } from '..';\r\nimport { CmdDeleteRowTableOprihod } from './concreteCommands/CmdDeleteRowTableOprihod';\r\n\r\n\r\nexport const dom = (() => {\r\n\r\n    /**\r\n     * Получить от сервера список раздеров МойСклад->Продукция Плиточка,\r\n     * Создать список li a разделов, назначить колбеки получения результата,\r\n     * результат отдать объекту ResultHolder\r\n     * @param idcontainer id <div> контейнера в котором создадутся списки\r\n     * @param invoker отправитель команд\r\n     */\r\n    async function createListCats(idcontainer: string, table: ClientData, invoker: Invoker) {\r\n        const url = 'getProductByCats'; \r\n        const cnt = document.getElementById(idcontainer);\r\n        invoker.setGetProdByCats(new GetAllProdsByPathName(appcn));\r\n        invoker.setAllProductsFolder(new GetAllProductFolder(appcn));\r\n        const arrCats: string[] = await invoker.getAllProdFolder('allProdFolder');\r\n        const resultHolder = new ResultHolder(table);\r\n        arrCats.forEach((el) => {\r\n            const a = document.createElement('A') as HTMLAnchorElement;\r\n            a.classList.add('list-group-item', 'list-group-item-action', 'list-group-item-success');\r\n            a.href = url;\r\n            a.textContent = el;\r\n            a.addEventListener('click', async (e) => {\r\n            if ((<HTMLElement> e.target).nodeName === 'A') {\r\n                e.preventDefault();\r\n                const uri = (<HTMLElement> e.target).textContent as string;\r\n                const result = await invoker.сallbackGetProdByCats<MinimizeResponseListProds>(url, uri) as MinimizeResponseListProds[];\r\n                // debugger;\r\n                const holder = new Holder<MinimizeResponseListProds>(uri, result);\r\n                await resultHolder.execute<MinimizeResponseListProds>(holder);\r\n            }\r\n            });\r\n            cnt!.appendChild(a);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Наполнить выпадающий список. Данные получить\r\n     * от мойсклад / db\r\n     * @param select -- (#sel-pathName) объект выпадающего списка\r\n     * @param listdata -- список значений для заполнения. \r\n     *                 Первый из списка пустой/не пустой (emptyFirst: boolean).\r\n     */\r\n    async function fillSelectPahtNamesOprihod(select: HTMLElement, listdata: string[], emptyFirst: boolean = true) {\r\n        const listd = [...listdata];\r\n        if (emptyFirst)\r\n            listd.unshift('---');\r\n        listd.forEach((v, i) => {\r\n            const option = document.createElement('option');\r\n            option.setAttribute('id', `${select.id}_${i}`);\r\n            option.setAttribute('value', v);\r\n            const shortSplitPathName = v.split('/');\r\n            const shortPname = shortSplitPathName.slice(shortSplitPathName.length-2, shortSplitPathName.length).join('/');\r\n            option.textContent = shortPname;\r\n            select?.appendChild(option);\r\n        });\r\n    }\r\n\r\n\r\n    function setCallbackSelect(select: HTMLElement, callb: (this: HTMLElement, ev: Event) => any) {\r\n        select.addEventListener('change', callb);\r\n    }\r\n\r\n    function delCallbackSelect(select: HTMLElement, callb: (this: HTMLElement, ev: Event) => any) {\r\n        select.removeEventListener('change', callb);\r\n    }\r\n    \r\n\r\n    const cmdSendDataFormOprihod = new CmdSendFormOprihod(appcn);\r\n\r\n    /**\r\n     * Отправка формы с данными оприходывания\r\n     * @param e \r\n     */\r\n    async function clbSendFormOprihod(e: Event) {\r\n        e.preventDefault();\r\n        const form = (<HTMLFormElement> e.target).form as HTMLFormElement;\r\n        const names = [\"sellist-pathName\", \"sellist-name\", \"sellist-article\", \"sellist-color\", \"sellist-count\", \"sellist-photo\"];\r\n        const fdata = new FormData();\r\n        let i = 0; \r\n         \r\n        for (let el of form) {\r\n            if (i > 4) break;\r\n            const name = names[i].split('-')[1];\r\n            if (el instanceof HTMLSelectElement) {\r\n                const opts = el.childNodes as NodeListOf<HTMLOptionElement>;\r\n                let value = '';\r\n                for (let v of opts) {\r\n                    if (v instanceof HTMLOptionElement && v.selected) {\r\n                        value = v.value;\r\n                        break;\r\n                    }\r\n                }\r\n                fdata.append(name, value);\r\n            } else if (el instanceof HTMLInputElement) {\r\n                if (el.type === 'file') {\r\n                    const fls = el.files;\r\n                    if (fls) {\r\n                        for (let f of fls) {\r\n                            fdata.append('file', f);\r\n                        }\r\n                         \r\n                    }\r\n                } else {\r\n                    const value = el.value;\r\n                    fdata.append(name, value);\r\n                }\r\n            }\r\n            i += 1;\r\n        }\r\n        const currDate = new Date().toLocaleString(\"ru-RU\", {timeZone: \"Europe/Moscow\"});\r\n        const dt = currDate.split(',');\r\n        fdata.append('date', dt[0].trim());\r\n        fdata.append('time', dt[1].trim());\r\n\r\n        loadImage(true, 'loadstate'); \r\n        textMessage('errinfo', 'Отправка данных...');   \r\n        invoker.setSendFormOprihod(cmdSendDataFormOprihod);\r\n        \r\n        const result = await invoker.sendDataFormOprihod<TypeInputOprihod>(fdata);\r\n        if (Array.isArray(result) && result.length === 1 && result[0].errors) {\r\n            const msgarr = result[0].errors.map(v => {return v.message}).join('; ');\r\n            \r\n            loadImage(false, 'loadstate');\r\n            textMessage('errinfo', msgarr);\r\n        } else {\r\n            loadImage(false, 'loadstate');\r\n            textMessage('errinfo');\r\n             \r\n            const holderTableOprh = new ResultHolder(clientTableOptihod);\r\n            const holderTO = new Holder('holderFirstStart', result);\r\n            await holderTableOprh.execute(holderTO);\r\n        }\r\n        const infile = document.getElementById('sel-photo') as HTMLInputElement;\r\n        infile.value = '';\r\n         \r\n        // for (let [k, v] of fdata.entries()) {console.log(k, v)}\r\n    }\r\n\r\n    const commandGetAttrColorName = new GetAttributesByPathName(appcn); // команда получить цвет, имя по namePath\r\n    const commandDelRow = new CmdDeleteRowTableOprihod(appcn);\r\n    /**\r\n     * Коллбек по выбору элемента списка \"Категории\" \r\n     * @param e Event \r\n     */\r\n    async function clbSelPathName(e: Event) {\r\n        const opts = (<HTMLElement> e.target).childNodes as NodeListOf<HTMLOptionElement>;\r\n        invoker.setGetAttrsColorName(commandGetAttrColorName);\r\n        for (let el of opts) {\r\n            if (el instanceof HTMLOptionElement && el.selected) {\r\n                const clientColor = new FillSelectColor('sel-color');\r\n                const clientName = new FillSelectName('sel-name');\r\n                const result = await invoker.getAttrsColorName(el.value);\r\n                const resultHolderColor = new ResultHolder(clientColor);\r\n                const resultHolderName = new ResultHolder(clientName);\r\n                const hldColor = new Holder(result.pathName, result.colors);\r\n                const hldName = new Holder(result.pathName, result.names);\r\n                await resultHolderColor.execute(hldColor);\r\n                await resultHolderName.execute(hldName);\r\n                \r\n                break;       \r\n            }\r\n        }\r\n    } \r\n\r\n\r\n    /**\r\n     * Создать и вернуть контейнерный Html элемент\r\n     * @param id \r\n     * @returns \r\n     */\r\n    function createContainer(id: string): HTMLElement | null {\r\n        const cnt = document.getElementById(id);\r\n        return (cnt) ? cnt : null;\r\n    }\r\n\r\n    /**\r\n     * Таблица оприходования\r\n     */\r\n    async function makeOprihodTable<T>(arrData: T[]): Promise<HTMLTableElement> {\r\n        const table = document.createElement('table');\r\n        table.classList.add('table', 'table-striped', 'table-bordered', 'table-sm', 'custom-style-table');\r\n        // ---------- шея -----------------------------------\r\n        const thead = document.createElement('thead');\r\n        thead.classList.add('thead-light');\r\n        const tr = document.createElement('tr'); //(name, color, count, pathName, date, time, photoPath)\r\n        const titleTable = ['id', 'название', 'цвет', 'артикул', 'кол-во', 'из категории', 'дата', 'время', ''];\r\n        titleTable.forEach((v) => {\r\n            const th = document.createElement('th');\r\n            th.textContent = v;\r\n            tr.appendChild(th)\r\n        });\r\n        thead.appendChild(tr);\r\n        table.appendChild(thead);\r\n        const lastValPathName = (pathName: string): string => {\r\n            try {\r\n               const spl = pathName.split('/');\r\n            const len = spl.length;\r\n            return '../' + spl.slice(len-1, len).join('/'); \r\n            } catch (e) {}\r\n            return '';\r\n        }\r\n        // ---------- тело ----------------------------------\r\n        const tbody = document.createElement('tbody');\r\n        arrData.forEach((val) => {\r\n            const data = val as TypeInputOprihod;\r\n            const tr = document.createElement('tr');\r\n            tr.addEventListener('click', async (e) => {\r\n                const elem = e.target;\r\n                if (elem instanceof HTMLAnchorElement) {\r\n                    const rowId = elem.id.split('_')[1];\r\n                    invoker.setCmdDeleteRow(commandDelRow);\r\n                     \r\n                    const resDel = await invoker.sendDeleteRowById<TypeInputOprihod>(rowId);\r\n                    const delHolder = new Holder('delH'+rowId, resDel);\r\n                    const resDelHolder = new ResultHolder(clientTableOptihod);\r\n                    await resDelHolder.execute(delHolder);\r\n                }   \r\n            });\r\n\r\n            for (let cellName of [data.products_id, data.name || '', data.color || '', data.article || '', data.count || '', \r\n                lastValPathName(data.pathName), data.date || '', data.time || '', ]) {\r\n                    const td = document.createElement('td');\r\n                    td.textContent = ''+cellName;\r\n                    tr.appendChild(td);\r\n            }\r\n            const a = document.createElement('A') as HTMLAnchorElement;\r\n            a.setAttribute('id', `delrow_${data.id}`);\r\n            a.classList.add('list-group-item', 'list-group-item-action', 'list-group-item-danger');\r\n            a.textContent = 'удалить';\r\n            tr.appendChild(a);\r\n            tbody.appendChild(tr);\r\n        });\r\n        table.appendChild(tbody);\r\n\r\n        return table;\r\n    }\r\n\r\n\r\n    async function answerOprihod(_cnt: HTMLSpanElement, arrdata: any[]) {\r\n        console.log('dom.answerOprihod():\\n', arrdata);\r\n    }\r\n\r\n\r\n    /**\r\n     * Создать и вернуть таблицу данных\r\n     * @param arrData массив с данными\r\n     * @returns \r\n     */\r\n    async function makeTable<T>(arrData: T[]): Promise<HTMLTableElement> {\r\n        const table = document.createElement('table');\r\n        table.classList.add('table', 'table-striped', 'table-sm', 'custom-style-table');\r\n        // ---------- шея -----------------------------------\r\n        const thead = document.createElement('thead');\r\n        thead.classList.add('thead-light');\r\n        const tr = document.createElement('tr');\r\n        const titleTable = ['№', 'название', 'цвет', 'артикль', 'код', 'категория',];\r\n        titleTable.forEach((v) => {\r\n            const th = document.createElement('th');\r\n            th.textContent = v;\r\n            tr.appendChild(th)\r\n        });\r\n        thead.appendChild(tr);\r\n        table.appendChild(thead);\r\n        // ---------- тело ----------------------------------\r\n        const tbody = document.createElement('tbody');\r\n        arrData.forEach((val, i) => {\r\n            const data = val as MinimizeResponseListProds;\r\n            const tr = document.createElement('tr');\r\n            for (let cellName of [''+(i+1), data.name || '', data.color || '', data.article || '', \r\n                            data.code || '', data.pathName || '']) {\r\n                                const td = document.createElement('td');\r\n                                td.textContent = cellName;\r\n                                tr.appendChild(td);\r\n                            }\r\n            tbody.appendChild(tr);\r\n        });\r\n        table.appendChild(tbody);\r\n        return table;\r\n    }\r\n\r\n    /**\r\n     * элементу с определенным id назначить текст\r\n     * @param text message\r\n     */\r\n    function textMessage(id: string, text: string = '') {\r\n        const textel = document.getElementById(id);\r\n        textel!.textContent = text;\r\n    }\r\n\r\n    /**\r\n     * включить/выключить картинку загрузки\r\n     * @param on \r\n     */\r\n    function loadImage(on: boolean, id: string) {\r\n        const loadImg = document.getElementById(id);\r\n        if (on) {\r\n            loadImg?.classList.remove('noloadstate');\r\n            loadImg?.classList.add('loadstate');\r\n        } else {\r\n            loadImg?.classList.remove('loadstate');\r\n            loadImg?.classList.add('noloadstate');\r\n        }\r\n    }\r\n\r\n    const publicApi = { \r\n        createListCats, createContainer, \r\n        makeTable, fillSelectPahtNamesOprihod,\r\n        setCallbackSelect, delCallbackSelect, \r\n        clbSelPathName, clbSendFormOprihod,\r\n        loadImage, textMessage, makeOprihodTable,\r\n        answerOprihod,\r\n    };\r\n\r\n\r\n    return publicApi;\r\n})();\r\n","import { BaseCommand } from \"../concreteCommands/BaseCommand\";\r\nimport { DoOprihod, MinimizeResponseListProds } from \"../types/TypesFrontend\";\r\nimport { AttributesByPathName } from '../types/AttributesByPathName';\r\n\r\n\r\n/**\r\n * Отправитель команд. Содержит команды приложения.\r\n */\r\nexport class Invoker {\r\n    private allProductsFolder: BaseCommand | null = null;   // категории (разделы) продукций МойСклад\r\n    private productByCats: BaseCommand | null = null;       // список товаров определенной категории (раздела МойСклад)\r\n    private colorNameByCategory: BaseCommand | null = null; // атрибуты цветов и названий по выбранной (select html) категории\r\n    private sendFormOprihod: BaseCommand | null = null;     // отправить форму для добавления товара в таблицу \r\n    private getDataTableOprihod: BaseCommand | null = null; // получить таблицу добавленных продуктов для оприходования\r\n    private deleteRowFromTable: BaseCommand | null = null;  // удалить строку из таблицы оприходований\r\n    private oprihod: BaseCommand | null = null;             // оприходовать\r\n\r\n     /**\r\n     * -----------------------------------------------------------------------\r\n     * @param command Отправить заполненную форму цвет имя кол-во фото\r\n     * на сервер. получить таблицу.\r\n     */\r\n     setSendFormOprihod(command: BaseCommand) {\r\n        if (!this.sendFormOprihod)\r\n            this.sendFormOprihod = command;\r\n    }\r\n\r\n    async sendDataFormOprihod<T>(formData: FormData): Promise<T[]> {\r\n        const result = (this.sendFormOprihod) ? await this.sendFormOprihod.execute<T>(formData) : null;\r\n        return (result) ? result : [];\r\n    }\r\n\r\n\r\n    /**\r\n     * -----------------------------------------------------------------------\r\n     * @param command Оприходовать таблицу в МойСклад\r\n     */\r\n    setCommandOprihod(command: BaseCommand) {\r\n        if (command)\r\n            this.oprihod = command;\r\n    }\r\n\r\n    async sendOprihod<T>(oprihodData: DoOprihod): Promise<T[]> {\r\n        const result = (this.oprihod) ? await this.oprihod.execute<T>(oprihodData) : null;\r\n        return (result) ? result : [];\r\n    }\r\n\r\n\r\n     /**\r\n     * -----------------------------------------------------------------------\r\n     * @param command удалить строку из таблицы оприходований\r\n     */\r\n     setCmdDeleteRow(command: BaseCommand) {\r\n        if (command)\r\n            this.deleteRowFromTable = command;\r\n    }\r\n\r\n    async sendDeleteRowById<T>(rowId: string): Promise<T[]> {\r\n        const result = (this.deleteRowFromTable) ? await this.deleteRowFromTable.execute<T>(rowId) : null;\r\n        return (result) ? result : [];\r\n    }\r\n\r\n\r\n     /**\r\n     * -----------------------------------------------------------------------\r\n     * @param command получить таблицу добавленных продуктов для оприходования\r\n     */\r\n     setGetAllDataTableOprihod(command: BaseCommand) {\r\n        if (command)\r\n            this.getDataTableOprihod = command;\r\n    }\r\n\r\n    async getAllDataTableOprihod<T>(): Promise<T[]> {\r\n        const result = (this.getDataTableOprihod) ? await this.getDataTableOprihod.execute<T>() : null;\r\n        return (result) ? result : [];\r\n    }\r\n\r\n\r\n    /**\r\n     * -----------------------------------------------------------------------\r\n     * @param command Установить команду получения атрибутов: имя, цвет по pathName \r\n     * type: AttributesByPathName\r\n     * (выбранный элемент списка select html \"Категории\")\r\n     */\r\n    setGetAttrsColorName(command: BaseCommand) {\r\n        this.colorNameByCategory = command;\r\n    }\r\n\r\n    async getAttrsColorName(pathName: string): Promise<AttributesByPathName> {\r\n        let attrs = {pathName: pathName, names: [''], colors: ['']}\r\n        if (this.colorNameByCategory) {\r\n            const result = await this.colorNameByCategory.execute<AttributesByPathName>(pathName);\r\n            if (Array.isArray(result) && result.length > 0)\r\n                return result[0];\r\n        }\r\n         \r\n        return attrs;\r\n    }\r\n\r\n\r\n    /**\r\n     * -----------------------------------------------------------------------\r\n     * @param command Установить команду получения всех товаров\r\n     * из моего склада по определенному URI\r\n     */\r\n    setGetProdByCats(command: BaseCommand) {\r\n        if (!this.productByCats)\r\n            this.productByCats = command;\r\n    }\r\n\r\n    async сallbackGetProdByCats<T extends MinimizeResponseListProds>(url: string, uri: string): Promise<T[]> {\r\n        const result = (this.productByCats) ? await this.productByCats.execute<T>(url, uri) : null;\r\n        return (result) ? result : [];\r\n    }\r\n    \r\n\r\n    /**\r\n     * ----------------------------------------------------------------------\r\n     * @param command Установить команду получения\r\n     * всех категорий (разделов) продукции МойСклад\r\n     */\r\n    setAllProductsFolder(command: BaseCommand): void {\r\n        if (!this.allProductsFolder)\r\n            this.allProductsFolder = command;\r\n    }\r\n\r\n    async getAllProdFolder(uri: string): Promise<string[]>{\r\n        return (this.allProductsFolder) ? await this.allProductsFolder.execute(uri) : [];\r\n    }\r\n}\r\n\r\nexport const invoker = new Invoker();","import { Holder } from \"../ResultHolder.ts/ResultHolder\";\r\nimport { dom } from \"../dom\";\r\nimport { Clearable } from \"../types/Clearable\";\r\n// import { MinimizeResponseListProds } from \"../types/TypesFrontend\";\r\n\r\n\r\nexport abstract class ClientData {\r\n    cnt: HTMLElement | null = null;  // динамический div контейнер для таблицы \r\n\r\n    constructor(id: string) {\r\n        const c = dom.createContainer(id);\r\n        this.cnt = (c) ? c : null;\r\n    }\r\n\r\n    abstract executeCallback<T>(holder: Holder<T>): Promise<void>;\r\n\r\n    fillContainer(obj: HTMLElement): void {\r\n        if (this.cnt) \r\n            this.cnt.appendChild(obj);\r\n    }\r\n\r\n    clearContainer(): void {\r\n        if (this.cnt)\r\n            for (let domElem of Array.from(this.cnt.children)) {\r\n                this.cnt.removeChild(domElem);\r\n            }\r\n    }\r\n}\r\n\r\n/**\r\n * Порядок: экзмпл ClientData управляет своим содержимым.\r\n * у него есть объект-контейнер html и колбек-метод.\r\n * Сначала где-то получаю данные из сервера вызовом команды Command, данные превращаю в\r\n * объект Holder<T>, потом его отдаю на выполнение ResultHolder.execute(holder),\r\n * последний в  свою очередь вызывает метод executeCallback<T>(holder: Holder<T>)\r\n * у ClientData\r\n */\r\n\r\nexport class TableProducts extends ClientData implements Clearable {\r\n    \r\n    constructor (id: string) {\r\n        super(id);\r\n    }\r\n\r\n    /**\r\n     * Callback. Создать таблицу. \r\n     * @param holder результат из мойсклад\r\n     */\r\n    async executeCallback<T>(holder: Holder<T>) {\r\n        const arrdata = holder.data.arrData;\r\n        const tbl = await dom.makeTable<T>(arrdata);\r\n        this.clearContainer();\r\n        this.fillContainer(tbl);\r\n        const who = document.getElementById('id-label-table-list-from');\r\n        who!.textContent = holder.name + ` [всего: ${arrdata.length}]`;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Создает таблицу оприходования\r\n */\r\nexport class AllDataTableOprihod extends ClientData implements Clearable {\r\n    \r\n    constructor (id: string) {\r\n        super(id);\r\n    }\r\n\r\n    /**\r\n     * Callback. Создать таблицу. \r\n     * @param holder результат вернувш. таблица\r\n     */\r\n    async executeCallback<T>(holder: Holder<T>) {\r\n        const arrdata = holder.data.arrData;\r\n        const table = await dom.makeOprihodTable<T>(arrdata);\r\n        this.clearContainer();\r\n        this.fillContainer(table);\r\n        // const who = document.getElementById('id-label-table-list-from');\r\n        // who!.textContent = holder.name + ` [всего: ${arrdata.length}]`;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Наполняет html select \"Категории\" \r\n */\r\nexport class FillSelectPathNames extends ClientData implements Clearable {\r\n     \r\n    constructor(idsel: string) {\r\n        super(idsel);         \r\n    }\r\n\r\n    async executeCallback<T>(holder: Holder<T>): Promise<void> {\r\n        const arrdata = holder.data.arrData as string[];\r\n        if (this.cnt) {\r\n            dom.delCallbackSelect(this.cnt, dom.clbSelPathName);\r\n            this.clearContainer();\r\n            await dom.fillSelectPahtNamesOprihod(this.cnt, arrdata)\r\n            dom.setCallbackSelect(this.cnt, dom.clbSelPathName);\r\n        } else {\r\n            throw new Error(\"ERROR IN executeCallback<T>(holder) --> class FillSelectPathNames \")\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Ответ сервера после оприходования \r\n */\r\nexport class AnswerOprihod extends ClientData implements Clearable {\r\n     \r\n    constructor(idsel: string) {\r\n        super(idsel);         \r\n    }\r\n\r\n    async executeCallback<T>(holder: Holder<T>): Promise<void> {\r\n        const arrdata = holder.data.arrData as string[];\r\n        if (this.cnt) {\r\n            // this.clearContainer();\r\n            await dom.answerOprihod(this.cnt, arrdata);\r\n        } else {\r\n            throw new Error(\"ERROR IN executeCallback<T>(holder) --> class AnswerOprihod \")\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Наполняет html select \"Цвет\" \r\n */\r\nexport class FillSelectColor extends ClientData implements Clearable {\r\n     \r\n    constructor(idsel: string) {\r\n        super(idsel);         \r\n    }\r\n\r\n    async executeCallback<T>(holder: Holder<T>): Promise<void> {\r\n        const arrdata = holder.data.arrData as string[];\r\n        if (this.cnt) {\r\n            this.clearContainer();\r\n            await dom.fillSelectPahtNamesOprihod(this.cnt, arrdata, false);\r\n        } else {\r\n            throw new Error(\"ERROR IN executeCallback<T>(holder) --> class FillSelectColor \")\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Наполняет html select \"Название\" \r\n */\r\nexport class FillSelectName extends ClientData implements Clearable {\r\n     \r\n    constructor(idsel: string) {\r\n        super(idsel);         \r\n    }\r\n\r\n    async executeCallback<T>(holder: Holder<T>): Promise<void> {\r\n        const arrdata = holder.data.arrData as string[];\r\n        if (this.cnt) {\r\n            this.clearContainer();\r\n            await dom.fillSelectPahtNamesOprihod(this.cnt, arrdata, false);\r\n        } else {\r\n            throw new Error(\"ERROR IN executeCallback<T>(holder) --> class FillSelectName \")\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","\r\n/**\r\n * Имена name: <a name='xxx' href=\"...\" > \r\n * ссылок меню навигации (страниц)\r\n */\r\nexport enum EnumPageName {OPRIHOD='OPRIHOD', ALLPROD='ALL_PROD'};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./public/index.ts\");\n",""],"names":[],"sourceRoot":""}