/*! For license information please see appS.js.LICENSE.txt */
(()=>{var t={742:(t,e)=>{"use strict";e.byteLength=function(t){var e=a(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,i=a(t),s=i[0],c=i[1],u=new o(function(t,e,n){return 3*(e+n)/4-n}(0,s,c)),l=0,f=c>0?s-4:s;for(n=0;n<f;n+=4)e=r[t.charCodeAt(n)]<<18|r[t.charCodeAt(n+1)]<<12|r[t.charCodeAt(n+2)]<<6|r[t.charCodeAt(n+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;return 2===c&&(e=r[t.charCodeAt(n)]<<2|r[t.charCodeAt(n+1)]>>4,u[l++]=255&e),1===c&&(e=r[t.charCodeAt(n)]<<10|r[t.charCodeAt(n+1)]<<4|r[t.charCodeAt(n+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e),u},e.fromByteArray=function(t){for(var e,r=t.length,o=r%3,i=[],s=16383,a=0,u=r-o;a<u;a+=s)i.push(c(t,a,a+s>u?u:a+s));return 1===o?(e=t[r-1],i.push(n[e>>2]+n[e<<4&63]+"==")):2===o&&(e=(t[r-2]<<8)+t[r-1],i.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"=")),i.join("")};for(var n=[],r=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0;s<64;++s)n[s]=i[s],r[i.charCodeAt(s)]=s;function a(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t,e,r){for(var o,i,s=[],a=e;a<r;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},764:(t,e,n)=>{"use strict";const r=n(742),o=n(645),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.lW=c,e.h2=50;const s=2147483647;function a(t){if(t>s)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,c.prototype),e}function c(t,e,n){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return f(t)}return u(t,e,n)}function u(t,e,n){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!c.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const n=0|y(t,e);let r=a(n);const o=r.write(t,e);return o!==n&&(r=r.slice(0,o)),r}(t,e);if(ArrayBuffer.isView(t))return function(t){if(q(t,Uint8Array)){const e=new Uint8Array(t);return d(e.buffer,e.byteOffset,e.byteLength)}return h(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(q(t,ArrayBuffer)||t&&q(t.buffer,ArrayBuffer))return d(t,e,n);if("undefined"!=typeof SharedArrayBuffer&&(q(t,SharedArrayBuffer)||t&&q(t.buffer,SharedArrayBuffer)))return d(t,e,n);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=t.valueOf&&t.valueOf();if(null!=r&&r!==t)return c.from(r,e,n);const o=function(t){if(c.isBuffer(t)){const e=0|p(t.length),n=a(e);return 0===n.length||t.copy(n,0,0,e),n}return void 0!==t.length?"number"!=typeof t.length||Z(t.length)?a(0):h(t):"Buffer"===t.type&&Array.isArray(t.data)?h(t.data):void 0}(t);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return c.from(t[Symbol.toPrimitive]("string"),e,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function f(t){return l(t),a(t<0?0:0|p(t))}function h(t){const e=t.length<0?0:0|p(t.length),n=a(e);for(let r=0;r<e;r+=1)n[r]=255&t[r];return n}function d(t,e,n){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===e&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,e):new Uint8Array(t,e,n),Object.setPrototypeOf(r,c.prototype),r}function p(t){if(t>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|t}function y(t,e){if(c.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||q(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const n=t.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let o=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return W(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Y(t).length;default:if(o)return r?-1:W(t).length;e=(""+e).toLowerCase(),o=!0}}function m(t,e,n){let r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return R(this,e,n);case"utf8":case"utf-8":return x(this,e,n);case"ascii":return T(this,e,n);case"latin1":case"binary":return P(this,e,n);case"base64":return A(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function g(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function w(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Z(n=+n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=c.from(e,r)),c.isBuffer(e))return 0===e.length?-1:v(t,e,n,r,o);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):v(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function v(t,e,n,r,o){let i,s=1,a=t.length,c=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,c/=2,n/=2}function u(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){let r=-1;for(i=n;i<a;i++)if(u(t,i)===u(e,-1===r?0:i-r)){if(-1===r&&(r=i),i-r+1===c)return r*s}else-1!==r&&(i-=i-r),r=-1}else for(n+c>a&&(n=a-c),i=n;i>=0;i--){let n=!0;for(let r=0;r<c;r++)if(u(t,i+r)!==u(e,r)){n=!1;break}if(n)return i}return-1}function b(t,e,n,r){n=Number(n)||0;const o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;const i=e.length;let s;for(r>i/2&&(r=i/2),s=0;s<r;++s){const r=parseInt(e.substr(2*s,2),16);if(Z(r))return s;t[n+s]=r}return s}function E(t,e,n,r){return V(W(e,t.length-n),t,n,r)}function B(t,e,n,r){return V(function(t){const e=[];for(let n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function O(t,e,n,r){return V(Y(e),t,n,r)}function C(t,e,n,r){return V(function(t,e){let n,r,o;const i=[];for(let s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function A(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function x(t,e,n){n=Math.min(t.length,n);const r=[];let o=e;for(;o<n;){const e=t[o];let i=null,s=e>239?4:e>223?3:e>191?2:1;if(o+s<=n){let n,r,a,c;switch(s){case 1:e<128&&(i=e);break;case 2:n=t[o+1],128==(192&n)&&(c=(31&e)<<6|63&n,c>127&&(i=c));break;case 3:n=t[o+1],r=t[o+2],128==(192&n)&&128==(192&r)&&(c=(15&e)<<12|(63&n)<<6|63&r,c>2047&&(c<55296||c>57343)&&(i=c));break;case 4:n=t[o+1],r=t[o+2],a=t[o+3],128==(192&n)&&128==(192&r)&&128==(192&a)&&(c=(15&e)<<18|(63&n)<<12|(63&r)<<6|63&a,c>65535&&c<1114112&&(i=c))}}null===i?(i=65533,s=1):i>65535&&(i-=65536,r.push(i>>>10&1023|55296),i=56320|1023&i),r.push(i),o+=s}return function(t){const e=t.length;if(e<=I)return String.fromCharCode.apply(String,t);let n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=I));return n}(r)}c.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(t,e,n){return u(t,e,n)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(t,e,n){return function(t,e,n){return l(t),t<=0?a(t):void 0!==e?"string"==typeof n?a(t).fill(e,n):a(t).fill(e):a(t)}(t,e,n)},c.allocUnsafe=function(t){return f(t)},c.allocUnsafeSlow=function(t){return f(t)},c.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==c.prototype},c.compare=function(t,e){if(q(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),q(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let n=t.length,r=e.length;for(let o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);let n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;const r=c.allocUnsafe(e);let o=0;for(n=0;n<t.length;++n){let e=t[n];if(q(e,Uint8Array))o+e.length>r.length?(c.isBuffer(e)||(e=c.from(e)),e.copy(r,o)):Uint8Array.prototype.set.call(r,e,o);else{if(!c.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(r,o)}o+=e.length}return r},c.byteLength=y,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)g(this,e,e+1);return this},c.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},c.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},c.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?x(this,0,t):m.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){let t="";const n=e.h2;return t=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(t+=" ... "),"<Buffer "+t+">"},i&&(c.prototype[i]=c.prototype.inspect),c.prototype.compare=function(t,e,n,r,o){if(q(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;let i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0);const a=Math.min(i,s),u=this.slice(r,o),l=t.slice(e,n);for(let t=0;t<a;++t)if(u[t]!==l[t]){i=u[t],s=l[t];break}return i<s?-1:s<i?1:0},c.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},c.prototype.indexOf=function(t,e,n){return w(this,t,e,n,!0)},c.prototype.lastIndexOf=function(t,e,n){return w(this,t,e,n,!1)},c.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let i=!1;for(;;)switch(r){case"hex":return b(this,t,e,n);case"utf8":case"utf-8":return E(this,t,e,n);case"ascii":case"latin1":case"binary":return B(this,t,e,n);case"base64":return O(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const I=4096;function T(t,e,n){let r="";n=Math.min(t.length,n);for(let o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function P(t,e,n){let r="";n=Math.min(t.length,n);for(let o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function R(t,e,n){const r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);let o="";for(let r=e;r<n;++r)o+=K[t[r]];return o}function S(t,e,n){const r=t.slice(e,n);let o="";for(let t=0;t<r.length-1;t+=2)o+=String.fromCharCode(r[t]+256*r[t+1]);return o}function _(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function k(t,e,n,r,o,i){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function N(t,e,n,r,o){H(e,r,o,t,n,7);let i=Number(e&BigInt(4294967295));t[n++]=i,i>>=8,t[n++]=i,i>>=8,t[n++]=i,i>>=8,t[n++]=i;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[n++]=s,s>>=8,t[n++]=s,s>>=8,t[n++]=s,s>>=8,t[n++]=s,n}function L(t,e,n,r,o){H(e,r,o,t,n,7);let i=Number(e&BigInt(4294967295));t[n+7]=i,i>>=8,t[n+6]=i,i>>=8,t[n+5]=i,i>>=8,t[n+4]=i;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[n+3]=s,s>>=8,t[n+2]=s,s>>=8,t[n+1]=s,s>>=8,t[n]=s,n+8}function U(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function F(t,e,n,r,i){return e=+e,n>>>=0,i||U(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function D(t,e,n,r,i){return e=+e,n>>>=0,i||U(t,0,n,8),o.write(t,e,n,r,52,8),n+8}c.prototype.slice=function(t,e){const n=this.length;(t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t);const r=this.subarray(t,e);return Object.setPrototypeOf(r,c.prototype),r},c.prototype.readUintLE=c.prototype.readUIntLE=function(t,e,n){t>>>=0,e>>>=0,n||_(t,e,this.length);let r=this[t],o=1,i=0;for(;++i<e&&(o*=256);)r+=this[t+i]*o;return r},c.prototype.readUintBE=c.prototype.readUIntBE=function(t,e,n){t>>>=0,e>>>=0,n||_(t,e,this.length);let r=this[t+--e],o=1;for(;e>0&&(o*=256);)r+=this[t+--e]*o;return r},c.prototype.readUint8=c.prototype.readUInt8=function(t,e){return t>>>=0,e||_(t,1,this.length),this[t]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(t,e){return t>>>=0,e||_(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(t,e){return t>>>=0,e||_(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(t,e){return t>>>=0,e||_(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(t,e){return t>>>=0,e||_(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readBigUInt64LE=Q((function(t){G(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||z(t,this.length-8);const r=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,o=this[++t]+256*this[++t]+65536*this[++t]+n*2**24;return BigInt(r)+(BigInt(o)<<BigInt(32))})),c.prototype.readBigUInt64BE=Q((function(t){G(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||z(t,this.length-8);const r=e*2**24+65536*this[++t]+256*this[++t]+this[++t],o=this[++t]*2**24+65536*this[++t]+256*this[++t]+n;return(BigInt(r)<<BigInt(32))+BigInt(o)})),c.prototype.readIntLE=function(t,e,n){t>>>=0,e>>>=0,n||_(t,e,this.length);let r=this[t],o=1,i=0;for(;++i<e&&(o*=256);)r+=this[t+i]*o;return o*=128,r>=o&&(r-=Math.pow(2,8*e)),r},c.prototype.readIntBE=function(t,e,n){t>>>=0,e>>>=0,n||_(t,e,this.length);let r=e,o=1,i=this[t+--r];for(;r>0&&(o*=256);)i+=this[t+--r]*o;return o*=128,i>=o&&(i-=Math.pow(2,8*e)),i},c.prototype.readInt8=function(t,e){return t>>>=0,e||_(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){t>>>=0,e||_(t,2,this.length);const n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(t,e){t>>>=0,e||_(t,2,this.length);const n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(t,e){return t>>>=0,e||_(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return t>>>=0,e||_(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readBigInt64LE=Q((function(t){G(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||z(t,this.length-8);const r=this[t+4]+256*this[t+5]+65536*this[t+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),c.prototype.readBigInt64BE=Q((function(t){G(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||z(t,this.length-8);const r=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(r)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+n)})),c.prototype.readFloatLE=function(t,e){return t>>>=0,e||_(t,4,this.length),o.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return t>>>=0,e||_(t,4,this.length),o.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return t>>>=0,e||_(t,8,this.length),o.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return t>>>=0,e||_(t,8,this.length),o.read(this,t,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(t,e,n,r){t=+t,e>>>=0,n>>>=0,r||k(this,t,e,n,Math.pow(2,8*n)-1,0);let o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(t,e,n,r){t=+t,e>>>=0,n>>>=0,r||k(this,t,e,n,Math.pow(2,8*n)-1,0);let o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},c.prototype.writeUint8=c.prototype.writeUInt8=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,1,255,0),this[e]=255&t,e+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigUInt64LE=Q((function(t,e=0){return N(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=Q((function(t,e=0){return L(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*n-1);k(this,t,e,n,r-1,-r)}let o=0,i=1,s=0;for(this[e]=255&t;++o<n&&(i*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/i>>0)-s&255;return e+n},c.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*n-1);k(this,t,e,n,r-1,-r)}let o=n-1,i=1,s=0;for(this[e+o]=255&t;--o>=0&&(i*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/i>>0)-s&255;return e+n},c.prototype.writeInt8=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeInt16BE=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeInt32LE=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},c.prototype.writeInt32BE=function(t,e,n){return t=+t,e>>>=0,n||k(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigInt64LE=Q((function(t,e=0){return N(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=Q((function(t,e=0){return L(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(t,e,n){return F(this,t,e,!0,n)},c.prototype.writeFloatBE=function(t,e,n){return F(this,t,e,!1,n)},c.prototype.writeDoubleLE=function(t,e,n){return D(this,t,e,!0,n)},c.prototype.writeDoubleBE=function(t,e,n){return D(this,t,e,!1,n)},c.prototype.copy=function(t,e,n,r){if(!c.isBuffer(t))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);const o=r-n;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,n,r):Uint8Array.prototype.set.call(t,this.subarray(n,r),e),o},c.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===t.length){const e=t.charCodeAt(0);("utf8"===r&&e<128||"latin1"===r)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;let o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{const i=c.isBuffer(t)?t:c.from(t,r),s=i.length;if(0===s)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(o=0;o<n-e;++o)this[o+e]=i[o%s]}return this};const M={};function j(t,e,n){M[t]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function $(t){let e="",n=t.length;const r="-"===t[0]?1:0;for(;n>=r+4;n-=3)e=`_${t.slice(n-3,n)}${e}`;return`${t.slice(0,n)}${e}`}function H(t,e,n,r,o,i){if(t>n||t<e){const r="bigint"==typeof e?"n":"";let o;throw o=i>3?0===e||e===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(i+1)}${r}`:`>= -(2${r} ** ${8*(i+1)-1}${r}) and < 2 ** ${8*(i+1)-1}${r}`:`>= ${e}${r} and <= ${n}${r}`,new M.ERR_OUT_OF_RANGE("value",o,t)}!function(t,e,n){G(e,"offset"),void 0!==t[e]&&void 0!==t[e+n]||z(e,t.length-(n+1))}(r,o,i)}function G(t,e){if("number"!=typeof t)throw new M.ERR_INVALID_ARG_TYPE(e,"number",t)}function z(t,e,n){if(Math.floor(t)!==t)throw G(t,n),new M.ERR_OUT_OF_RANGE(n||"offset","an integer",t);if(e<0)throw new M.ERR_BUFFER_OUT_OF_BOUNDS;throw new M.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${e}`,t)}j("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),j("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),j("ERR_OUT_OF_RANGE",(function(t,e,n){let r=`The value of "${t}" is out of range.`,o=n;return Number.isInteger(n)&&Math.abs(n)>2**32?o=$(String(n)):"bigint"==typeof n&&(o=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(o=$(o)),o+="n"),r+=` It must be ${e}. Received ${o}`,r}),RangeError);const J=/[^+/0-9A-Za-z-_]/g;function W(t,e){let n;e=e||1/0;const r=t.length;let o=null;const i=[];for(let s=0;s<r;++s){if(n=t.charCodeAt(s),n>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function Y(t){return r.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(J,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,e,n,r){let o;for(o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}function q(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function Z(t){return t!=t}const K=function(){const t="0123456789abcdef",e=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let o=0;o<16;++o)e[r+o]=t[n]+t[o]}return e}();function Q(t){return"undefined"==typeof BigInt?X:t}function X(){throw new Error("BigInt not supported")}},645:(t,e)=>{e.read=function(t,e,n,r,o){var i,s,a=8*o-r-1,c=(1<<a)-1,u=c>>1,l=-7,f=n?o-1:0,h=n?-1:1,d=t[e+f];for(f+=h,i=d&(1<<-l)-1,d>>=-l,l+=a;l>0;i=256*i+t[e+f],f+=h,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+t[e+f],f+=h,l-=8);if(0===i)i=1-u;else{if(i===c)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),i-=u}return(d?-1:1)*s*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var s,a,c,u=8*i-o-1,l=(1<<u)-1,f=l>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,p=r?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+f>=1?h/c:h*Math.pow(2,1-f))*c>=2&&(s++,c/=2),s+f>=l?(a=0,s=l):s+f>=1?(a=(e*c-1)*Math.pow(2,o),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,o),s=0));o>=8;t[n+d]=255&a,d+=p,a/=256,o-=8);for(s=s<<o|a,u+=o;u>0;t[n+d]=255&s,d+=p,s/=256,u-=8);t[n+d-p]|=128*y}},112:function(t,e,n){"use strict";var r=n(764).lW,o=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.clientTableOptihod=void 0;const i=n(541),s=n(806),a=n(38),c=n(235),u=n(970),l=n(278),f=n(243),h=n(815),d=n(702),p=document.getElementById("currenttime");setInterval((()=>{p&&(p.textContent="Таблица оприходования "+(new Date).toLocaleString("ru-RU",{timeZone:"Europe/Moscow"}))}),1e3),(()=>{const t=document.getElementById("sel-count");t&&t.addEventListener("keyup",(function(){const t=this;if(t.value.length>17){const e=[...t.value].slice(0,16);t.value=e.join("")}}))})();const y=document.getElementById("li-menu-allprod"),m=document.getElementById("li-menu-oprihod"),g=document.getElementById("input-product");null==g||g.addEventListener("click",l.dom.clbSendFormOprihod);const w=new h.FillSelectPathNames("sel-pathName");e.clientTableOptihod=new h.AllDataTableOprihod("contain-table-oprihod"),f.invoker.setCommandOprihod(new u.Oprihod(i.appcn));const v=new h.AnswerOprihod("oprihodinfo"),b=new s.ResultHolder(v),E=document.getElementById("input-oprihod");null==E||E.addEventListener("click",(()=>o(void 0,void 0,void 0,(function*(){l.dom.loadImage(!0,"loadoprihod"),l.dom.textMessage("oprihodinfo","оприходование в МойСклад...");const t=document.getElementById("issendsklad").checked,e=yield f.invoker.sendOprihod({who:"admin",role:"admin",isSendSklad:t}),n=new s.Holder("answerOprihod",e);b.execute(n),l.dom.loadImage(!1,"loadoprihod"),l.dom.textMessage("oprihodinfo")}))));const B=()=>o(void 0,void 0,void 0,(function*(){f.invoker.setAllProductsFolder(new c.GetAllProductFolder(i.appcn)),l.dom.loadImage(!0,"loadoprcats"),l.dom.textMessage("oprinfocats","Загрузка данных в списки...");const t=yield f.invoker.getAllProdFolder("allProdFolder"),n=new s.ResultHolder(w),r=new s.Holder("sel-pathName",t);yield n.execute(r),l.dom.loadImage(!1,"loadoprcats"),l.dom.textMessage("oprinfocats"),f.invoker.setGetAllDataTableOprihod(new a.GetAllFromTableOprihod(i.appcn));const o=yield f.invoker.getAllDataTableOprihod(),u=new s.ResultHolder(e.clientTableOptihod),h=new s.Holder("holderFirstStart",o);u.execute(h)}));if(m&&y)for(let t of[m,y])t.addEventListener("click",(t=>o(void 0,void 0,void 0,(function*(){switch(t.target.name){case d.EnumPageName.OPRIHOD:yield B();break;case d.EnumPageName.ALLPROD:{const t=new h.TableProducts("table-container");if(!t||!t.cnt)break;yield l.dom.createListCats("div-categories",t,f.invoker)}}}))));B();const O=document.getElementById("input-downloadfile");window.Telegram.WebApp.ready(),O.addEventListener("click",(t=>o(void 0,void 0,void 0,(function*(){try{if(t.preventDefault(),yield i.appcn.getExcelFile()){const t=i.appcn.getLinkDownloadExcell();window.Telegram.WebApp.openLink(t)}}catch(t){console.log("error download file",t)}}))));const C=document.getElementById("refresh-token");null==C||C.addEventListener("click",(t=>o(void 0,void 0,void 0,(function*(){t.preventDefault();const e=t.target.form,n=e["sklad-login"].value,o=e["sklad-password"].value,s={credential:r.from(n+":"+o).toString("base64"),errors:[]},a=yield i.appcn.sendRefreshToken(s),c=document.getElementById("resultreftoken");a.errors.length>0?(c.setAttribute("style","color: red; font-size: 0.8em;"),c.textContent=a.errors[0]):(c.setAttribute("style","color: green; font-size: 0.8em;"),c.textContent="токен: "+a.credential)}))));const A=document.getElementById("rewrite-db"),x=document.getElementById("info-rewriteDb");null==A||A.addEventListener("click",(t=>o(void 0,void 0,void 0,(function*(){t.preventDefault(),x.textContent="",l.dom.loadImage(!0,"loadstaterewrite"),l.dom.textMessage("errinforewrite","Перезапись данных в таблицу бд... Это может занять время.");const e=yield i.appcn.rewriteProductsTable();l.dom.loadImage(!1,"loadstaterewrite"),l.dom.textMessage("errinforewrite"),"ok"===e.result?(x.setAttribute("style","font-size: 0.9em; color: green;"),x.textContent="Готово."):(x.setAttribute("style","font-size: 0.8em; color: red;"),x.textContent="Ошибка")}))))},541:function(t,e){"use strict";var n=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.appcn=e.AppConnect=e.HOST=void 0,e.HOST="https://kitopt24.site/";class r{constructor(t){this.host=e.HOST,this.host=t}getLinkDownloadExcell(){return this.host+"getOprihodsExcel"}getProdFolders(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+t,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({})});return yield e.json()}))}getExcelFile(){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(this.host+"getOprihodsExcel",{method:"GET"});return yield t.blob()}catch(t){console.log("error AppConnect -> getExcelFile()")}return null}))}getProductByCats(t,e){return n(this,void 0,void 0,(function*(){const n={URISklad:e},r=yield fetch(this.host+t,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(n)});return yield r.json()}))}getRespSendFormDataOprihod(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"formOprihod",{method:"POST",body:t});return yield e.json()}))}rewriteProductsTable(){return n(this,void 0,void 0,(function*(){const t=yield fetch(this.host+"writeFromMyskladToDb",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({})});return yield t.json()}))}sendRefreshToken(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"refreshTokenSklad",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)});return yield e.json()}))}doOprihod(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"doOprihod",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)});return yield e.json()}))}getTableOprihod(){return n(this,void 0,void 0,(function*(){const t=yield fetch(this.host+"getTableOprihod",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({})});return yield t.json()}))}deleteRow(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"deleteRow",{method:"post",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({delId:t})});return yield e.json()}))}getAttributesNameColorsByPathName(t){return n(this,void 0,void 0,(function*(){const e={pathName:t},n=yield fetch(this.host+"getAttrsByPath",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(e)});return yield n.json()}))}sendTelegramData(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"fromTelegram",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)});return yield e.json()}))}}e.AppConnect=r,e.appcn=new r(e.HOST)},806:function(t,e){"use strict";var n=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.ResultHolder=e.Holder=void 0,e.Holder=class{constructor(t,e){this.name=t,this.hold=[],this.data=e}set data(t){Array.isArray(t)&&(this.hold.length=0,this.hold=[...t])}get data(){return this.hold?{name:this.name,arrData:this.hold}:{name:"",arrData:[]}}},e.ResultHolder=class{constructor(t){this.client=t}execute(t){return n(this,void 0,void 0,(function*(){this.client&&(yield this.client.executeCallback(t))}))}}},882:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BaseCommand=void 0,e.BaseCommand=class{constructor(t){this.reciever=t,this.respExecute=null}getResponse(){return this.respExecute}}},841:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CmdDeleteRowTableOprihod=void 0;const o=n(882);class i extends o.BaseCommand{constructor(t){super(t)}execute(t){return r(this,void 0,void 0,(function*(){return this.respExecute=yield this.reciever.deleteRow(t),this.getResponse()}))}}e.CmdDeleteRowTableOprihod=i},137:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CmdSendFormOprihod=void 0;const o=n(882);class i extends o.BaseCommand{constructor(t){super(t)}execute(t){return r(this,void 0,void 0,(function*(){return this.respExecute=yield this.reciever.getRespSendFormDataOprihod(t),this.getResponse()}))}}e.CmdSendFormOprihod=i},38:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.GetAllFromTableOprihod=void 0;const o=n(882);class i extends o.BaseCommand{constructor(t){super(t)}execute(){return r(this,void 0,void 0,(function*(){return this.respExecute=yield this.reciever.getTableOprihod(),this.getResponse()}))}}e.GetAllFromTableOprihod=i},30:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.GetAllProdsByPathName=void 0;const o=n(882);class i extends o.BaseCommand{constructor(t){super(t)}execute(t,e){return r(this,void 0,void 0,(function*(){return this.respExecute=yield this.reciever.getProductByCats(t,e),this.getResponse()}))}}e.GetAllProdsByPathName=i},235:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.GetAllProductFolder=void 0;const o=n(882);class i extends o.BaseCommand{constructor(t){super(t)}execute(t){return r(this,void 0,void 0,(function*(){return yield this.reciever.getProdFolders(t)}))}}e.GetAllProductFolder=i},374:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.GetAttributesByPathName=void 0;const o=n(882);class i extends o.BaseCommand{constructor(t){super(t)}execute(t){return r(this,void 0,void 0,(function*(){return this.respExecute=yield this.reciever.getAttributesNameColorsByPathName(t),this.getResponse()}))}}e.GetAttributesByPathName=i},970:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.Oprihod=void 0;const o=n(882);class i extends o.BaseCommand{constructor(t){super(t)}execute(t){return r(this,void 0,void 0,(function*(){return this.respExecute=yield this.reciever.doOprihod(t),this.getResponse()}))}}e.Oprihod=i},278:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.dom=void 0;const o=n(30),i=n(243),s=n(541),a=n(235),c=n(806),u=n(815),l=n(374),f=n(137),h=n(112),d=n(841);e.dom=(()=>{const t=new f.CmdSendFormOprihod(s.appcn),e=new l.GetAttributesByPathName(s.appcn),n=new d.CmdDeleteRowTableOprihod(s.appcn);function p(t,e=""){document.getElementById(t).textContent=e}function y(t,e){const n=document.getElementById(e);t?(null==n||n.classList.remove("noloadstate"),null==n||n.classList.add("loadstate")):(null==n||n.classList.remove("loadstate"),null==n||n.classList.add("noloadstate"))}return{createListCats:function(t,e,n){return r(this,void 0,void 0,(function*(){const i="getProductByCats",u=document.getElementById(t);n.setGetProdByCats(new o.GetAllProdsByPathName(s.appcn)),n.setAllProductsFolder(new a.GetAllProductFolder(s.appcn));const l=yield n.getAllProdFolder("allProdFolder"),f=new c.ResultHolder(e);l.forEach((t=>{const e=document.createElement("A");e.classList.add("list-group-item","list-group-item-action","list-group-item-success"),e.href=i,e.textContent=t,e.addEventListener("click",(t=>r(this,void 0,void 0,(function*(){if("A"===t.target.nodeName){t.preventDefault();const e=t.target.textContent,r=yield n.сallbackGetProdByCats(i,e),o=new c.Holder(e,r);yield f.execute(o)}})))),u.appendChild(e)}))}))},createContainer:function(t){return document.getElementById(t)||null},makeTable:function(t){return r(this,void 0,void 0,(function*(){const e=document.createElement("table");e.classList.add("table","table-striped","table-sm","custom-style-table");const n=document.createElement("thead");n.classList.add("thead-light");const r=document.createElement("tr");["№","название","цвет","артикль","код","категория"].forEach((t=>{const e=document.createElement("th");e.textContent=t,r.appendChild(e)})),n.appendChild(r),e.appendChild(n);const o=document.createElement("tbody");return t.forEach(((t,e)=>{const n=t,r=document.createElement("tr");for(let t of[""+(e+1),n.name||"",n.color||"",n.article||"",n.code||"",n.pathName||""]){const e=document.createElement("td");e.textContent=t,r.appendChild(e)}o.appendChild(r)})),e.appendChild(o),e}))},fillSelectPahtNamesOprihod:function(t,e,n=!0){return r(this,void 0,void 0,(function*(){const r=[...e];n&&r.unshift("---"),r.forEach(((e,n)=>{const r=document.createElement("option");r.setAttribute("id",`${t.id}_${n}`),r.setAttribute("value",e);const o=e.split("/"),i=o.slice(o.length-1,o.length).join("/");r.textContent=i,null==t||t.appendChild(r)}))}))},setCallbackSelect:function(t,e){t.addEventListener("change",e)},delCallbackSelect:function(t,e){t.removeEventListener("change",e)},clbSelPathName:function(t){return r(this,void 0,void 0,(function*(){const n=t.target.childNodes;i.invoker.setGetAttrsColorName(e);for(let t of n)if(t instanceof HTMLOptionElement&&t.selected){const e=new u.FillSelectColor("sel-color"),n=new u.FillSelectName("sel-name"),r=yield i.invoker.getAttrsColorName(t.value),o=new c.ResultHolder(e),s=new c.ResultHolder(n),a=new c.Holder(r.pathName,r.colors),l=new c.Holder(r.pathName,r.names);yield o.execute(a),yield s.execute(l);break}}))},clbSendFormOprihod:function(e){return r(this,void 0,void 0,(function*(){e.preventDefault();const n=e.target.form,r=["sellist-pathName","sellist-name","sellist-article","sellist-color","sellist-count","sellist-photo"],o=new FormData;let s=0;for(let t of n){if(s>5)break;const e=r[s].split("-")[1];if(t instanceof HTMLSelectElement){const n=t.childNodes;let r="";for(let t of n)if(t instanceof HTMLOptionElement&&t.selected){r=t.value;break}o.append(e,r)}else if(t instanceof HTMLInputElement)if("file"===t.type){const e=t.files;if(e)for(let t of e)o.append("file",t)}else{const n=t.value;o.append(e,n)}s+=1}const a=(new Date).toLocaleString("ru-RU",{timeZone:"Europe/Moscow"}).split(",");o.append("date",a[0].trim()),o.append("time",a[1].trim()),y(!0,"loadstate"),p("errinfo","Отправка данных..."),i.invoker.setSendFormOprihod(t);const u=yield i.invoker.sendDataFormOprihod(o);if(Array.isArray(u)&&1===u.length&&u[0].errors){const t=u[0].errors.map((t=>t.message)).join("; ");y(!1,"loadstate"),p("errinfo",t)}else{y(!1,"loadstate"),p("errinfo");const t=new c.ResultHolder(h.clientTableOptihod),e=new c.Holder("holderFirstStart",u);yield t.execute(e)}document.getElementById("sel-photo").value=""}))},loadImage:y,textMessage:p,makeOprihodTable:function(t){return r(this,void 0,void 0,(function*(){const e=document.createElement("table");e.classList.add("table","table-striped","table-bordered","table-sm","custom-style-table");const o=document.createElement("thead");o.classList.add("thead-light");const s=document.createElement("tr");["id","название","цвет","артикул","кол-во","из категории","дата","время",""].forEach((t=>{const e=document.createElement("th");e.textContent=t,s.appendChild(e)})),o.appendChild(s),e.appendChild(o);const a=t=>{try{const e=t.split("/"),n=e.length;return"../"+e.slice(n-1,n).join("/")}catch(t){}return""},u=document.createElement("tbody");return t.forEach((t=>{const e=t,o=document.createElement("tr");o.addEventListener("click",(t=>r(this,void 0,void 0,(function*(){const e=t.target;if(e instanceof HTMLAnchorElement){const t=e.id.split("_")[1];i.invoker.setCmdDeleteRow(n);const r=yield i.invoker.sendDeleteRowById(t),o=new c.Holder("delH"+t,r),s=new c.ResultHolder(h.clientTableOptihod);yield s.execute(o)}}))));for(let t of[e.products_id,e.name||"",e.color||"",e.article||"",e.count||"",a(e.pathName),e.date||"",e.time||""]){const e=document.createElement("td");e.textContent=""+t,o.appendChild(e)}const s=document.createElement("A");s.setAttribute("id",`delrow_${e.id}`),s.classList.add("list-group-item","list-group-item-action","list-group-item-danger"),s.textContent="удалить",o.appendChild(s),u.appendChild(o)})),e.appendChild(u),e}))},answerOprihod:function(t,e){return r(this,void 0,void 0,(function*(){console.log("dom.answerOprihod():\n",e)}))}}})()},243:function(t,e){"use strict";var n=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.invoker=e.Invoker=void 0;class r{constructor(){this.allProductsFolder=null,this.productByCats=null,this.colorNameByCategory=null,this.sendFormOprihod=null,this.getDataTableOprihod=null,this.deleteRowFromTable=null,this.oprihod=null}setSendFormOprihod(t){this.sendFormOprihod||(this.sendFormOprihod=t)}sendDataFormOprihod(t){return n(this,void 0,void 0,(function*(){return(this.sendFormOprihod?yield this.sendFormOprihod.execute(t):null)||[]}))}setCommandOprihod(t){t&&(this.oprihod=t)}sendOprihod(t){return n(this,void 0,void 0,(function*(){return(this.oprihod?yield this.oprihod.execute(t):null)||[]}))}setCmdDeleteRow(t){t&&(this.deleteRowFromTable=t)}sendDeleteRowById(t){return n(this,void 0,void 0,(function*(){return(this.deleteRowFromTable?yield this.deleteRowFromTable.execute(t):null)||[]}))}setGetAllDataTableOprihod(t){t&&(this.getDataTableOprihod=t)}getAllDataTableOprihod(){return n(this,void 0,void 0,(function*(){return(this.getDataTableOprihod?yield this.getDataTableOprihod.execute():null)||[]}))}setGetAttrsColorName(t){this.colorNameByCategory=t}getAttrsColorName(t){return n(this,void 0,void 0,(function*(){let e={pathName:t,names:[""],colors:[""]};if(this.colorNameByCategory){const e=yield this.colorNameByCategory.execute(t);if(Array.isArray(e)&&e.length>0)return e[0]}return e}))}setGetProdByCats(t){this.productByCats||(this.productByCats=t)}сallbackGetProdByCats(t,e){return n(this,void 0,void 0,(function*(){return(this.productByCats?yield this.productByCats.execute(t,e):null)||[]}))}setAllProductsFolder(t){this.allProductsFolder||(this.allProductsFolder=t)}getAllProdFolder(t){return n(this,void 0,void 0,(function*(){return this.allProductsFolder?yield this.allProductsFolder.execute(t):[]}))}}e.Invoker=r,e.invoker=new r},815:function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.FillSelectName=e.FillSelectColor=e.AnswerOprihod=e.FillSelectPathNames=e.AllDataTableOprihod=e.TableProducts=e.ClientData=void 0;const o=n(278);class i{constructor(t){this.cnt=null;const e=o.dom.createContainer(t);this.cnt=e||null}fillContainer(t){this.cnt&&this.cnt.appendChild(t)}clearContainer(){if(this.cnt)for(let t of Array.from(this.cnt.children))this.cnt.removeChild(t)}}e.ClientData=i,e.TableProducts=class extends i{constructor(t){super(t)}executeCallback(t){return r(this,void 0,void 0,(function*(){const e=t.data.arrData,n=yield o.dom.makeTable(e);this.clearContainer(),this.fillContainer(n),document.getElementById("id-label-table-list-from").textContent=t.name+` [всего: ${e.length}]`}))}},e.AllDataTableOprihod=class extends i{constructor(t){super(t)}executeCallback(t){return r(this,void 0,void 0,(function*(){const e=t.data.arrData,n=yield o.dom.makeOprihodTable(e);this.clearContainer(),this.fillContainer(n)}))}},e.FillSelectPathNames=class extends i{constructor(t){super(t)}executeCallback(t){return r(this,void 0,void 0,(function*(){const e=t.data.arrData;if(!this.cnt)throw new Error("ERROR IN executeCallback<T>(holder) --\x3e class FillSelectPathNames ");o.dom.delCallbackSelect(this.cnt,o.dom.clbSelPathName),this.clearContainer(),yield o.dom.fillSelectPahtNamesOprihod(this.cnt,e),o.dom.setCallbackSelect(this.cnt,o.dom.clbSelPathName)}))}},e.AnswerOprihod=class extends i{constructor(t){super(t)}executeCallback(t){return r(this,void 0,void 0,(function*(){const e=t.data.arrData;if(!this.cnt)throw new Error("ERROR IN executeCallback<T>(holder) --\x3e class AnswerOprihod ");yield o.dom.answerOprihod(this.cnt,e)}))}},e.FillSelectColor=class extends i{constructor(t){super(t)}executeCallback(t){return r(this,void 0,void 0,(function*(){const e=t.data.arrData;if(!this.cnt)throw new Error("ERROR IN executeCallback<T>(holder) --\x3e class FillSelectColor ");this.clearContainer(),yield o.dom.fillSelectPahtNamesOprihod(this.cnt,e,!1)}))}},e.FillSelectName=class extends i{constructor(t){super(t)}executeCallback(t){return r(this,void 0,void 0,(function*(){const e=t.data.arrData;if(!this.cnt)throw new Error("ERROR IN executeCallback<T>(holder) --\x3e class FillSelectName ");this.clearContainer(),yield o.dom.fillSelectPahtNamesOprihod(this.cnt,e,!1)}))}}},702:(t,e)=>{"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.EnumPageName=void 0,function(t){t.OPRIHOD="OPRIHOD",t.ALLPROD="ALL_PROD"}(n||(e.EnumPageName=n={}))}},e={};!function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}(112)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBWXFSLEdBQ1JwUixNQUFNb1IsRUFDVixDQUVNLGVBQUFySCxDQUFtQnZFLDRDQUNyQixNQUFNeUssRUFBVXpLLEVBQU94UyxLQUFLNlcsUUFDNUIsSUFBSS9WLEtBQUtzUyxJQUlMLE1BQU0sSUFBSXZXLE1BQU0sb0VBSGhCaUUsS0FBS2lkLHVCQUNDLEVBQUF0TixJQUFJNEksMkJBQTJCdlksS0FBS3NTLElBQUs2SixHQUFTLEVBSWhFLGdDQ25LSixJQUFZaksseUVBQVosU0FBWUEsR0FBYyxvQkFBbUIsb0JBQW1CLENBQWhFLENBQVlBLElBQVksZUFBWkEsRUFBWSxPQ0pwQnFMLEVBQTJCLENBQUMsR0FHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQjNlLElBQWpCNGUsRUFDSCxPQUFPQSxFQUFhMWpCLFFBR3JCLElBQUkyakIsRUFBU0osRUFBeUJFLEdBQVksQ0FHakR6akIsUUFBUyxDQUFDLEdBT1gsT0FIQTRqQixFQUFvQkgsR0FBVTNjLEtBQUs2YyxFQUFPM2pCLFFBQVMyakIsRUFBUUEsRUFBTzNqQixRQUFTd2pCLEdBR3BFRyxFQUFPM2pCLE9BQ2YsQ0NuQjBCd2pCLENBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9yZWdvci8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZm9yZWdvci8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZm9yZWdvci8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL2ZvcmVnb3IvLi9wdWJsaWMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZm9yZWdvci8uL3B1YmxpYy9zcmMvQXBwQ29ubmVjdC50cyIsIndlYnBhY2s6Ly9mb3JlZ29yLy4vcHVibGljL3NyYy9SZXN1bHRIb2xkZXIudHMvUmVzdWx0SG9sZGVyLnRzIiwid2VicGFjazovL2ZvcmVnb3IvLi9wdWJsaWMvc3JjL2NvbmNyZXRlQ29tbWFuZHMvQmFzZUNvbW1hbmQudHMiLCJ3ZWJwYWNrOi8vZm9yZWdvci8uL3B1YmxpYy9zcmMvY29uY3JldGVDb21tYW5kcy9DbWREZWxldGVSb3dUYWJsZU9wcmlob2QudHMiLCJ3ZWJwYWNrOi8vZm9yZWdvci8uL3B1YmxpYy9zcmMvY29uY3JldGVDb21tYW5kcy9DbWRTZW5kRm9ybU9wcmlob2QudHMiLCJ3ZWJwYWNrOi8vZm9yZWdvci8uL3B1YmxpYy9zcmMvY29uY3JldGVDb21tYW5kcy9HZXRBbGxGcm9tVGFibGVPcHJpaG9kLnRzIiwid2VicGFjazovL2ZvcmVnb3IvLi9wdWJsaWMvc3JjL2NvbmNyZXRlQ29tbWFuZHMvR2V0QWxsUHJvZHNCeVBhdGhOYW1lLnRzIiwid2VicGFjazovL2ZvcmVnb3IvLi9wdWJsaWMvc3JjL2NvbmNyZXRlQ29tbWFuZHMvR2V0QWxsUHJvZHVjdEZvbGRlci50cyIsIndlYnBhY2s6Ly9mb3JlZ29yLy4vcHVibGljL3NyYy9jb25jcmV0ZUNvbW1hbmRzL0dldEF0dHJpYnV0ZXNCeVBhdGhOYW1lLnRzIiwid2VicGFjazovL2ZvcmVnb3IvLi9wdWJsaWMvc3JjL2NvbmNyZXRlQ29tbWFuZHMvT3ByaWhvZC50cyIsIndlYnBhY2s6Ly9mb3JlZ29yLy4vcHVibGljL3NyYy9kb20udHMiLCJ3ZWJwYWNrOi8vZm9yZWdvci8uL3B1YmxpYy9zcmMvaW52b2tlL0ludm9rZXIudHMiLCJ3ZWJwYWNrOi8vZm9yZWdvci8uL3B1YmxpYy9zcmMvcGFnZS9jbGllbnRzLnRzIiwid2VicGFjazovL2ZvcmVnb3IvLi9wdWJsaWMvc3JjL3R5cGVzL0VudW1QYWdlTmFtZS50cyIsIndlYnBhY2s6Ly9mb3JlZ29yL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2ZvcmVnb3Ivd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbmNvbnN0IGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbmNvbnN0IGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG5jb25zdCBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGNvbnN0IHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICBsZXQgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICBjb25zdCBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgY29uc3QgY29weSA9IG5ldyBVaW50OEFycmF5KGFycmF5VmlldylcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGNvcHkuYnVmZmVyLCBjb3B5LmJ5dGVPZmZzZXQsIGNvcHkuYnl0ZUxlbmd0aClcbiAgfVxuICByZXR1cm4gZnJvbUFycmF5TGlrZShhcnJheVZpZXcpXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBsZXQgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIGNvbnN0IGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIGxldCB4ID0gYS5sZW5ndGhcbiAgbGV0IHkgPSBiLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICBsZXQgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIGxldCBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHBvcyArIGJ1Zi5sZW5ndGggPiBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcbiAgICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgY29uc3QgbXVzdE1hdGNoID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZSlcbiAgaWYgKCFtdXN0TWF0Y2ggJiYgbGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJjaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgY29uc3QgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgbGV0IHN0ciA9ICcnXG4gIGNvbnN0IG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgJyQxICcpLnRyaW0oKVxuICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5pZiAoY3VzdG9tSW5zcGVjdFN5bWJvbCkge1xuICBCdWZmZXIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKVxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdGFyZ2V0KVxuICAgIClcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIGxldCB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICBsZXQgeSA9IGVuZCAtIHN0YXJ0XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgY29uc3QgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgY29uc3QgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgW3ZhbF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIGxldCBpbmRleFNpemUgPSAxXG4gIGxldCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIGxldCB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIGxldCBpXG4gIGlmIChkaXIpIHtcbiAgICBsZXQgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIGNvbnN0IHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgY29uc3QgcmVzID0gW11cblxuICBsZXQgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgbGV0IGNvZGVQb2ludCA9IG51bGxcbiAgICBsZXQgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIGxldCBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbmNvbnN0IE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICBjb25zdCBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICBsZXQgb3V0ID0gJydcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICBsZXQgcmVzID0gJydcbiAgLy8gSWYgYnl0ZXMubGVuZ3RoIGlzIG9kZCwgdGhlIGxhc3QgOCBiaXRzIG11c3QgYmUgaWdub3JlZCAoc2FtZSBhcyBub2RlLmpzKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICBjb25zdCBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIGxldCBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgbG8gPSBmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0XG5cbiAgY29uc3QgaGkgPSB0aGlzWysrb2Zmc2V0XSArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgbGFzdCAqIDIgKiogMjRcblxuICByZXR1cm4gQmlnSW50KGxvKSArIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBoaSA9IGZpcnN0ICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICBjb25zdCBsbyA9IHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdFxuXG4gIHJldHVybiAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKSArIEJpZ0ludChsbylcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgaSA9IGJ5dGVMZW5ndGhcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgNF0gK1xuICAgIHRoaXNbb2Zmc2V0ICsgNV0gKiAyICoqIDggK1xuICAgIHRoaXNbb2Zmc2V0ICsgNl0gKiAyICoqIDE2ICtcbiAgICAobGFzdCA8PCAyNCkgLy8gT3ZlcmZsb3dcblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQoZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSAoZmlyc3QgPDwgMjQpICsgLy8gT3ZlcmZsb3dcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludCh0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3QpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NExFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIHJldHVybiBvZmZzZXRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0QkUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDddID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA2XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNV0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDRdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyAzXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMl0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDFdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXRdID0gaGlcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSAwXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICBjb25zdCBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIGxldCBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIENVU1RPTSBFUlJPUlNcbi8vID09PT09PT09PT09PT1cblxuLy8gU2ltcGxpZmllZCB2ZXJzaW9ucyBmcm9tIE5vZGUsIGNoYW5nZWQgZm9yIEJ1ZmZlci1vbmx5IHVzYWdlXG5jb25zdCBlcnJvcnMgPSB7fVxuZnVuY3Rpb24gRSAoc3ltLCBnZXRNZXNzYWdlLCBCYXNlKSB7XG4gIGVycm9yc1tzeW1dID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgc3VwZXIoKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIHZhbHVlOiBnZXRNZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pXG5cbiAgICAgIC8vIEFkZCB0aGUgZXJyb3IgY29kZSB0byB0aGUgbmFtZSB0byBpbmNsdWRlIGl0IGluIHRoZSBzdGFjayB0cmFjZS5cbiAgICAgIHRoaXMubmFtZSA9IGAke3RoaXMubmFtZX0gWyR7c3ltfV1gXG4gICAgICAvLyBBY2Nlc3MgdGhlIHN0YWNrIHRvIGdlbmVyYXRlIHRoZSBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZXJyb3IgY29kZVxuICAgICAgLy8gZnJvbSB0aGUgbmFtZS5cbiAgICAgIHRoaXMuc3RhY2sgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgIC8vIFJlc2V0IHRoZSBuYW1lIHRvIHRoZSBhY3R1YWwgbmFtZS5cbiAgICAgIGRlbGV0ZSB0aGlzLm5hbWVcbiAgICB9XG5cbiAgICBnZXQgY29kZSAoKSB7XG4gICAgICByZXR1cm4gc3ltXG4gICAgfVxuXG4gICAgc2V0IGNvZGUgKHZhbHVlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvZGUnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9IFske3N5bX1dOiAke3RoaXMubWVzc2FnZX1gXG4gICAgfVxuICB9XG59XG5cbkUoJ0VSUl9CVUZGRVJfT1VUX09GX0JPVU5EUycsXG4gIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHNgXG4gICAgfVxuXG4gICAgcmV0dXJuICdBdHRlbXB0IHRvIGFjY2VzcyBtZW1vcnkgb3V0c2lkZSBidWZmZXIgYm91bmRzJ1xuICB9LCBSYW5nZUVycm9yKVxuRSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLFxuICBmdW5jdGlvbiAobmFtZSwgYWN0dWFsKSB7XG4gICAgcmV0dXJuIGBUaGUgXCIke25hbWV9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YFxuICB9LCBUeXBlRXJyb3IpXG5FKCdFUlJfT1VUX09GX1JBTkdFJyxcbiAgZnVuY3Rpb24gKHN0ciwgcmFuZ2UsIGlucHV0KSB7XG4gICAgbGV0IG1zZyA9IGBUaGUgdmFsdWUgb2YgXCIke3N0cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYFxuICAgIGxldCByZWNlaXZlZCA9IGlucHV0XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoaW5wdXQpICYmIE1hdGguYWJzKGlucHV0KSA+IDIgKiogMzIpIHtcbiAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKFN0cmluZyhpbnB1dCkpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnKSB7XG4gICAgICByZWNlaXZlZCA9IFN0cmluZyhpbnB1dClcbiAgICAgIGlmIChpbnB1dCA+IEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpIHx8IGlucHV0IDwgLShCaWdJbnQoMikgKiogQmlnSW50KDMyKSkpIHtcbiAgICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IocmVjZWl2ZWQpXG4gICAgICB9XG4gICAgICByZWNlaXZlZCArPSAnbidcbiAgICB9XG4gICAgbXNnICs9IGAgSXQgbXVzdCBiZSAke3JhbmdlfS4gUmVjZWl2ZWQgJHtyZWNlaXZlZH1gXG4gICAgcmV0dXJuIG1zZ1xuICB9LCBSYW5nZUVycm9yKVxuXG5mdW5jdGlvbiBhZGROdW1lcmljYWxTZXBhcmF0b3IgKHZhbCkge1xuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSB2YWwubGVuZ3RoXG4gIGNvbnN0IHN0YXJ0ID0gdmFsWzBdID09PSAnLScgPyAxIDogMFxuICBmb3IgKDsgaSA+PSBzdGFydCArIDQ7IGkgLT0gMykge1xuICAgIHJlcyA9IGBfJHt2YWwuc2xpY2UoaSAtIDMsIGkpfSR7cmVzfWBcbiAgfVxuICByZXR1cm4gYCR7dmFsLnNsaWNlKDAsIGkpfSR7cmVzfWBcbn1cblxuLy8gQ0hFQ0sgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gY2hlY2tCb3VuZHMgKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGlmIChidWZbb2Zmc2V0XSA9PT0gdW5kZWZpbmVkIHx8IGJ1ZltvZmZzZXQgKyBieXRlTGVuZ3RoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCBidWYubGVuZ3RoIC0gKGJ5dGVMZW5ndGggKyAxKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ludEJJICh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikge1xuICAgIGNvbnN0IG4gPSB0eXBlb2YgbWluID09PSAnYmlnaW50JyA/ICduJyA6ICcnXG4gICAgbGV0IHJhbmdlXG4gICAgaWYgKGJ5dGVMZW5ndGggPiAzKSB7XG4gICAgICBpZiAobWluID09PSAwIHx8IG1pbiA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgIHJhbmdlID0gYD49IDAke259IGFuZCA8IDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDh9JHtufWBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlID0gYD49IC0oMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufSkgYW5kIDwgMiAqKiBgICtcbiAgICAgICAgICAgICAgICBgJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufWBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2UgPSBgPj0gJHttaW59JHtufSBhbmQgPD0gJHttYXh9JHtufWBcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKCd2YWx1ZScsIHJhbmdlLCB2YWx1ZSlcbiAgfVxuICBjaGVja0JvdW5kcyhidWYsIG9mZnNldCwgYnl0ZUxlbmd0aClcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIgKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnbnVtYmVyJywgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gYm91bmRzRXJyb3IgKHZhbHVlLCBsZW5ndGgsIHR5cGUpIHtcbiAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgIHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0eXBlKVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLCAnYW4gaW50ZWdlcicsIHZhbHVlKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUygpXG4gIH1cblxuICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA+PSAke3R5cGUgPyAxIDogMH0gYW5kIDw9ICR7bGVuZ3RofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSlcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5jb25zdCBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgbGV0IGNvZGVQb2ludFxuICBjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIGxldCBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICBjb25zdCBieXRlcyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgbGV0IGMsIGhpLCBsb1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG5jb25zdCBoZXhTbGljZUxvb2t1cFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgY29uc3QgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICBjb25zdCBpMTYgPSBpICogMTZcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVcbn0pKClcblxuLy8gUmV0dXJuIG5vdCBmdW5jdGlvbiB3aXRoIEVycm9yIGlmIEJpZ0ludCBub3Qgc3VwcG9ydGVkXG5mdW5jdGlvbiBkZWZpbmVCaWdJbnRNZXRob2QgKGZuKSB7XG4gIHJldHVybiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgOiBmblxufVxuXG5mdW5jdGlvbiBCdWZmZXJCaWdJbnROb3REZWZpbmVkICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCaWdJbnQgbm90IHN1cHBvcnRlZCcpXG59XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiXHJcbmltcG9ydCB7IGFwcGNuIH0gZnJvbSBcIi4vc3JjL0FwcENvbm5lY3RcIjtcclxuaW1wb3J0IHsgSG9sZGVyLCBSZXN1bHRIb2xkZXIgfSBmcm9tIFwiLi9zcmMvUmVzdWx0SG9sZGVyLnRzL1Jlc3VsdEhvbGRlclwiO1xyXG5pbXBvcnQgeyBHZXRBbGxGcm9tVGFibGVPcHJpaG9kIH0gZnJvbSBcIi4vc3JjL2NvbmNyZXRlQ29tbWFuZHMvR2V0QWxsRnJvbVRhYmxlT3ByaWhvZFwiO1xyXG5pbXBvcnQgeyBHZXRBbGxQcm9kdWN0Rm9sZGVyIH0gZnJvbSBcIi4vc3JjL2NvbmNyZXRlQ29tbWFuZHMvR2V0QWxsUHJvZHVjdEZvbGRlclwiO1xyXG5pbXBvcnQgeyBPcHJpaG9kIH0gZnJvbSBcIi4vc3JjL2NvbmNyZXRlQ29tbWFuZHMvT3ByaWhvZFwiO1xyXG5pbXBvcnQgeyBkb20gfSBmcm9tIFwiLi9zcmMvZG9tXCI7IFxyXG5pbXBvcnQgeyBpbnZva2VyIH0gZnJvbSBcIi4vc3JjL2ludm9rZS9JbnZva2VyXCI7XHJcbmltcG9ydCB7IEFsbERhdGFUYWJsZU9wcmlob2QsIEFuc3dlck9wcmlob2QsIEZpbGxTZWxlY3RQYXRoTmFtZXMsIFRhYmxlUHJvZHVjdHMgfSBmcm9tIFwiLi9zcmMvcGFnZS9jbGllbnRzXCI7XHJcbmltcG9ydCB7IEVudW1QYWdlTmFtZSB9IGZyb20gXCIuL3NyYy90eXBlcy9FbnVtUGFnZU5hbWVcIjtcclxuaW1wb3J0IHsgVGVsZWdyYW1XZWJBcHBzIH0gZnJvbSAndGVsZWdyYW0td2ViYXBwcy10eXBlcyc7XHJcbmltcG9ydCB7IFJlZnJlc2hUb2tlbkRhdGEgfSBmcm9tIFwiLi9zcmMvdHlwZXMvVHlwZXNGcm9udGVuZFwiO1xyXG5cclxuZGVjbGFyZSBjb25zdCB3aW5kb3c6IHtcclxuICAgIFRlbGVncmFtOiBUZWxlZ3JhbVdlYkFwcHMuU0RLO1xyXG59ICYgV2luZG93O1xyXG5cclxuXHJcblxyXG5jb25zdCBkYXRlcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXJyZW50dGltZScpOyAgXHJcbnNldEludGVydmFsKCAoKSA9PiB7XHJcbiAgICBpZiAoZGF0ZXApXHJcbiAgICAgICAgZGF0ZXAudGV4dENvbnRlbnQgPSAn0KLQsNCx0LvQuNGG0LAg0L7Qv9GA0LjRhdC+0LTQvtCy0LDQvdC40Y8gJyArIFxyXG4gICAgICAgICAgICAgICAgbmV3IERhdGUoKS50b0xvY2FsZVN0cmluZyhcInJ1LVJVXCIsIHt0aW1lWm9uZTogXCJFdXJvcGUvTW9zY293XCJ9KTtcclxufSwgMTAwMCk7XHJcbiBcclxuKCgpID0+eyAvL1xyXG4gICAgY29uc3QgaW5wdXRDb3VudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VsLWNvdW50XCIpO1xyXG4gICAgaWYgKGlucHV0Q291bnQpIHtcclxuICAgICAgICBpbnB1dENvdW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5wdXQgPSA8SFRNTElucHV0RWxlbWVudD50aGlzO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlLmxlbmd0aCA+IDE3KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuayA9IFsuLi5pbnB1dC52YWx1ZV0uc2xpY2UoMCwgMTYpO1xyXG4gICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSBjaGFuay5qb2luKCcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn0pKCk7XHJcblxyXG5cclxuXHJcbmNvbnN0IGlkQ29udGFpbmVyQ2F0cyA9ICdkaXYtY2F0ZWdvcmllcyc7IFxyXG5jb25zdCBjbnRBbGxwcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGktbWVudS1hbGxwcm9kJyk7XHJcbmNvbnN0IGNudE9wcmlob2QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGktbWVudS1vcHJpaG9kJyk7XHJcblxyXG5jb25zdCBzZW5kRm9ybU9wcmlob2RCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtcHJvZHVjdCcpO1xyXG5zZW5kRm9ybU9wcmlob2RCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZG9tLmNsYlNlbmRGb3JtT3ByaWhvZCk7XHJcblxyXG5jb25zdCBjbGllbnRGaWxsc2VsUGF0aE5hbWUgPSBuZXcgRmlsbFNlbGVjdFBhdGhOYW1lcygnc2VsLXBhdGhOYW1lJyk7ICAvLyDQutC70LjQtdC90YIgc2VsZWN0IHRobWwgXCLQmtCw0YLQtdCz0L7RgNC40LhcIlxyXG5leHBvcnQgY29uc3QgY2xpZW50VGFibGVPcHRpaG9kID0gbmV3IEFsbERhdGFUYWJsZU9wcmlob2QoJ2NvbnRhaW4tdGFibGUtb3ByaWhvZCcpO1xyXG5cclxuLy8g0L7Qv9GA0LjRhdC+0LTQvtCy0LDRgtGMXHJcbmludm9rZXIuc2V0Q29tbWFuZE9wcmlob2QobmV3IE9wcmlob2QoYXBwY24pKTtcclxuY29uc3QgY2xpZW50UmVzT3ByaWhvZCA9IG5ldyBBbnN3ZXJPcHJpaG9kKFwib3ByaWhvZGluZm9cIik7XHJcbmNvbnN0IGFuc3dlclJlc0hvbGRlciA9IG5ldyBSZXN1bHRIb2xkZXIoY2xpZW50UmVzT3ByaWhvZCk7XHJcbmNvbnN0IGJ0bk9wcmlob2QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtb3ByaWhvZCcpO1xyXG5idG5PcHJpaG9kPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcclxuICAgIGRvbS5sb2FkSW1hZ2UodHJ1ZSwgJ2xvYWRvcHJpaG9kJyk7XHJcbiAgICBkb20udGV4dE1lc3NhZ2UoJ29wcmlob2RpbmZvJywgJ9C+0L/RgNC40YXQvtC00L7QstCw0L3QuNC1INCyINCc0L7QudCh0LrQu9Cw0LQuLi4nKTtcclxuICAgIGNvbnN0IGlzQ2hlY2tTZW5kID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lzc2VuZHNrbGFkJyk7XHJcbiAgICBjb25zdCBpc2NoZWNrID0gKDxIVE1MSW5wdXRFbGVtZW50PmlzQ2hlY2tTZW5kKS5jaGVja2VkO1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgaW52b2tlci5zZW5kT3ByaWhvZCh7d2hvOiBcImFkbWluXCIsIHJvbGU6IFwiYWRtaW5cIiwgaXNTZW5kU2tsYWQ6IGlzY2hlY2t9KTtcclxuICAgIGNvbnN0IHJIb2xkZXIgPSBuZXcgSG9sZGVyKCdhbnN3ZXJPcHJpaG9kJywgcmVzKTtcclxuICAgIGFuc3dlclJlc0hvbGRlci5leGVjdXRlKHJIb2xkZXIpO1xyXG4gICAgZG9tLmxvYWRJbWFnZShmYWxzZSwgJ2xvYWRvcHJpaG9kJyk7XHJcbiAgICBkb20udGV4dE1lc3NhZ2UoJ29wcmlob2RpbmZvJyk7XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqINGB0YLQsNGA0YIg0L/RgNC4INC30LDQs9GA0YPQt9C60LUg0YHRgtGALiBcclxuICovXHJcbmNvbnN0IGZpcnN0U3RhcnQgPSBhc3luYyAoKSA9PiB7XHJcbiAgICBpbnZva2VyLnNldEFsbFByb2R1Y3RzRm9sZGVyKG5ldyBHZXRBbGxQcm9kdWN0Rm9sZGVyKGFwcGNuKSk7ICAgICAgICAgICAvLyDRg9GB0YLQsNC90L7QstC40YLRjCDQutC+0LzQsNC90LTRgyDQv9C+0LvRg9GH0LXQvdC40Y8g0YHQv9C40YHQutCwINC60LDRgtC10LPQvtGA0LjQuVxyXG4gICAgZG9tLmxvYWRJbWFnZSh0cnVlLCAnbG9hZG9wcmNhdHMnKTsgXHJcbiAgICBkb20udGV4dE1lc3NhZ2UoJ29wcmluZm9jYXRzJywgJ9CX0LDQs9GA0YPQt9C60LAg0LTQsNC90L3Ri9GFINCyINGB0L/QuNGB0LrQuC4uLicpO1xyXG4gICAgY29uc3QgYXJyQ2F0cyA9IGF3YWl0IGludm9rZXIuZ2V0QWxsUHJvZEZvbGRlcignYWxsUHJvZEZvbGRlcicpOyAgICAgICAgLy8g0L/QvtC70YPRh9C40YLRjCDRgdC/0LjRgdC+0Log0LrQsNGC0LXQs9C+0YDQuNC5INC/0L4g0LrQvtC80LDQvdC00LVcclxuICAgIGNvbnN0IGhvbGRlclNlbFBhdGhOYW1lID0gbmV3IFJlc3VsdEhvbGRlcihjbGllbnRGaWxsc2VsUGF0aE5hbWUpOyAgICAgIC8vINGB0L7Qt9C00LDRgtGMINGF0YDQsNC90LjRgtC10LvRjyDRgNC10LfRg9C70YzRgtCw0YLQsCDQstGL0L8t0Y8g0LrQvtC80LDQvdC00YtcclxuICAgIGNvbnN0IGhvbGRlciA9IG5ldyBIb2xkZXIoJ3NlbC1wYXRoTmFtZScsIGFyckNhdHMpOyAgICAgICAgICAgICAgICAgICAgIC8vINC+0LHRitC10LrRgiDRgNC10LfRg9C70YzRgtCw0YLQsCDQstGL0L8t0Y8g0LrQvtC80LDQvdC00YtcclxuICAgIGF3YWl0IGhvbGRlclNlbFBhdGhOYW1lLmV4ZWN1dGUoaG9sZGVyKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINGF0YDQsNC90LjRgtC10LvRjCDQvtGC0LTQsNC10YIg0YDQtdC30YPQu9GM0YLQsNGCINC60LvQuNC10L3RgtGDICjQt9C00LXRgdGMIHNlbGVjdCBodG1sKVxyXG4gICAgZG9tLmxvYWRJbWFnZShmYWxzZSwgJ2xvYWRvcHJjYXRzJyk7IFxyXG4gICAgZG9tLnRleHRNZXNzYWdlKCdvcHJpbmZvY2F0cycpO1xyXG4gICAgaW52b2tlci5zZXRHZXRBbGxEYXRhVGFibGVPcHJpaG9kKG5ldyBHZXRBbGxGcm9tVGFibGVPcHJpaG9kKGFwcGNuKSk7XHJcbiAgICBjb25zdCB0YWJsZURhdGFPcHIgPSBhd2FpdCBpbnZva2VyLmdldEFsbERhdGFUYWJsZU9wcmlob2QoKTtcclxuICAgIGNvbnN0IGhvbGRlclRhYmxlT3ByaCA9IG5ldyBSZXN1bHRIb2xkZXIoY2xpZW50VGFibGVPcHRpaG9kKTtcclxuICAgIGNvbnN0IGhvbGRlclRPID0gbmV3IEhvbGRlcignaG9sZGVyRmlyc3RTdGFydCcsIHRhYmxlRGF0YU9wcik7XHJcbiAgICBob2xkZXJUYWJsZU9wcmguZXhlY3V0ZShob2xkZXJUTyk7XHJcbn07IFxyXG5cclxuXHJcblxyXG5pZiAoY250T3ByaWhvZCAmJiBjbnRBbGxwcmQpXHJcbiAgICBmb3IgKGxldCB2IG9mIFtjbnRPcHJpaG9kLCBjbnRBbGxwcmRdKSB7XHJcbiAgICAgICAgdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50O1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRhcmdldC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEVudW1QYWdlTmFtZS5PUFJJSE9EOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZmlyc3RTdGFydCgpOyAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgRW51bVBhZ2VOYW1lLkFMTFBST0Q6IHtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJsZSA9IG5ldyBUYWJsZVByb2R1Y3RzKCd0YWJsZS1jb250YWluZXInKTsgIC8vQ2xpZW50RGF0YVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFibGUgfHwgKCF0YWJsZS5jbnQpKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBkb20uY3JlYXRlTGlzdENhdHMoaWRDb250YWluZXJDYXRzLCB0YWJsZSwgaW52b2tlcik7IFxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbmZpcnN0U3RhcnQoKTtcclxuXHJcblxyXG5jb25zdCBkd25sID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LWRvd25sb2FkZmlsZScpO1xyXG53aW5kb3cuVGVsZWdyYW0uV2ViQXBwLnJlYWR5KCk7XHJcblxyXG5kd25sIS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChlKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBibG9iID0gYXdhaXQgYXBwY24uZ2V0RXhjZWxGaWxlKCk7XHJcbiAgICAgICAgaWYgKGJsb2IpIHtcclxuICAgICAgICAgICAgLy8gY29uc3QgZmlsZSA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgICAgICAgICAvLyB3aW5kb3cubG9jYXRpb24uYXNzaWduKGZpbGUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gY29uc3QgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgICAgIC8vIGEuaHJlZiA9IHVybDtcclxuICAgICAgICAgICAgLy8gYS5kb3dubG9hZCA9IFwiQWxsT3ByaWhvZHMueGxzeFwiO1xyXG4gICAgICAgICAgICAvLyBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpOyBcclxuICAgICAgICAgICAgLy8gYS5jbGljaygpOyAgICBcclxuICAgICAgICAgICAgLy8gYS5yZW1vdmUoKTsgICBcclxuICAgICAgICAgICAgY29uc3QgdXJsbGluayA9IGFwcGNuLmdldExpbmtEb3dubG9hZEV4Y2VsbCgpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHdpbmRvdy5UZWxlZ3JhbS5XZWJBcHAub3BlbkxpbmsodXJsbGluayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0gY2F0Y2ggKGUpIHsgY29uc29sZS5sb2coJ2Vycm9yIGRvd25sb2FkIGZpbGUnLCBlKSB9IFxyXG59KVxyXG5cclxuXHJcbi8vINC30LDQvNC10L3QsCDRgtC+0LrQtdC90LAg0JzQvtC50KHQutC70LDQtFxyXG5jb25zdCBidG5SZWZyZXNoVG9rZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVmcmVzaC10b2tlbicpO1xyXG5idG5SZWZyZXNoVG9rZW4/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIFxyXG4gICAgY29uc3QgZm9ybSA9ICg8SFRNTEZvcm1FbGVtZW50PiBlLnRhcmdldCkuZm9ybSBhcyBIVE1MRm9ybUVsZW1lbnQ7XHJcbiAgICBjb25zdCBpbG9naW4gPSBmb3JtWydza2xhZC1sb2dpbiddLnZhbHVlO1xyXG4gICAgY29uc3QgaXBhc3N3ID0gZm9ybVsnc2tsYWQtcGFzc3dvcmQnXS52YWx1ZTtcclxuXHJcbiAgICBjb25zdCBteWF1dGggPSBCdWZmZXIuZnJvbShpbG9naW4gKyAnOicgKyBpcGFzc3cpLnRvU3RyaW5nKCdiYXNlNjQnKTtcclxuICAgIGNvbnN0IHNlbmREYXRhOiBSZWZyZXNoVG9rZW5EYXRhID0ge2NyZWRlbnRpYWw6IG15YXV0aCwgZXJyb3JzOiBbXX07XHJcbiAgICBjb25zdCByZXN1bHRUb2tlblJlZiA9IGF3YWl0IGFwcGNuLnNlbmRSZWZyZXNoVG9rZW4oc2VuZERhdGEpO1xyXG4gICAgY29uc3QgaW5mb3AgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdWx0cmVmdG9rZW4nKTtcclxuICAgIGlmIChyZXN1bHRUb2tlblJlZi5lcnJvcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGluZm9wIS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2NvbG9yOiByZWQ7IGZvbnQtc2l6ZTogMC44ZW07Jyk7XHJcbiAgICAgICAgaW5mb3AhLnRleHRDb250ZW50ID0gcmVzdWx0VG9rZW5SZWYuZXJyb3JzWzBdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpbmZvcCEuc2V0QXR0cmlidXRlKCdzdHlsZScsICdjb2xvcjogZ3JlZW47IGZvbnQtc2l6ZTogMC44ZW07Jyk7XHJcbiAgICAgICAgaW5mb3AhLnRleHRDb250ZW50ID0gJ9GC0L7QutC10L06ICcgKyByZXN1bHRUb2tlblJlZi5jcmVkZW50aWFsO1xyXG4gICAgfVxyXG5cclxufSk7XHJcblxyXG5cclxuLy8g0L/QtdGA0LXQt9Cw0L/QuNGB0Ywg0YLQsNCx0LvQuNGG0YsgcHJvZHVjdFxyXG5jb25zdCBidG5SZXdyaXRlVGFibGVEYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXdyaXRlLWRiJyk7XHJcbmNvbnN0IHBpbmZvcmV3ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luZm8tcmV3cml0ZURiJyk7XHJcblxyXG5idG5SZXdyaXRlVGFibGVEYj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgcGluZm9yZXchLnRleHRDb250ZW50ID0gJyc7XHJcbiAgICBkb20ubG9hZEltYWdlKHRydWUsICdsb2Fkc3RhdGVyZXdyaXRlJyk7IFxyXG4gICAgZG9tLnRleHRNZXNzYWdlKCdlcnJpbmZvcmV3cml0ZScsICfQn9C10YDQtdC30LDQv9C40YHRjCDQtNCw0L3QvdGL0YUg0LIg0YLQsNCx0LvQuNGG0YMg0LHQtC4uLiDQrdGC0L4g0LzQvtC20LXRgiDQt9Cw0L3Rj9GC0Ywg0LLRgNC10LzRjy4nKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFwcGNuLnJld3JpdGVQcm9kdWN0c1RhYmxlKCk7XHJcbiAgICBkb20ubG9hZEltYWdlKGZhbHNlLCAnbG9hZHN0YXRlcmV3cml0ZScpOyBcclxuICAgIGRvbS50ZXh0TWVzc2FnZSgnZXJyaW5mb3Jld3JpdGUnKTtcclxuICAgIGlmIChyZXN1bHQucmVzdWx0ID09PSAnb2snKSB7XHJcbiAgICAgICAgcGluZm9yZXchLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZm9udC1zaXplOiAwLjllbTsgY29sb3I6IGdyZWVuOycpO1xyXG4gICAgICAgIHBpbmZvcmV3IS50ZXh0Q29udGVudCA9ICfQk9C+0YLQvtCy0L4uJ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBwaW5mb3JldyEuc2V0QXR0cmlidXRlKCdzdHlsZScsICdmb250LXNpemU6IDAuOGVtOyBjb2xvcjogcmVkOycpO1xyXG4gICAgICAgIHBpbmZvcmV3IS50ZXh0Q29udGVudCA9ICfQntGI0LjQsdC60LAnXHJcbiAgICB9XHJcbn0pXHJcblxyXG4iLCJpbXBvcnQgeyBUZWxlZ3JhbVdlYkFwcHMgfSBmcm9tIFwidGVsZWdyYW0td2ViYXBwcy10eXBlc1wiO1xyXG5pbXBvcnQgeyBEb09wcmlob2QsIFJlZnJlc2hUb2tlbkRhdGEsIFR5cGVJbnB1dE9wcmlob2QgfSBmcm9tIFwiLi90eXBlcy9UeXBlc0Zyb250ZW5kXCI7XHJcblxyXG4vLyBjb25zdCBERVZIT1NUID0gJ2h0dHBzOi8vZm9yZWdvci52ZXJjZWwuYXBwLyc7XHJcbmNvbnN0IERFVkhPU1QgPSAnaHR0cHM6Ly9raXRvcHQyNC5zaXRlLyc7XHJcbi8vIGNvbnN0IERFVkhPU1QgPSAnLyc7XHJcbmV4cG9ydCBjb25zdCBIT1NUID0gREVWSE9TVDtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQXBwQ29ubmVjdCB7XHJcblxyXG4gICAgaG9zdCA9IEhPU1Q7XHJcbiAgICBjb25zdHJ1Y3Rvcihob3N0OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmhvc3QgPSBob3N0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldExpbmtEb3dubG9hZEV4Y2VsbCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QgKyAnZ2V0T3ByaWhvZHNFeGNlbCc7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0UHJvZEZvbGRlcnModXJsOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2godGhpcy5ob3N0ICsgdXJsLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnIFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7fSlcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgcmVzcC5qc29uKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGFzeW5jIGdldEV4Y2VsRmlsZSgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2godGhpcy5ob3N0ICsgJ2dldE9wcmlob2RzRXhjZWwnLCB7bWV0aG9kOiAnR0VUJ30pO1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcmVzcC5ibG9iKCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBjb25zb2xlLmxvZygnZXJyb3IgQXBwQ29ubmVjdCAtPiBnZXRFeGNlbEZpbGUoKScpIH0gXHJcbiAgICAgICAgcmV0dXJuIG51bGw7ICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC8vINC/0L7Qu9GD0YfQuNGC0Ywg0YLQvtCy0LDRgNGLINC/0L4gcGF0aE5hbWVcclxuICAgIGFzeW5jIGdldFByb2R1Y3RCeUNhdHModXJsOiBzdHJpbmcsIHVyaTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSB7VVJJU2tsYWQ6IHVyaX07XHJcbiAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKHRoaXMuaG9zdCt1cmwsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdERhdGEpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcC5qc29uKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDQvtGC0L/RgNCw0LLQuNGC0Ywg0YTQvtGA0LzRgyDQvtC/0YDQuNGF0L7QtFxyXG4gICAgYXN5bmMgZ2V0UmVzcFNlbmRGb3JtRGF0YU9wcmlob2QoZm9ybURhdGE6IEZvcm1EYXRhKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh0aGlzLmhvc3QgKyAnZm9ybU9wcmlob2QnLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyDQv9C10YDQtdC30LDQv9C40YHQsNGC0Ywg0YLQsNCx0LvQuNGG0YMg0LTQsSBwcm9kdWN0cyBcclxuICAgIGFzeW5jIHJld3JpdGVQcm9kdWN0c1RhYmxlKCkge1xyXG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaCh0aGlzLmhvc3QgKyAnd3JpdGVGcm9tTXlza2xhZFRvRGInLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHt9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3AuanNvbigpIGFzIHtyZXN1bHQ6IHN0cmluZ307XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8g0YHQvNC10L3QuNGC0Ywg0YLQvtC60LXQvVxyXG4gICAgYXN5bmMgc2VuZFJlZnJlc2hUb2tlbihzZW5kRGF0YTogUmVmcmVzaFRva2VuRGF0YSk6IFByb21pc2U8UmVmcmVzaFRva2VuRGF0YT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGhpcy5ob3N0ICsgJ3JlZnJlc2hUb2tlblNrbGFkJywge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShzZW5kRGF0YSlcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8g0JrQvdC+0L/QutCwINC+0L/RgNC40YXQvtC00L7QstCw0YLRjFxyXG4gICAgYXN5bmMgZG9PcHJpaG9kKGRhdGE6IERvT3ByaWhvZCkge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godGhpcy5ob3N0ICsgJ2RvT3ByaWhvZCcsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04J1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDQv9C+0LvRg9GH0LjRgtGMINGC0LDQsdC70LjRhtGDINC00L7QsdCw0LLQu9C10L3QvdGL0YUg0L/RgNC+0LTRg9C60YLQvtCyXHJcbiAgICBhc3luYyBnZXRUYWJsZU9wcmlob2QoKTogUHJvbWlzZTxUeXBlSW5wdXRPcHJpaG9kPiB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh0aGlzLmhvc3QgKyAnZ2V0VGFibGVPcHJpaG9kJywge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7fSlcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXN5bmMgZGVsZXRlUm93PFQ+KGlkcm93OiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuaG9zdCArICdkZWxldGVSb3cnLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCdcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtkZWxJZDogaWRyb3d9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyDQv9C+0LvRg9GH0LjRgtGMINGB0L/QuNGB0LrQuCDRhtCy0LXRgiDQuCDQvdCw0LfQstCw0L3QuNC1INC/0L4gcGF0aE5hbWUg0LTQu9GPIHNlbGVjdC3QvtCyXHJcbiAgICBhc3luYyBnZXRBdHRyaWJ1dGVzTmFtZUNvbG9yc0J5UGF0aE5hbWUocGF0aE5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHJlcURhdGEgPSB7cGF0aE5hbWU6IHBhdGhOYW1lfTtcclxuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgZmV0Y2godGhpcy5ob3N0ICsgJ2dldEF0dHJzQnlQYXRoJywge1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXFEYXRhKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3AuanNvbigpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g0L7RgtC/0YDQsNCy0LrQsCDQvdCwINGB0LXRgNCy0LXRgCDQtNCw0L3QvdGL0YUg0L7RgiDRgtC10LvQtdCz0YDQsNC8IC8vLy8v0YLQtdGB0YJcclxuICAgIGFzeW5jIHNlbmRUZWxlZ3JhbURhdGEoZGF0YTogVGVsZWdyYW1XZWJBcHBzLldlYkFwcEluaXREYXRhKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKHRoaXMuaG9zdCArICdmcm9tVGVsZWdyYW0nLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcC5qc29uKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBhcHBjbiA9IG5ldyBBcHBDb25uZWN0KEhPU1QpOyIsImltcG9ydCB7IENsaWVudERhdGEgfSBmcm9tIFwiLi4vcGFnZS9jbGllbnRzXCI7XHJcbmltcG9ydCB7IEhvbGRlckRhdGEgfSBmcm9tIFwiLi4vdHlwZXMvSG9sZGVyRGF0YVwiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgSG9sZGVyPFQ+IHtcclxuICAgIHByaXZhdGUgaG9sZDogVFtdICA9IFtdO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nLCBkYXRhOiBUW10pIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkYXRhKGQ6IFRbXSkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9sZC5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmhvbGQgPSBbLi4uZF1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRhdGEoKTogSG9sZGVyRGF0YTxUPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9sZCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge25hbWU6IHRoaXMubmFtZSwgYXJyRGF0YTogdGhpcy5ob2xkfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge25hbWU6ICcnLCBhcnJEYXRhOiBbXX07XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBSZXN1bHRIb2xkZXIge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjbGllbnQ6IENsaWVudERhdGEpIHt9XHJcblxyXG4gICAgYXN5bmMgZXhlY3V0ZTxUPihob2xkZXI6IEhvbGRlcjxUPikge1xyXG4gICAgICAgIGlmICh0aGlzLmNsaWVudCkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5leGVjdXRlQ2FsbGJhY2s8VD4oaG9sZGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgQXBwQ29ubmVjdCB9IGZyb20gXCIuLi9BcHBDb25uZWN0XCI7XHJcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi4vdHlwZXMvQ29tbWFuZFwiO1xyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQ29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmR7XHJcbiAgICBwcm90ZWN0ZWQgcmVzcEV4ZWN1dGU6IGFueSA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKHByb3RlY3RlZCByZWNpZXZlcjogQXBwQ29ubmVjdCkge31cclxuXHJcbiAgICBhYnN0cmFjdCBleGVjdXRlPFQ+KC4uLmFyZ3M6IGFueVtdKTogUHJvbWlzZTxUW10+O1xyXG5cclxuICAgIGdldFJlc3BvbnNlKCkge1xyXG4gICAgICAgIGNvbnN0IHJldHVyblJlc3BvbnNlID0gdGhpcy5yZXNwRXhlY3V0ZTtcclxuICAgICAgICByZXR1cm4gcmV0dXJuUmVzcG9uc2U7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBcHBDb25uZWN0IH0gZnJvbSBcIi4uL0FwcENvbm5lY3RcIjtcclxuaW1wb3J0IHsgQmFzZUNvbW1hbmQgfSBmcm9tIFwiLi9CYXNlQ29tbWFuZFwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDQo9C00LDQu9C40YLRjCDRgdGC0YDQvtC60YMg0YLQsNCx0LvQuNGG0Ysg0L7Qv9GA0LjRhdC+0LTQvtCy0LDQvdC40Y9cclxuICogIFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENtZERlbGV0ZVJvd1RhYmxlT3ByaWhvZCBleHRlbmRzIEJhc2VDb21tYW5kIHtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IocmVjaWV2ZXI6IEFwcENvbm5lY3QpIHtcclxuICAgICAgICBzdXBlcihyZWNpZXZlcilcclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIGFzeW5jIGV4ZWN1dGU8VD4oaWRyb3c6IHN0cmluZyk6IFByb21pc2U8VFtdPiB7XHJcbiAgICAgICAgdGhpcy5yZXNwRXhlY3V0ZSA9IGF3YWl0IHRoaXMucmVjaWV2ZXIuZGVsZXRlUm93PFQ+KGlkcm93KSBhcyBUW107ICAvL2FwcGNudFxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlc3BvbnNlKCk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgQXBwQ29ubmVjdCB9IGZyb20gXCIuLi9BcHBDb25uZWN0XCI7XHJcbmltcG9ydCB7IEJhc2VDb21tYW5kIH0gZnJvbSBcIi4vQmFzZUNvbW1hbmRcIjtcclxuXHJcblxyXG4vKipcclxuICog0J7RgtC/0YDQsNCy0LjRgtGMINC30LDQv9C+0LvQvdC10L3QvdGD0Y4g0YTQvtGA0LzRgyDRhtCy0LXRgiDQuNC80Y8g0LrQvtC7LdCy0L4g0YTQvtGC0L5cclxuICog0L3QsCDRgdC10YDQstC10YAuINC/0L7Qu9GD0YfQuNGC0Ywg0YLQsNCx0LvQuNGG0YNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDbWRTZW5kRm9ybU9wcmlob2QgZXh0ZW5kcyBCYXNlQ29tbWFuZCB7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHJlY2lldmVyOiBBcHBDb25uZWN0KSB7XHJcbiAgICAgICAgc3VwZXIocmVjaWV2ZXIpXHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBhc3luYyBleGVjdXRlPFQ+KGZvcm1EYXRhOiBGb3JtRGF0YSk6IFByb21pc2U8VFtdPiB7XHJcbiAgICAgICAgdGhpcy5yZXNwRXhlY3V0ZSA9IGF3YWl0IHRoaXMucmVjaWV2ZXIuZ2V0UmVzcFNlbmRGb3JtRGF0YU9wcmlob2QoZm9ybURhdGEpIGFzIFRbXTsgIC8vYXBwY250XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVzcG9uc2UoKTtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBBcHBDb25uZWN0IH0gZnJvbSBcIi4uL0FwcENvbm5lY3RcIjtcclxuaW1wb3J0IHsgVHlwZUlucHV0T3ByaWhvZCB9IGZyb20gXCIuLi90eXBlcy9UeXBlc0Zyb250ZW5kXCI7XHJcbmltcG9ydCB7IEJhc2VDb21tYW5kIH0gZnJvbSBcIi4vQmFzZUNvbW1hbmRcIjtcclxuXHJcblxyXG4vKipcclxuICog0JrQvtC80LDQvdC00LAuINCf0L7Qu9GD0YfQuNGC0Ywg0LLRgdGOINGC0LDQsdC70LjRhtGDINC00L7QsdCw0LLQu9C10L3QvdC+0Lkg0L/RgNC+0LTRg9C60YbQuNC4INC00LvRjyDQvtC/0YDQuNGF0L7QtNC+0LLQsNC90LjRj1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEdldEFsbEZyb21UYWJsZU9wcmlob2QgZXh0ZW5kcyBCYXNlQ29tbWFuZCB7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHJlY2lldmVyOiBBcHBDb25uZWN0KSB7XHJcbiAgICAgICAgc3VwZXIocmVjaWV2ZXIpXHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBhc3luYyBleGVjdXRlPFQ+KCk6IFByb21pc2U8VFtdPiB7XHJcbiAgICAgICAgdGhpcy5yZXNwRXhlY3V0ZSA9IGF3YWl0IHRoaXMucmVjaWV2ZXIuZ2V0VGFibGVPcHJpaG9kKCkgYXMgVHlwZUlucHV0T3ByaWhvZDtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXNwb25zZSgpO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IEFwcENvbm5lY3QgfSBmcm9tIFwiLi4vQXBwQ29ubmVjdFwiO1xyXG5pbXBvcnQgeyBCYXNlQ29tbWFuZCB9IGZyb20gXCIuL0Jhc2VDb21tYW5kXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqINCa0L7QvNCw0L3QtNCwLiDQn9C+0LvRg9GH0LjRgtGMINGB0L/QuNGB0L7QuiDQv9GA0L7QtNGD0LrRhtC40Lgg0L/QviBVUkkgcGF0aE5hbWUgXHJcbiAqINCc0L7QudCh0LrQu9Cw0LQv0J/RgNC+0LTRg9C60YbQuNGPINCf0LvQuNGC0L7Rh9C60LBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHZXRBbGxQcm9kc0J5UGF0aE5hbWUgZXh0ZW5kcyBCYXNlQ29tbWFuZCB7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHJlY2lldmVyOiBBcHBDb25uZWN0KSB7XHJcbiAgICAgICAgc3VwZXIocmVjaWV2ZXIpXHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBhc3luYyBleGVjdXRlPFQ+KHVybDogc3RyaW5nLCB1cmk6IHN0cmluZyk6IFByb21pc2U8VFtdPiB7XHJcbiAgICAgICAgdGhpcy5yZXNwRXhlY3V0ZSA9IGF3YWl0IHRoaXMucmVjaWV2ZXIuZ2V0UHJvZHVjdEJ5Q2F0cyh1cmwsIHVyaSkgYXMgVFtdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlc3BvbnNlKCk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgQXBwQ29ubmVjdCB9IGZyb20gXCIuLi9BcHBDb25uZWN0XCI7XHJcbmltcG9ydCB7IEJhc2VDb21tYW5kIH0gZnJvbSBcIi4vQmFzZUNvbW1hbmRcIjtcclxuXHJcblxyXG4vKipcclxuICog0JrQvtC80LDQvdC00LAg0L/QvtC70YPRh9C10L3QuNGPINGB0L/QuNGB0LrQsCDRgNCw0LfQtNC10LvQvtCyICjQutCw0YLQtdCz0L7RgNC40LkpXHJcbiAqINCc0L7QudCh0LrQu9Cw0LQv0J/RgNC+0LTRg9C60YbQuNGPINCf0LvQuNGC0L7Rh9C60LBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHZXRBbGxQcm9kdWN0Rm9sZGVyIGV4dGVuZHMgQmFzZUNvbW1hbmQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlY2lldmVyOiBBcHBDb25uZWN0KSB7XHJcbiAgICAgICAgc3VwZXIocmVjaWV2ZXIpO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG4gICAgYXN5bmMgZXhlY3V0ZTxUPih1cmk6IHN0cmluZyk6IFByb21pc2U8VD4ge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJlY2lldmVyLmdldFByb2RGb2xkZXJzKHVyaSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBcHBDb25uZWN0IH0gZnJvbSBcIi4uL0FwcENvbm5lY3RcIjtcclxuaW1wb3J0IHsgQmFzZUNvbW1hbmQgfSBmcm9tIFwiLi9CYXNlQ29tbWFuZFwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDQmtC+0LzQsNC90LTQsC4g0J/QvtC70YPRh9C40YLRjCDQsNGC0YDQuNCx0YPRgtGLOiDQuNC80Y8sINGG0LLQtdGCINC/0L4gcGF0aE5hbWUgXHJcbiAqIHR5cGU6IEF0dHJpYnV0ZXNCeVBhdGhOYW1lXHJcbiAqICjQstGL0LHRgNCw0L3QvdGL0Lkg0Y3Qu9C10LzQtdC90YIg0YHQv9C40YHQutCwIHNlbGVjdCBodG1sIFwi0JrQsNGC0LXQs9C+0YDQuNC4XCIpXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR2V0QXR0cmlidXRlc0J5UGF0aE5hbWUgZXh0ZW5kcyBCYXNlQ29tbWFuZCB7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHJlY2lldmVyOiBBcHBDb25uZWN0KSB7XHJcbiAgICAgICAgc3VwZXIocmVjaWV2ZXIpXHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBhc3luYyBleGVjdXRlPFQ+KHBhdGhOYW1lOiBzdHJpbmcpOiBQcm9taXNlPFRbXT4ge1xyXG4gICAgICAgIHRoaXMucmVzcEV4ZWN1dGUgPSBhd2FpdCB0aGlzLnJlY2lldmVyLmdldEF0dHJpYnV0ZXNOYW1lQ29sb3JzQnlQYXRoTmFtZShwYXRoTmFtZSkgYXMgVFtdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFJlc3BvbnNlKCk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgQXBwQ29ubmVjdCB9IGZyb20gXCIuLi9BcHBDb25uZWN0XCI7XHJcbmltcG9ydCB7IERvT3ByaWhvZCB9IGZyb20gXCIuLi90eXBlcy9UeXBlc0Zyb250ZW5kXCI7XHJcbmltcG9ydCB7IEJhc2VDb21tYW5kIH0gZnJvbSBcIi4vQmFzZUNvbW1hbmRcIjtcclxuXHJcblxyXG4vKipcclxuICog0J7Qv9GA0LjRhdC+0LTQvtCy0LDRgtGMINGC0LDQsdC70LjRhtGDINCyINCc0L7QudCh0LrQu9Cw0LRcclxuICogIFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE9wcmlob2QgZXh0ZW5kcyBCYXNlQ29tbWFuZCB7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yKHJlY2lldmVyOiBBcHBDb25uZWN0KSB7XHJcbiAgICAgICAgc3VwZXIocmVjaWV2ZXIpXHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBhc3luYyBleGVjdXRlPFQ+KGRhdGE6IERvT3ByaWhvZCk6IFByb21pc2U8VFtdPiB7XHJcbiAgICAgICAgdGhpcy5yZXNwRXhlY3V0ZSA9IGF3YWl0IHRoaXMucmVjaWV2ZXIuZG9PcHJpaG9kKGRhdGEpIGFzIFRbXTsgIC8vYXBwY250XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVzcG9uc2UoKTtcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBHZXRBbGxQcm9kc0J5UGF0aE5hbWUgfSBmcm9tICcuL2NvbmNyZXRlQ29tbWFuZHMvR2V0QWxsUHJvZHNCeVBhdGhOYW1lJztcclxuaW1wb3J0IHsgSW52b2tlciwgaW52b2tlcn0gZnJvbSAnLi9pbnZva2UvSW52b2tlcic7XHJcbmltcG9ydCB7IGFwcGNuIH0gZnJvbSAnLi9BcHBDb25uZWN0JztcclxuaW1wb3J0IHsgTWluaW1pemVSZXNwb25zZUxpc3RQcm9kcywgVHlwZUlucHV0T3ByaWhvZCB9IGZyb20gJy4vdHlwZXMvVHlwZXNGcm9udGVuZCc7XHJcbmltcG9ydCB7IEdldEFsbFByb2R1Y3RGb2xkZXIgfSBmcm9tICcuL2NvbmNyZXRlQ29tbWFuZHMvR2V0QWxsUHJvZHVjdEZvbGRlcic7XHJcbmltcG9ydCB7IEhvbGRlciwgUmVzdWx0SG9sZGVyIH0gZnJvbSAnLi9SZXN1bHRIb2xkZXIudHMvUmVzdWx0SG9sZGVyJztcclxuaW1wb3J0IHsgQ2xpZW50RGF0YSwgRmlsbFNlbGVjdENvbG9yLCBGaWxsU2VsZWN0TmFtZSwgfSBmcm9tICcuL3BhZ2UvY2xpZW50cyc7XHJcbmltcG9ydCB7IEdldEF0dHJpYnV0ZXNCeVBhdGhOYW1lIH0gZnJvbSAnLi9jb25jcmV0ZUNvbW1hbmRzL0dldEF0dHJpYnV0ZXNCeVBhdGhOYW1lJztcclxuaW1wb3J0IHsgQ21kU2VuZEZvcm1PcHJpaG9kIH0gZnJvbSAnLi9jb25jcmV0ZUNvbW1hbmRzL0NtZFNlbmRGb3JtT3ByaWhvZCc7XHJcbmltcG9ydCB7IGNsaWVudFRhYmxlT3B0aWhvZCB9IGZyb20gJy4uJztcclxuaW1wb3J0IHsgQ21kRGVsZXRlUm93VGFibGVPcHJpaG9kIH0gZnJvbSAnLi9jb25jcmV0ZUNvbW1hbmRzL0NtZERlbGV0ZVJvd1RhYmxlT3ByaWhvZCc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGRvbSA9ICgoKSA9PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQn9C+0LvRg9GH0LjRgtGMINC+0YIg0YHQtdGA0LLQtdGA0LAg0YHQv9C40YHQvtC6INGA0LDQt9C00LXRgNC+0LIg0JzQvtC50KHQutC70LDQtC0+0J/RgNC+0LTRg9C60YbQuNGPINCf0LvQuNGC0L7Rh9C60LAsXHJcbiAgICAgKiDQodC+0LfQtNCw0YLRjCDRgdC/0LjRgdC+0LogbGkgYSDRgNCw0LfQtNC10LvQvtCyLCDQvdCw0LfQvdCw0YfQuNGC0Ywg0LrQvtC70LHQtdC60Lgg0L/QvtC70YPRh9C10L3QuNGPINGA0LXQt9GD0LvRjNGC0LDRgtCwLFxyXG4gICAgICog0YDQtdC30YPQu9GM0YLQsNGCINC+0YLQtNCw0YLRjCDQvtCx0YrQtdC60YLRgyBSZXN1bHRIb2xkZXJcclxuICAgICAqIEBwYXJhbSBpZGNvbnRhaW5lciBpZCA8ZGl2PiDQutC+0L3RgtC10LnQvdC10YDQsCDQsiDQutC+0YLQvtGA0L7QvCDRgdC+0LfQtNCw0LTRg9GC0YHRjyDRgdC/0LjRgdC60LhcclxuICAgICAqIEBwYXJhbSBpbnZva2VyINC+0YLQv9GA0LDQstC40YLQtdC70Ywg0LrQvtC80LDQvdC0XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUxpc3RDYXRzKGlkY29udGFpbmVyOiBzdHJpbmcsIHRhYmxlOiBDbGllbnREYXRhLCBpbnZva2VyOiBJbnZva2VyKSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gJ2dldFByb2R1Y3RCeUNhdHMnOyBcclxuICAgICAgICBjb25zdCBjbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZGNvbnRhaW5lcik7XHJcbiAgICAgICAgaW52b2tlci5zZXRHZXRQcm9kQnlDYXRzKG5ldyBHZXRBbGxQcm9kc0J5UGF0aE5hbWUoYXBwY24pKTtcclxuICAgICAgICBpbnZva2VyLnNldEFsbFByb2R1Y3RzRm9sZGVyKG5ldyBHZXRBbGxQcm9kdWN0Rm9sZGVyKGFwcGNuKSk7XHJcbiAgICAgICAgY29uc3QgYXJyQ2F0czogc3RyaW5nW10gPSBhd2FpdCBpbnZva2VyLmdldEFsbFByb2RGb2xkZXIoJ2FsbFByb2RGb2xkZXInKTtcclxuICAgICAgICBjb25zdCByZXN1bHRIb2xkZXIgPSBuZXcgUmVzdWx0SG9sZGVyKHRhYmxlKTtcclxuICAgICAgICBhcnJDYXRzLmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdBJykgYXMgSFRNTEFuY2hvckVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGEuY2xhc3NMaXN0LmFkZCgnbGlzdC1ncm91cC1pdGVtJywgJ2xpc3QtZ3JvdXAtaXRlbS1hY3Rpb24nLCAnbGlzdC1ncm91cC1pdGVtLXN1Y2Nlc3MnKTtcclxuICAgICAgICAgICAgYS5ocmVmID0gdXJsO1xyXG4gICAgICAgICAgICBhLnRleHRDb250ZW50ID0gZWw7XHJcbiAgICAgICAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoKDxIVE1MRWxlbWVudD4gZS50YXJnZXQpLm5vZGVOYW1lID09PSAnQScpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVyaSA9ICg8SFRNTEVsZW1lbnQ+IGUudGFyZ2V0KS50ZXh0Q29udGVudCBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpbnZva2VyLtGBYWxsYmFja0dldFByb2RCeUNhdHM8TWluaW1pemVSZXNwb25zZUxpc3RQcm9kcz4odXJsLCB1cmkpIGFzIE1pbmltaXplUmVzcG9uc2VMaXN0UHJvZHNbXTtcclxuICAgICAgICAgICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaG9sZGVyID0gbmV3IEhvbGRlcjxNaW5pbWl6ZVJlc3BvbnNlTGlzdFByb2RzPih1cmksIHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCByZXN1bHRIb2xkZXIuZXhlY3V0ZTxNaW5pbWl6ZVJlc3BvbnNlTGlzdFByb2RzPihob2xkZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjbnQhLmFwcGVuZENoaWxkKGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCd0LDQv9C+0LvQvdC40YLRjCDQstGL0L/QsNC00LDRjtGJ0LjQuSDRgdC/0LjRgdC+0LouINCU0LDQvdC90YvQtSDQv9C+0LvRg9GH0LjRgtGMXHJcbiAgICAgKiDQvtGCINC80L7QudGB0LrQu9Cw0LQgLyBkYlxyXG4gICAgICogQHBhcmFtIHNlbGVjdCAtLSAoI3NlbC1wYXRoTmFtZSkg0L7QsdGK0LXQutGCINCy0YvQv9Cw0LTQsNGO0YnQtdCz0L4g0YHQv9C40YHQutCwXHJcbiAgICAgKiBAcGFyYW0gbGlzdGRhdGEgLS0g0YHQv9C40YHQvtC6INC30L3QsNGH0LXQvdC40Lkg0LTQu9GPINC30LDQv9C+0LvQvdC10L3QuNGPLiBcclxuICAgICAqICAgICAgICAgICAgICAgICDQn9C10YDQstGL0Lkg0LjQtyDRgdC/0LjRgdC60LAg0L/Rg9GB0YLQvtC5L9C90LUg0L/Rg9GB0YLQvtC5IChlbXB0eUZpcnN0OiBib29sZWFuKS5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gZmlsbFNlbGVjdFBhaHROYW1lc09wcmlob2Qoc2VsZWN0OiBIVE1MRWxlbWVudCwgbGlzdGRhdGE6IHN0cmluZ1tdLCBlbXB0eUZpcnN0OiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IGxpc3RkID0gWy4uLmxpc3RkYXRhXTtcclxuICAgICAgICBpZiAoZW1wdHlGaXJzdClcclxuICAgICAgICAgICAgbGlzdGQudW5zaGlmdCgnLS0tJyk7XHJcbiAgICAgICAgbGlzdGQuZm9yRWFjaCgodiwgaSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgnaWQnLCBgJHtzZWxlY3QuaWR9XyR7aX1gKTtcclxuICAgICAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2KTtcclxuICAgICAgICAgICAgY29uc3Qgc2hvcnRTcGxpdFBhdGhOYW1lID0gdi5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICBjb25zdCBzaG9ydFBuYW1lID0gc2hvcnRTcGxpdFBhdGhOYW1lLnNsaWNlKHNob3J0U3BsaXRQYXRoTmFtZS5sZW5ndGgtMSwgc2hvcnRTcGxpdFBhdGhOYW1lLmxlbmd0aCkuam9pbignLycpO1xyXG4gICAgICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBzaG9ydFBuYW1lO1xyXG4gICAgICAgICAgICBzZWxlY3Q/LmFwcGVuZENoaWxkKG9wdGlvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHNldENhbGxiYWNrU2VsZWN0KHNlbGVjdDogSFRNTEVsZW1lbnQsIGNhbGxiOiAodGhpczogSFRNTEVsZW1lbnQsIGV2OiBFdmVudCkgPT4gYW55KSB7XHJcbiAgICAgICAgc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGNhbGxiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkZWxDYWxsYmFja1NlbGVjdChzZWxlY3Q6IEhUTUxFbGVtZW50LCBjYWxsYjogKHRoaXM6IEhUTUxFbGVtZW50LCBldjogRXZlbnQpID0+IGFueSkge1xyXG4gICAgICAgIHNlbGVjdC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBjYWxsYik7XHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICBjb25zdCBjbWRTZW5kRGF0YUZvcm1PcHJpaG9kID0gbmV3IENtZFNlbmRGb3JtT3ByaWhvZChhcHBjbik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQntGC0L/RgNCw0LLQutCwINGE0L7RgNC80Ysg0YEg0LTQsNC90L3Ri9C80Lgg0L7Qv9GA0LjRhdC+0LTRi9Cy0LDQvdC40Y9cclxuICAgICAqIEBwYXJhbSBlIFxyXG4gICAgICovXHJcbiAgICBhc3luYyBmdW5jdGlvbiBjbGJTZW5kRm9ybU9wcmlob2QoZTogRXZlbnQpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgZm9ybSA9ICg8SFRNTEZvcm1FbGVtZW50PiBlLnRhcmdldCkuZm9ybSBhcyBIVE1MRm9ybUVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgbmFtZXMgPSBbXCJzZWxsaXN0LXBhdGhOYW1lXCIsIFwic2VsbGlzdC1uYW1lXCIsIFwic2VsbGlzdC1hcnRpY2xlXCIsIFwic2VsbGlzdC1jb2xvclwiLCBcInNlbGxpc3QtY291bnRcIiwgXCJzZWxsaXN0LXBob3RvXCJdO1xyXG4gICAgICAgIGNvbnN0IGZkYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgbGV0IGkgPSAwOyBcclxuICAgICAgICAgXHJcbiAgICAgICAgZm9yIChsZXQgZWwgb2YgZm9ybSkge1xyXG4gICAgICAgICAgICBpZiAoaSA+IDUpIGJyZWFrO1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gbmFtZXNbaV0uc3BsaXQoJy0nKVsxXTtcclxuICAgICAgICAgICAgaWYgKGVsIGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdHMgPSBlbC5jaGlsZE5vZGVzIGFzIE5vZGVMaXN0T2Y8SFRNTE9wdGlvbkVsZW1lbnQ+O1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB2IG9mIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodiBpbnN0YW5jZW9mIEhUTUxPcHRpb25FbGVtZW50ICYmIHYuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmZGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoZWwudHlwZSA9PT0gJ2ZpbGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxzID0gZWwuZmlsZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBmIG9mIGZscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmRhdGEuYXBwZW5kKCdmaWxlJywgZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBlbC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBmZGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGkgKz0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY3VyckRhdGUgPSBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKFwicnUtUlVcIiwge3RpbWVab25lOiBcIkV1cm9wZS9Nb3Njb3dcIn0pO1xyXG4gICAgICAgIGNvbnN0IGR0ID0gY3VyckRhdGUuc3BsaXQoJywnKTtcclxuICAgICAgICBmZGF0YS5hcHBlbmQoJ2RhdGUnLCBkdFswXS50cmltKCkpO1xyXG4gICAgICAgIGZkYXRhLmFwcGVuZCgndGltZScsIGR0WzFdLnRyaW0oKSk7XHJcblxyXG4gICAgICAgIGxvYWRJbWFnZSh0cnVlLCAnbG9hZHN0YXRlJyk7IFxyXG4gICAgICAgIHRleHRNZXNzYWdlKCdlcnJpbmZvJywgJ9Ce0YLQv9GA0LDQstC60LAg0LTQsNC90L3Ri9GFLi4uJyk7ICAgXHJcbiAgICAgICAgaW52b2tlci5zZXRTZW5kRm9ybU9wcmlob2QoY21kU2VuZERhdGFGb3JtT3ByaWhvZCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW52b2tlci5zZW5kRGF0YUZvcm1PcHJpaG9kPFR5cGVJbnB1dE9wcmlob2Q+KGZkYXRhKTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5sZW5ndGggPT09IDEgJiYgcmVzdWx0WzBdLmVycm9ycykge1xyXG4gICAgICAgICAgICBjb25zdCBtc2dhcnIgPSByZXN1bHRbMF0uZXJyb3JzLm1hcCh2ID0+IHtyZXR1cm4gdi5tZXNzYWdlfSkuam9pbignOyAnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxvYWRJbWFnZShmYWxzZSwgJ2xvYWRzdGF0ZScpO1xyXG4gICAgICAgICAgICB0ZXh0TWVzc2FnZSgnZXJyaW5mbycsIG1zZ2Fycik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9hZEltYWdlKGZhbHNlLCAnbG9hZHN0YXRlJyk7XHJcbiAgICAgICAgICAgIHRleHRNZXNzYWdlKCdlcnJpbmZvJyk7XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgaG9sZGVyVGFibGVPcHJoID0gbmV3IFJlc3VsdEhvbGRlcihjbGllbnRUYWJsZU9wdGlob2QpO1xyXG4gICAgICAgICAgICBjb25zdCBob2xkZXJUTyA9IG5ldyBIb2xkZXIoJ2hvbGRlckZpcnN0U3RhcnQnLCByZXN1bHQpO1xyXG4gICAgICAgICAgICBhd2FpdCBob2xkZXJUYWJsZU9wcmguZXhlY3V0ZShob2xkZXJUTyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGluZmlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWwtcGhvdG8nKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgICAgIGluZmlsZS52YWx1ZSA9ICcnO1xyXG4gICAgICAgICBcclxuICAgICAgICAvLyBmb3IgKGxldCBbaywgdl0gb2YgZmRhdGEuZW50cmllcygpKSB7Y29uc29sZS5sb2coaywgdil9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29tbWFuZEdldEF0dHJDb2xvck5hbWUgPSBuZXcgR2V0QXR0cmlidXRlc0J5UGF0aE5hbWUoYXBwY24pOyAvLyDQutC+0LzQsNC90LTQsCDQv9C+0LvRg9GH0LjRgtGMINGG0LLQtdGCLCDQuNC80Y8g0L/QviBuYW1lUGF0aFxyXG4gICAgY29uc3QgY29tbWFuZERlbFJvdyA9IG5ldyBDbWREZWxldGVSb3dUYWJsZU9wcmlob2QoYXBwY24pO1xyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0LvQu9Cx0LXQuiDQv9C+INCy0YvQsdC+0YDRgyDRjdC70LXQvNC10L3RgtCwINGB0L/QuNGB0LrQsCBcItCa0LDRgtC10LPQvtGA0LjQuFwiIFxyXG4gICAgICogQHBhcmFtIGUgRXZlbnQgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGZ1bmN0aW9uIGNsYlNlbFBhdGhOYW1lKGU6IEV2ZW50KSB7XHJcbiAgICAgICAgY29uc3Qgb3B0cyA9ICg8SFRNTEVsZW1lbnQ+IGUudGFyZ2V0KS5jaGlsZE5vZGVzIGFzIE5vZGVMaXN0T2Y8SFRNTE9wdGlvbkVsZW1lbnQ+O1xyXG4gICAgICAgIGludm9rZXIuc2V0R2V0QXR0cnNDb2xvck5hbWUoY29tbWFuZEdldEF0dHJDb2xvck5hbWUpO1xyXG4gICAgICAgIGZvciAobGV0IGVsIG9mIG9wdHMpIHtcclxuICAgICAgICAgICAgaWYgKGVsIGluc3RhbmNlb2YgSFRNTE9wdGlvbkVsZW1lbnQgJiYgZWwuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudENvbG9yID0gbmV3IEZpbGxTZWxlY3RDb2xvcignc2VsLWNvbG9yJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnROYW1lID0gbmV3IEZpbGxTZWxlY3ROYW1lKCdzZWwtbmFtZScpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW52b2tlci5nZXRBdHRyc0NvbG9yTmFtZShlbC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRIb2xkZXJDb2xvciA9IG5ldyBSZXN1bHRIb2xkZXIoY2xpZW50Q29sb3IpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0SG9sZGVyTmFtZSA9IG5ldyBSZXN1bHRIb2xkZXIoY2xpZW50TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBobGRDb2xvciA9IG5ldyBIb2xkZXIocmVzdWx0LnBhdGhOYW1lLCByZXN1bHQuY29sb3JzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhsZE5hbWUgPSBuZXcgSG9sZGVyKHJlc3VsdC5wYXRoTmFtZSwgcmVzdWx0Lm5hbWVzKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHJlc3VsdEhvbGRlckNvbG9yLmV4ZWN1dGUoaGxkQ29sb3IpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgcmVzdWx0SG9sZGVyTmFtZS5leGVjdXRlKGhsZE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBicmVhazsgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqINCh0L7Qt9C00LDRgtGMINC4INCy0LXRgNC90YPRgtGMINC60L7QvdGC0LXQudC90LXRgNC90YvQuSBIdG1sINGN0LvQtdC80LXQvdGCXHJcbiAgICAgKiBAcGFyYW0gaWQgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKGlkOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IGNudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuICAgICAgICByZXR1cm4gKGNudCkgPyBjbnQgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KLQsNCx0LvQuNGG0LAg0L7Qv9GA0LjRhdC+0LTQvtCy0LDQvdC40Y9cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZnVuY3Rpb24gbWFrZU9wcmlob2RUYWJsZTxUPihhcnJEYXRhOiBUW10pOiBQcm9taXNlPEhUTUxUYWJsZUVsZW1lbnQ+IHtcclxuICAgICAgICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XHJcbiAgICAgICAgdGFibGUuY2xhc3NMaXN0LmFkZCgndGFibGUnLCAndGFibGUtc3RyaXBlZCcsICd0YWJsZS1ib3JkZXJlZCcsICd0YWJsZS1zbScsICdjdXN0b20tc3R5bGUtdGFibGUnKTtcclxuICAgICAgICAvLyAtLS0tLS0tLS0tINGI0LXRjyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIGNvbnN0IHRoZWFkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGhlYWQnKTtcclxuICAgICAgICB0aGVhZC5jbGFzc0xpc3QuYWRkKCd0aGVhZC1saWdodCcpO1xyXG4gICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTsgLy8obmFtZSwgY29sb3IsIGNvdW50LCBwYXRoTmFtZSwgZGF0ZSwgdGltZSwgcGhvdG9QYXRoKVxyXG4gICAgICAgIGNvbnN0IHRpdGxlVGFibGUgPSBbJ2lkJywgJ9C90LDQt9Cy0LDQvdC40LUnLCAn0YbQstC10YInLCAn0LDRgNGC0LjQutGD0LsnLCAn0LrQvtC7LdCy0L4nLCAn0LjQtyDQutCw0YLQtdCz0L7RgNC40LgnLCAn0LTQsNGC0LAnLCAn0LLRgNC10LzRjycsICcnXTtcclxuICAgICAgICB0aXRsZVRhYmxlLmZvckVhY2goKHYpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xyXG4gICAgICAgICAgICB0aC50ZXh0Q29udGVudCA9IHY7XHJcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoZWFkLmFwcGVuZENoaWxkKHRyKTtcclxuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0aGVhZCk7XHJcbiAgICAgICAgY29uc3QgbGFzdFZhbFBhdGhOYW1lID0gKHBhdGhOYW1lOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICBjb25zdCBzcGwgPSBwYXRoTmFtZS5zcGxpdCgnLycpO1xyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSBzcGwubGVuZ3RoO1xyXG4gICAgICAgICAgICByZXR1cm4gJy4uLycgKyBzcGwuc2xpY2UobGVuLTEsIGxlbikuam9pbignLycpOyBcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAtLS0tLS0tLS0tINGC0LXQu9C+IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBjb25zdCB0Ym9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XHJcbiAgICAgICAgYXJyRGF0YS5mb3JFYWNoKCh2YWwpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHZhbCBhcyBUeXBlSW5wdXRPcHJpaG9kO1xyXG4gICAgICAgICAgICBjb25zdCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgICAgICAgIHRyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtIGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dJZCA9IGVsZW0uaWQuc3BsaXQoJ18nKVsxXTtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VyLnNldENtZERlbGV0ZVJvdyhjb21tYW5kRGVsUm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzRGVsID0gYXdhaXQgaW52b2tlci5zZW5kRGVsZXRlUm93QnlJZDxUeXBlSW5wdXRPcHJpaG9kPihyb3dJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsSG9sZGVyID0gbmV3IEhvbGRlcignZGVsSCcrcm93SWQsIHJlc0RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzRGVsSG9sZGVyID0gbmV3IFJlc3VsdEhvbGRlcihjbGllbnRUYWJsZU9wdGlob2QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlc0RlbEhvbGRlci5leGVjdXRlKGRlbEhvbGRlcik7XHJcbiAgICAgICAgICAgICAgICB9ICAgXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgY2VsbE5hbWUgb2YgW2RhdGEucHJvZHVjdHNfaWQsIGRhdGEubmFtZSB8fCAnJywgZGF0YS5jb2xvciB8fCAnJywgZGF0YS5hcnRpY2xlIHx8ICcnLCBkYXRhLmNvdW50IHx8ICcnLCBcclxuICAgICAgICAgICAgICAgIGxhc3RWYWxQYXRoTmFtZShkYXRhLnBhdGhOYW1lKSwgZGF0YS5kYXRlIHx8ICcnLCBkYXRhLnRpbWUgfHwgJycsIF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGQudGV4dENvbnRlbnQgPSAnJytjZWxsTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0EnKSBhcyBIVE1MQW5jaG9yRWxlbWVudDtcclxuICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ2lkJywgYGRlbHJvd18ke2RhdGEuaWR9YCk7XHJcbiAgICAgICAgICAgIGEuY2xhc3NMaXN0LmFkZCgnbGlzdC1ncm91cC1pdGVtJywgJ2xpc3QtZ3JvdXAtaXRlbS1hY3Rpb24nLCAnbGlzdC1ncm91cC1pdGVtLWRhbmdlcicpO1xyXG4gICAgICAgICAgICBhLnRleHRDb250ZW50ID0gJ9GD0LTQsNC70LjRgtGMJztcclxuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKHRyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0Ym9keSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0YWJsZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXN5bmMgZnVuY3Rpb24gYW5zd2VyT3ByaWhvZChfY250OiBIVE1MU3BhbkVsZW1lbnQsIGFycmRhdGE6IGFueVtdKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2RvbS5hbnN3ZXJPcHJpaG9kKCk6XFxuJywgYXJyZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0KHQvtC30LTQsNGC0Ywg0Lgg0LLQtdGA0L3Rg9GC0Ywg0YLQsNCx0LvQuNGG0YMg0LTQsNC90L3Ri9GFXHJcbiAgICAgKiBAcGFyYW0gYXJyRGF0YSDQvNCw0YHRgdC40LIg0YEg0LTQsNC90L3Ri9C80LhcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBhc3luYyBmdW5jdGlvbiBtYWtlVGFibGU8VD4oYXJyRGF0YTogVFtdKTogUHJvbWlzZTxIVE1MVGFibGVFbGVtZW50PiB7XHJcbiAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xyXG4gICAgICAgIHRhYmxlLmNsYXNzTGlzdC5hZGQoJ3RhYmxlJywgJ3RhYmxlLXN0cmlwZWQnLCAndGFibGUtc20nLCAnY3VzdG9tLXN0eWxlLXRhYmxlJyk7XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLSDRiNC10Y8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBjb25zdCB0aGVhZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyk7XHJcbiAgICAgICAgdGhlYWQuY2xhc3NMaXN0LmFkZCgndGhlYWQtbGlnaHQnKTtcclxuICAgICAgICBjb25zdCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XHJcbiAgICAgICAgY29uc3QgdGl0bGVUYWJsZSA9IFsn4oSWJywgJ9C90LDQt9Cy0LDQvdC40LUnLCAn0YbQstC10YInLCAn0LDRgNGC0LjQutC70YwnLCAn0LrQvtC0JywgJ9C60LDRgtC10LPQvtGA0LjRjycsXTtcclxuICAgICAgICB0aXRsZVRhYmxlLmZvckVhY2goKHYpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aCcpO1xyXG4gICAgICAgICAgICB0aC50ZXh0Q29udGVudCA9IHY7XHJcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoZWFkLmFwcGVuZENoaWxkKHRyKTtcclxuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0aGVhZCk7XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLSDRgtC10LvQviAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgY29uc3QgdGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xyXG4gICAgICAgIGFyckRhdGEuZm9yRWFjaCgodmFsLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB2YWwgYXMgTWluaW1pemVSZXNwb25zZUxpc3RQcm9kcztcclxuICAgICAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBjZWxsTmFtZSBvZiBbJycrKGkrMSksIGRhdGEubmFtZSB8fCAnJywgZGF0YS5jb2xvciB8fCAnJywgZGF0YS5hcnRpY2xlIHx8ICcnLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29kZSB8fCAnJywgZGF0YS5wYXRoTmFtZSB8fCAnJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGQudGV4dENvbnRlbnQgPSBjZWxsTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKHRyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0Ym9keSk7XHJcbiAgICAgICAgcmV0dXJuIHRhYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0Y3Qu9C10LzQtdC90YLRgyDRgSDQvtC/0YDQtdC00LXQu9C10L3QvdGL0LwgaWQg0L3QsNC30L3QsNGH0LjRgtGMINGC0LXQutGB0YJcclxuICAgICAqIEBwYXJhbSB0ZXh0IG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdGV4dE1lc3NhZ2UoaWQ6IHN0cmluZywgdGV4dDogc3RyaW5nID0gJycpIHtcclxuICAgICAgICBjb25zdCB0ZXh0ZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICAgICAgdGV4dGVsIS50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQstC60LvRjtGH0LjRgtGML9Cy0YvQutC70Y7Rh9C40YLRjCDQutCw0YDRgtC40L3QutGDINC30LDQs9GA0YPQt9C60LhcclxuICAgICAqIEBwYXJhbSBvbiBcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbG9hZEltYWdlKG9uOiBib29sZWFuLCBpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgbG9hZEltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuICAgICAgICBpZiAob24pIHtcclxuICAgICAgICAgICAgbG9hZEltZz8uY2xhc3NMaXN0LnJlbW92ZSgnbm9sb2Fkc3RhdGUnKTtcclxuICAgICAgICAgICAgbG9hZEltZz8uY2xhc3NMaXN0LmFkZCgnbG9hZHN0YXRlJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9hZEltZz8uY2xhc3NMaXN0LnJlbW92ZSgnbG9hZHN0YXRlJyk7XHJcbiAgICAgICAgICAgIGxvYWRJbWc/LmNsYXNzTGlzdC5hZGQoJ25vbG9hZHN0YXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHB1YmxpY0FwaSA9IHsgXHJcbiAgICAgICAgY3JlYXRlTGlzdENhdHMsIGNyZWF0ZUNvbnRhaW5lciwgXHJcbiAgICAgICAgbWFrZVRhYmxlLCBmaWxsU2VsZWN0UGFodE5hbWVzT3ByaWhvZCxcclxuICAgICAgICBzZXRDYWxsYmFja1NlbGVjdCwgZGVsQ2FsbGJhY2tTZWxlY3QsIFxyXG4gICAgICAgIGNsYlNlbFBhdGhOYW1lLCBjbGJTZW5kRm9ybU9wcmlob2QsXHJcbiAgICAgICAgbG9hZEltYWdlLCB0ZXh0TWVzc2FnZSwgbWFrZU9wcmlob2RUYWJsZSxcclxuICAgICAgICBhbnN3ZXJPcHJpaG9kLFxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgcmV0dXJuIHB1YmxpY0FwaTtcclxufSkoKTtcclxuIiwiaW1wb3J0IHsgQmFzZUNvbW1hbmQgfSBmcm9tIFwiLi4vY29uY3JldGVDb21tYW5kcy9CYXNlQ29tbWFuZFwiO1xyXG5pbXBvcnQgeyBEb09wcmlob2QsIE1pbmltaXplUmVzcG9uc2VMaXN0UHJvZHMgfSBmcm9tIFwiLi4vdHlwZXMvVHlwZXNGcm9udGVuZFwiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVzQnlQYXRoTmFtZSB9IGZyb20gJy4uL3R5cGVzL0F0dHJpYnV0ZXNCeVBhdGhOYW1lJztcclxuXHJcblxyXG4vKipcclxuICog0J7RgtC/0YDQsNCy0LjRgtC10LvRjCDQutC+0LzQsNC90LQuINCh0L7QtNC10YDQttC40YIg0LrQvtC80LDQvdC00Ysg0L/RgNC40LvQvtC20LXQvdC40Y8uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW52b2tlciB7XHJcbiAgICBwcml2YXRlIGFsbFByb2R1Y3RzRm9sZGVyOiBCYXNlQ29tbWFuZCB8IG51bGwgPSBudWxsOyAgIC8vINC60LDRgtC10LPQvtGA0LjQuCAo0YDQsNC30LTQtdC70YspINC/0YDQvtC00YPQutGG0LjQuSDQnNC+0LnQodC60LvQsNC0XHJcbiAgICBwcml2YXRlIHByb2R1Y3RCeUNhdHM6IEJhc2VDb21tYW5kIHwgbnVsbCA9IG51bGw7ICAgICAgIC8vINGB0L/QuNGB0L7QuiDRgtC+0LLQsNGA0L7QsiDQvtC/0YDQtdC00LXQu9C10L3QvdC+0Lkg0LrQsNGC0LXQs9C+0YDQuNC4ICjRgNCw0LfQtNC10LvQsCDQnNC+0LnQodC60LvQsNC0KVxyXG4gICAgcHJpdmF0ZSBjb2xvck5hbWVCeUNhdGVnb3J5OiBCYXNlQ29tbWFuZCB8IG51bGwgPSBudWxsOyAvLyDQsNGC0YDQuNCx0YPRgtGLINGG0LLQtdGC0L7QsiDQuCDQvdCw0LfQstCw0L3QuNC5INC/0L4g0LLRi9Cx0YDQsNC90L3QvtC5IChzZWxlY3QgaHRtbCkg0LrQsNGC0LXQs9C+0YDQuNC4XHJcbiAgICBwcml2YXRlIHNlbmRGb3JtT3ByaWhvZDogQmFzZUNvbW1hbmQgfCBudWxsID0gbnVsbDsgICAgIC8vINC+0YLQv9GA0LDQstC40YLRjCDRhNC+0YDQvNGDINC00LvRjyDQtNC+0LHQsNCy0LvQtdC90LjRjyDRgtC+0LLQsNGA0LAg0LIg0YLQsNCx0LvQuNGG0YMgXHJcbiAgICBwcml2YXRlIGdldERhdGFUYWJsZU9wcmlob2Q6IEJhc2VDb21tYW5kIHwgbnVsbCA9IG51bGw7IC8vINC/0L7Qu9GD0YfQuNGC0Ywg0YLQsNCx0LvQuNGG0YMg0LTQvtCx0LDQstC70LXQvdC90YvRhSDQv9GA0L7QtNGD0LrRgtC+0LIg0LTQu9GPINC+0L/RgNC40YXQvtC00L7QstCw0L3QuNGPXHJcbiAgICBwcml2YXRlIGRlbGV0ZVJvd0Zyb21UYWJsZTogQmFzZUNvbW1hbmQgfCBudWxsID0gbnVsbDsgIC8vINGD0LTQsNC70LjRgtGMINGB0YLRgNC+0LrRgyDQuNC3INGC0LDQsdC70LjRhtGLINC+0L/RgNC40YXQvtC00L7QstCw0L3QuNC5XHJcbiAgICBwcml2YXRlIG9wcmlob2Q6IEJhc2VDb21tYW5kIHwgbnVsbCA9IG51bGw7ICAgICAgICAgICAgIC8vINC+0L/RgNC40YXQvtC00L7QstCw0YLRjFxyXG5cclxuICAgICAvKipcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBAcGFyYW0gY29tbWFuZCDQntGC0L/RgNCw0LLQuNGC0Ywg0LfQsNC/0L7Qu9C90LXQvdC90YPRjiDRhNC+0YDQvNGDINGG0LLQtdGCINC40LzRjyDQutC+0Lst0LLQviDRhNC+0YLQvlxyXG4gICAgICog0L3QsCDRgdC10YDQstC10YAuINC/0L7Qu9GD0YfQuNGC0Ywg0YLQsNCx0LvQuNGG0YMuXHJcbiAgICAgKi9cclxuICAgICBzZXRTZW5kRm9ybU9wcmlob2QoY29tbWFuZDogQmFzZUNvbW1hbmQpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2VuZEZvcm1PcHJpaG9kKVxyXG4gICAgICAgICAgICB0aGlzLnNlbmRGb3JtT3ByaWhvZCA9IGNvbW1hbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2VuZERhdGFGb3JtT3ByaWhvZDxUPihmb3JtRGF0YTogRm9ybURhdGEpOiBQcm9taXNlPFRbXT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICh0aGlzLnNlbmRGb3JtT3ByaWhvZCkgPyBhd2FpdCB0aGlzLnNlbmRGb3JtT3ByaWhvZC5leGVjdXRlPFQ+KGZvcm1EYXRhKSA6IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIChyZXN1bHQpID8gcmVzdWx0IDogW107XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIEBwYXJhbSBjb21tYW5kINCe0L/RgNC40YXQvtC00L7QstCw0YLRjCDRgtCw0LHQu9C40YbRgyDQsiDQnNC+0LnQodC60LvQsNC0XHJcbiAgICAgKi9cclxuICAgIHNldENvbW1hbmRPcHJpaG9kKGNvbW1hbmQ6IEJhc2VDb21tYW5kKSB7XHJcbiAgICAgICAgaWYgKGNvbW1hbmQpXHJcbiAgICAgICAgICAgIHRoaXMub3ByaWhvZCA9IGNvbW1hbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2VuZE9wcmlob2Q8VD4ob3ByaWhvZERhdGE6IERvT3ByaWhvZCk6IFByb21pc2U8VFtdPiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKHRoaXMub3ByaWhvZCkgPyBhd2FpdCB0aGlzLm9wcmlob2QuZXhlY3V0ZTxUPihvcHJpaG9kRGF0YSkgOiBudWxsO1xyXG4gICAgICAgIHJldHVybiAocmVzdWx0KSA/IHJlc3VsdCA6IFtdO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICogQHBhcmFtIGNvbW1hbmQg0YPQtNCw0LvQuNGC0Ywg0YHRgtGA0L7QutGDINC40Lcg0YLQsNCx0LvQuNGG0Ysg0L7Qv9GA0LjRhdC+0LTQvtCy0LDQvdC40LlcclxuICAgICAqL1xyXG4gICAgIHNldENtZERlbGV0ZVJvdyhjb21tYW5kOiBCYXNlQ29tbWFuZCkge1xyXG4gICAgICAgIGlmIChjb21tYW5kKVxyXG4gICAgICAgICAgICB0aGlzLmRlbGV0ZVJvd0Zyb21UYWJsZSA9IGNvbW1hbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2VuZERlbGV0ZVJvd0J5SWQ8VD4ocm93SWQ6IHN0cmluZyk6IFByb21pc2U8VFtdPiB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKHRoaXMuZGVsZXRlUm93RnJvbVRhYmxlKSA/IGF3YWl0IHRoaXMuZGVsZXRlUm93RnJvbVRhYmxlLmV4ZWN1dGU8VD4ocm93SWQpIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gKHJlc3VsdCkgPyByZXN1bHQgOiBbXTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIEBwYXJhbSBjb21tYW5kINC/0L7Qu9GD0YfQuNGC0Ywg0YLQsNCx0LvQuNGG0YMg0LTQvtCx0LDQstC70LXQvdC90YvRhSDQv9GA0L7QtNGD0LrRgtC+0LIg0LTQu9GPINC+0L/RgNC40YXQvtC00L7QstCw0L3QuNGPXHJcbiAgICAgKi9cclxuICAgICBzZXRHZXRBbGxEYXRhVGFibGVPcHJpaG9kKGNvbW1hbmQ6IEJhc2VDb21tYW5kKSB7XHJcbiAgICAgICAgaWYgKGNvbW1hbmQpXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0RGF0YVRhYmxlT3ByaWhvZCA9IGNvbW1hbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0QWxsRGF0YVRhYmxlT3ByaWhvZDxUPigpOiBQcm9taXNlPFRbXT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICh0aGlzLmdldERhdGFUYWJsZU9wcmlob2QpID8gYXdhaXQgdGhpcy5nZXREYXRhVGFibGVPcHJpaG9kLmV4ZWN1dGU8VD4oKSA6IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIChyZXN1bHQpID8gcmVzdWx0IDogW107XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIEBwYXJhbSBjb21tYW5kINCj0YHRgtCw0L3QvtCy0LjRgtGMINC60L7QvNCw0L3QtNGDINC/0L7Qu9GD0YfQtdC90LjRjyDQsNGC0YDQuNCx0YPRgtC+0LI6INC40LzRjywg0YbQstC10YIg0L/QviBwYXRoTmFtZSBcclxuICAgICAqIHR5cGU6IEF0dHJpYnV0ZXNCeVBhdGhOYW1lXHJcbiAgICAgKiAo0LLRi9Cx0YDQsNC90L3Ri9C5INGN0LvQtdC80LXQvdGCINGB0L/QuNGB0LrQsCBzZWxlY3QgaHRtbCBcItCa0LDRgtC10LPQvtGA0LjQuFwiKVxyXG4gICAgICovXHJcbiAgICBzZXRHZXRBdHRyc0NvbG9yTmFtZShjb21tYW5kOiBCYXNlQ29tbWFuZCkge1xyXG4gICAgICAgIHRoaXMuY29sb3JOYW1lQnlDYXRlZ29yeSA9IGNvbW1hbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0QXR0cnNDb2xvck5hbWUocGF0aE5hbWU6IHN0cmluZyk6IFByb21pc2U8QXR0cmlidXRlc0J5UGF0aE5hbWU+IHtcclxuICAgICAgICBsZXQgYXR0cnMgPSB7cGF0aE5hbWU6IHBhdGhOYW1lLCBuYW1lczogWycnXSwgY29sb3JzOiBbJyddfVxyXG4gICAgICAgIGlmICh0aGlzLmNvbG9yTmFtZUJ5Q2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jb2xvck5hbWVCeUNhdGVnb3J5LmV4ZWN1dGU8QXR0cmlidXRlc0J5UGF0aE5hbWU+KHBhdGhOYW1lKTtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHQubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgICBcclxuICAgICAgICByZXR1cm4gYXR0cnM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIEBwYXJhbSBjb21tYW5kINCj0YHRgtCw0L3QvtCy0LjRgtGMINC60L7QvNCw0L3QtNGDINC/0L7Qu9GD0YfQtdC90LjRjyDQstGB0LXRhSDRgtC+0LLQsNGA0L7QslxyXG4gICAgICog0LjQtyDQvNC+0LXQs9C+INGB0LrQu9Cw0LTQsCDQv9C+INC+0L/RgNC10LTQtdC70LXQvdC90L7QvNGDIFVSSVxyXG4gICAgICovXHJcbiAgICBzZXRHZXRQcm9kQnlDYXRzKGNvbW1hbmQ6IEJhc2VDb21tYW5kKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnByb2R1Y3RCeUNhdHMpXHJcbiAgICAgICAgICAgIHRoaXMucHJvZHVjdEJ5Q2F0cyA9IGNvbW1hbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMg0YFhbGxiYWNrR2V0UHJvZEJ5Q2F0czxUIGV4dGVuZHMgTWluaW1pemVSZXNwb25zZUxpc3RQcm9kcz4odXJsOiBzdHJpbmcsIHVyaTogc3RyaW5nKTogUHJvbWlzZTxUW10+IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSAodGhpcy5wcm9kdWN0QnlDYXRzKSA/IGF3YWl0IHRoaXMucHJvZHVjdEJ5Q2F0cy5leGVjdXRlPFQ+KHVybCwgdXJpKSA6IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIChyZXN1bHQpID8gcmVzdWx0IDogW107XHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICAvKipcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIEBwYXJhbSBjb21tYW5kINCj0YHRgtCw0L3QvtCy0LjRgtGMINC60L7QvNCw0L3QtNGDINC/0L7Qu9GD0YfQtdC90LjRj1xyXG4gICAgICog0LLRgdC10YUg0LrQsNGC0LXQs9C+0YDQuNC5ICjRgNCw0LfQtNC10LvQvtCyKSDQv9GA0L7QtNGD0LrRhtC40Lgg0JzQvtC50KHQutC70LDQtFxyXG4gICAgICovXHJcbiAgICBzZXRBbGxQcm9kdWN0c0ZvbGRlcihjb21tYW5kOiBCYXNlQ29tbWFuZCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5hbGxQcm9kdWN0c0ZvbGRlcilcclxuICAgICAgICAgICAgdGhpcy5hbGxQcm9kdWN0c0ZvbGRlciA9IGNvbW1hbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0QWxsUHJvZEZvbGRlcih1cmk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+e1xyXG4gICAgICAgIHJldHVybiAodGhpcy5hbGxQcm9kdWN0c0ZvbGRlcikgPyBhd2FpdCB0aGlzLmFsbFByb2R1Y3RzRm9sZGVyLmV4ZWN1dGUodXJpKSA6IFtdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaW52b2tlciA9IG5ldyBJbnZva2VyKCk7IiwiaW1wb3J0IHsgSG9sZGVyIH0gZnJvbSBcIi4uL1Jlc3VsdEhvbGRlci50cy9SZXN1bHRIb2xkZXJcIjtcclxuaW1wb3J0IHsgZG9tIH0gZnJvbSBcIi4uL2RvbVwiO1xyXG5pbXBvcnQgeyBDbGVhcmFibGUgfSBmcm9tIFwiLi4vdHlwZXMvQ2xlYXJhYmxlXCI7XHJcbi8vIGltcG9ydCB7IE1pbmltaXplUmVzcG9uc2VMaXN0UHJvZHMgfSBmcm9tIFwiLi4vdHlwZXMvVHlwZXNGcm9udGVuZFwiO1xyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbGllbnREYXRhIHtcclxuICAgIGNudDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDsgIC8vINC00LjQvdCw0LzQuNGH0LXRgdC60LjQuSBkaXYg0LrQvtC90YLQtdC50L3QtdGAINC00LvRjyDRgtCw0LHQu9C40YbRiyBcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgYyA9IGRvbS5jcmVhdGVDb250YWluZXIoaWQpO1xyXG4gICAgICAgIHRoaXMuY250ID0gKGMpID8gYyA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYWJzdHJhY3QgZXhlY3V0ZUNhbGxiYWNrPFQ+KGhvbGRlcjogSG9sZGVyPFQ+KTogUHJvbWlzZTx2b2lkPjtcclxuXHJcbiAgICBmaWxsQ29udGFpbmVyKG9iajogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jbnQpIFxyXG4gICAgICAgICAgICB0aGlzLmNudC5hcHBlbmRDaGlsZChvYmopO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyQ29udGFpbmVyKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNudClcclxuICAgICAgICAgICAgZm9yIChsZXQgZG9tRWxlbSBvZiBBcnJheS5mcm9tKHRoaXMuY250LmNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbnQucmVtb3ZlQ2hpbGQoZG9tRWxlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqINCf0L7RgNGP0LTQvtC6OiDRjdC60LfQvNC/0LsgQ2xpZW50RGF0YSDRg9C/0YDQsNCy0LvRj9C10YIg0YHQstC+0LjQvCDRgdC+0LTQtdGA0LbQuNC80YvQvC5cclxuICog0YMg0L3QtdCz0L4g0LXRgdGC0Ywg0L7QsdGK0LXQutGCLdC60L7QvdGC0LXQudC90LXRgCBodG1sINC4INC60L7Qu9Cx0LXQui3QvNC10YLQvtC0LlxyXG4gKiDQodC90LDRh9Cw0LvQsCDQs9C00LUt0YLQviDQv9C+0LvRg9GH0LDRjiDQtNCw0L3QvdGL0LUg0LjQtyDRgdC10YDQstC10YDQsCDQstGL0LfQvtCy0L7QvCDQutC+0LzQsNC90LTRiyBDb21tYW5kLCDQtNCw0L3QvdGL0LUg0L/RgNC10LLRgNCw0YnQsNGOINCyXHJcbiAqINC+0LHRitC10LrRgiBIb2xkZXI8VD4sINC/0L7RgtC+0Lwg0LXQs9C+INC+0YLQtNCw0Y4g0L3QsCDQstGL0L/QvtC70L3QtdC90LjQtSBSZXN1bHRIb2xkZXIuZXhlY3V0ZShob2xkZXIpLFxyXG4gKiDQv9C+0YHQu9C10LTQvdC40Lkg0LIgINGB0LLQvtGOINC+0YfQtdGA0LXQtNGMINCy0YvQt9GL0LLQsNC10YIg0LzQtdGC0L7QtCBleGVjdXRlQ2FsbGJhY2s8VD4oaG9sZGVyOiBIb2xkZXI8VD4pXHJcbiAqINGDIENsaWVudERhdGFcclxuICovXHJcblxyXG5leHBvcnQgY2xhc3MgVGFibGVQcm9kdWN0cyBleHRlbmRzIENsaWVudERhdGEgaW1wbGVtZW50cyBDbGVhcmFibGUge1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvciAoaWQ6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKGlkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrLiDQodC+0LfQtNCw0YLRjCDRgtCw0LHQu9C40YbRgy4gXHJcbiAgICAgKiBAcGFyYW0gaG9sZGVyINGA0LXQt9GD0LvRjNGC0LDRgiDQuNC3INC80L7QudGB0LrQu9Cw0LRcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZXhlY3V0ZUNhbGxiYWNrPFQ+KGhvbGRlcjogSG9sZGVyPFQ+KSB7XHJcbiAgICAgICAgY29uc3QgYXJyZGF0YSA9IGhvbGRlci5kYXRhLmFyckRhdGE7XHJcbiAgICAgICAgY29uc3QgdGJsID0gYXdhaXQgZG9tLm1ha2VUYWJsZTxUPihhcnJkYXRhKTtcclxuICAgICAgICB0aGlzLmNsZWFyQ29udGFpbmVyKCk7XHJcbiAgICAgICAgdGhpcy5maWxsQ29udGFpbmVyKHRibCk7XHJcbiAgICAgICAgY29uc3Qgd2hvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lkLWxhYmVsLXRhYmxlLWxpc3QtZnJvbScpO1xyXG4gICAgICAgIHdobyEudGV4dENvbnRlbnQgPSBob2xkZXIubmFtZSArIGAgW9Cy0YHQtdCz0L46ICR7YXJyZGF0YS5sZW5ndGh9XWA7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICog0KHQvtC30LTQsNC10YIg0YLQsNCx0LvQuNGG0YMg0L7Qv9GA0LjRhdC+0LTQvtCy0LDQvdC40Y9cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBbGxEYXRhVGFibGVPcHJpaG9kIGV4dGVuZHMgQ2xpZW50RGF0YSBpbXBsZW1lbnRzIENsZWFyYWJsZSB7XHJcbiAgICBcclxuICAgIGNvbnN0cnVjdG9yIChpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2suINCh0L7Qt9C00LDRgtGMINGC0LDQsdC70LjRhtGDLiBcclxuICAgICAqIEBwYXJhbSBob2xkZXIg0YDQtdC30YPQu9GM0YLQsNGCINCy0LXRgNC90YPQstGILiDRgtCw0LHQu9C40YbQsFxyXG4gICAgICovXHJcbiAgICBhc3luYyBleGVjdXRlQ2FsbGJhY2s8VD4oaG9sZGVyOiBIb2xkZXI8VD4pIHtcclxuICAgICAgICBjb25zdCBhcnJkYXRhID0gaG9sZGVyLmRhdGEuYXJyRGF0YTtcclxuICAgICAgICBjb25zdCB0YWJsZSA9IGF3YWl0IGRvbS5tYWtlT3ByaWhvZFRhYmxlPFQ+KGFycmRhdGEpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJDb250YWluZXIoKTtcclxuICAgICAgICB0aGlzLmZpbGxDb250YWluZXIodGFibGUpO1xyXG4gICAgICAgIC8vIGNvbnN0IHdobyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpZC1sYWJlbC10YWJsZS1saXN0LWZyb20nKTtcclxuICAgICAgICAvLyB3aG8hLnRleHRDb250ZW50ID0gaG9sZGVyLm5hbWUgKyBgIFvQstGB0LXQs9C+OiAke2FycmRhdGEubGVuZ3RofV1gO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiDQndCw0L/QvtC70L3Rj9C10YIgaHRtbCBzZWxlY3QgXCLQmtCw0YLQtdCz0L7RgNC40LhcIiBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaWxsU2VsZWN0UGF0aE5hbWVzIGV4dGVuZHMgQ2xpZW50RGF0YSBpbXBsZW1lbnRzIENsZWFyYWJsZSB7XHJcbiAgICAgXHJcbiAgICBjb25zdHJ1Y3RvcihpZHNlbDogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoaWRzZWwpOyAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGV4ZWN1dGVDYWxsYmFjazxUPihob2xkZXI6IEhvbGRlcjxUPik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IGFycmRhdGEgPSBob2xkZXIuZGF0YS5hcnJEYXRhIGFzIHN0cmluZ1tdO1xyXG4gICAgICAgIGlmICh0aGlzLmNudCkge1xyXG4gICAgICAgICAgICBkb20uZGVsQ2FsbGJhY2tTZWxlY3QodGhpcy5jbnQsIGRvbS5jbGJTZWxQYXRoTmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDb250YWluZXIoKTtcclxuICAgICAgICAgICAgYXdhaXQgZG9tLmZpbGxTZWxlY3RQYWh0TmFtZXNPcHJpaG9kKHRoaXMuY250LCBhcnJkYXRhKVxyXG4gICAgICAgICAgICBkb20uc2V0Q2FsbGJhY2tTZWxlY3QodGhpcy5jbnQsIGRvbS5jbGJTZWxQYXRoTmFtZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRVJST1IgSU4gZXhlY3V0ZUNhbGxiYWNrPFQ+KGhvbGRlcikgLS0+IGNsYXNzIEZpbGxTZWxlY3RQYXRoTmFtZXMgXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqINCe0YLQstC10YIg0YHQtdGA0LLQtdGA0LAg0L/QvtGB0LvQtSDQvtC/0YDQuNGF0L7QtNC+0LLQsNC90LjRjyBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBbnN3ZXJPcHJpaG9kIGV4dGVuZHMgQ2xpZW50RGF0YSBpbXBsZW1lbnRzIENsZWFyYWJsZSB7XHJcbiAgICAgXHJcbiAgICBjb25zdHJ1Y3RvcihpZHNlbDogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoaWRzZWwpOyAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGV4ZWN1dGVDYWxsYmFjazxUPihob2xkZXI6IEhvbGRlcjxUPik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IGFycmRhdGEgPSBob2xkZXIuZGF0YS5hcnJEYXRhIGFzIHN0cmluZ1tdO1xyXG4gICAgICAgIGlmICh0aGlzLmNudCkge1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNsZWFyQ29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IGRvbS5hbnN3ZXJPcHJpaG9kKHRoaXMuY250LCBhcnJkYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFUlJPUiBJTiBleGVjdXRlQ2FsbGJhY2s8VD4oaG9sZGVyKSAtLT4gY2xhc3MgQW5zd2VyT3ByaWhvZCBcIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqINCd0LDQv9C+0LvQvdGP0LXRgiBodG1sIHNlbGVjdCBcItCm0LLQtdGCXCIgXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmlsbFNlbGVjdENvbG9yIGV4dGVuZHMgQ2xpZW50RGF0YSBpbXBsZW1lbnRzIENsZWFyYWJsZSB7XHJcbiAgICAgXHJcbiAgICBjb25zdHJ1Y3RvcihpZHNlbDogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoaWRzZWwpOyAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGV4ZWN1dGVDYWxsYmFjazxUPihob2xkZXI6IEhvbGRlcjxUPik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IGFycmRhdGEgPSBob2xkZXIuZGF0YS5hcnJEYXRhIGFzIHN0cmluZ1tdO1xyXG4gICAgICAgIGlmICh0aGlzLmNudCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyQ29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IGRvbS5maWxsU2VsZWN0UGFodE5hbWVzT3ByaWhvZCh0aGlzLmNudCwgYXJyZGF0YSwgZmFsc2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVSUk9SIElOIGV4ZWN1dGVDYWxsYmFjazxUPihob2xkZXIpIC0tPiBjbGFzcyBGaWxsU2VsZWN0Q29sb3IgXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiDQndCw0L/QvtC70L3Rj9C10YIgaHRtbCBzZWxlY3QgXCLQndCw0LfQstCw0L3QuNC1XCIgXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmlsbFNlbGVjdE5hbWUgZXh0ZW5kcyBDbGllbnREYXRhIGltcGxlbWVudHMgQ2xlYXJhYmxlIHtcclxuICAgICBcclxuICAgIGNvbnN0cnVjdG9yKGlkc2VsOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihpZHNlbCk7ICAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZXhlY3V0ZUNhbGxiYWNrPFQ+KGhvbGRlcjogSG9sZGVyPFQ+KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgYXJyZGF0YSA9IGhvbGRlci5kYXRhLmFyckRhdGEgYXMgc3RyaW5nW107XHJcbiAgICAgICAgaWYgKHRoaXMuY250KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDb250YWluZXIoKTtcclxuICAgICAgICAgICAgYXdhaXQgZG9tLmZpbGxTZWxlY3RQYWh0TmFtZXNPcHJpaG9kKHRoaXMuY250LCBhcnJkYXRhLCBmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRVJST1IgSU4gZXhlY3V0ZUNhbGxiYWNrPFQ+KGhvbGRlcikgLS0+IGNsYXNzIEZpbGxTZWxlY3ROYW1lIFwiKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIlxyXG4vKipcclxuICog0JjQvNC10L3QsCBuYW1lOiA8YSBuYW1lPSd4eHgnIGhyZWY9XCIuLi5cIiA+IFxyXG4gKiDRgdGB0YvQu9C+0Log0LzQtdC90Y4g0L3QsNCy0LjQs9Cw0YbQuNC4ICjRgdGC0YDQsNC90LjRhilcclxuICovXHJcbmV4cG9ydCBlbnVtIEVudW1QYWdlTmFtZSB7T1BSSUhPRD0nT1BSSUhPRCcsIEFMTFBST0Q9J0FMTF9QUk9EJ307IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTIpO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJieXRlTGVuZ3RoIiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRvQnl0ZUFycmF5IiwidG1wIiwiaSIsImFyciIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsImxlbiIsInJldkxvb2t1cCIsImNoYXJDb2RlQXQiLCJmcm9tQnl0ZUFycmF5IiwidWludDgiLCJsZW5ndGgiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJtYXhDaHVua0xlbmd0aCIsImxlbjIiLCJwdXNoIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJqb2luIiwiVWludDhBcnJheSIsIkFycmF5IiwiY29kZSIsIkVycm9yIiwiaW5kZXhPZiIsInN0YXJ0IiwiZW5kIiwibnVtIiwib3V0cHV0IiwiYmFzZTY0IiwiaWVlZTc1NCIsImN1c3RvbUluc3BlY3RTeW1ib2wiLCJTeW1ib2wiLCJCdWZmZXIiLCJLX01BWF9MRU5HVEgiLCJjcmVhdGVCdWZmZXIiLCJSYW5nZUVycm9yIiwiYnVmIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiVHlwZUVycm9yIiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwidmFsdWUiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsInNsaWNlIiwiZnJvbVN0cmluZyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYXJyYXlWaWV3IiwiaXNJbnN0YW5jZSIsImNvcHkiLCJmcm9tQXJyYXlCdWZmZXIiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheVZpZXciLCJTaGFyZWRBcnJheUJ1ZmZlciIsInZhbHVlT2YiLCJiIiwib2JqIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwidW5kZWZpbmVkIiwibnVtYmVySXNOYU4iLCJ0eXBlIiwiaXNBcnJheSIsImRhdGEiLCJmcm9tT2JqZWN0IiwidG9QcmltaXRpdmUiLCJhc3NlcnRTaXplIiwic2l6ZSIsImFycmF5IiwidG9TdHJpbmciLCJtdXN0TWF0Y2giLCJhcmd1bWVudHMiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInRvTG93ZXJDYXNlIiwic2xvd1RvU3RyaW5nIiwidGhpcyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwibiIsIm0iLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsInZhbCIsImRpciIsImFycmF5SW5kZXhPZiIsImNhbGwiLCJsYXN0SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsIlN0cmluZyIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJqIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImMiLCJoaSIsImxvIiwidXRmMTZsZVRvQnl0ZXMiLCJNYXRoIiwibWluIiwicmVzIiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsInByb3RvIiwiZm9vIiwiZSIsInR5cGVkQXJyYXlTdXBwb3J0IiwiY29uc29sZSIsImVycm9yIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicG9vbFNpemUiLCJhbGxvYyIsImZpbGwiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsIngiLCJ5IiwiY29uY2F0IiwibGlzdCIsInBvcyIsInNldCIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsInRvTG9jYWxlU3RyaW5nIiwiZXF1YWxzIiwiaW5zcGVjdCIsIm1heCIsInJlcGxhY2UiLCJ0cmltIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJ0b0pTT04iLCJfYXJyIiwicmV0Iiwib3V0IiwiaGV4U2xpY2VMb29rdXBUYWJsZSIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIndydEJpZ1VJbnQ2NExFIiwiY2hlY2tJbnRCSSIsIkJpZ0ludCIsIndydEJpZ1VJbnQ2NEJFIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsImxpdHRsZUVuZGlhbiIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzdWJhcnJheSIsInJlYWRVaW50TEUiLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVpbnRCRSIsInJlYWRVSW50QkUiLCJyZWFkVWludDgiLCJyZWFkVUludDgiLCJyZWFkVWludDE2TEUiLCJyZWFkVUludDE2TEUiLCJyZWFkVWludDE2QkUiLCJyZWFkVWludDMyTEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVWludDMyQkUiLCJyZWFkVUludDMyQkUiLCJyZWFkQmlnVUludDY0TEUiLCJkZWZpbmVCaWdJbnRNZXRob2QiLCJ2YWxpZGF0ZU51bWJlciIsImZpcnN0IiwibGFzdCIsImJvdW5kc0Vycm9yIiwicmVhZEJpZ1VJbnQ2NEJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRCaWdJbnQ2NExFIiwicmVhZEJpZ0ludDY0QkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVaW50TEUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVWludEJFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVpbnQ4Iiwid3JpdGVVSW50OCIsIndyaXRlVWludDE2TEUiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVaW50MTZCRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVpbnQzMkxFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVWludDMyQkUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVCaWdVSW50NjRMRSIsIndyaXRlQmlnVUludDY0QkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVCaWdJbnQ2NExFIiwid3JpdGVCaWdJbnQ2NEJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvcHlXaXRoaW4iLCJlcnJvcnMiLCJFIiwic3ltIiwiZ2V0TWVzc2FnZSIsIkJhc2UiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJuYW1lIiwic3RhY2siLCJtZXNzYWdlIiwiYWRkTnVtZXJpY2FsU2VwYXJhdG9yIiwicmFuZ2UiLCJFUlJfT1VUX09GX1JBTkdFIiwiY2hlY2tCb3VuZHMiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsImZsb29yIiwiRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTIiwiaW5wdXQiLCJtc2ciLCJyZWNlaXZlZCIsImlzSW50ZWdlciIsImFicyIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwic3BsaXQiLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsImFscGhhYmV0IiwidGFibGUiLCJpMTYiLCJmbiIsIkJ1ZmZlckJpZ0ludE5vdERlZmluZWQiLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsImQiLCJzIiwiTmFOIiwicnQiLCJpc05hTiIsImxvZyIsIkxOMiIsImRhdGVwIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNldEludGVydmFsIiwidGV4dENvbnRlbnQiLCJEYXRlIiwidGltZVpvbmUiLCJpbnB1dENvdW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNoYW5rIiwiY250QWxscHJkIiwiY250T3ByaWhvZCIsInNlbmRGb3JtT3ByaWhvZEJ1dHRvbiIsImRvbSIsImNsYlNlbmRGb3JtT3ByaWhvZCIsImNsaWVudEZpbGxzZWxQYXRoTmFtZSIsIkZpbGxTZWxlY3RQYXRoTmFtZXMiLCJjbGllbnRUYWJsZU9wdGlob2QiLCJBbGxEYXRhVGFibGVPcHJpaG9kIiwiaW52b2tlciIsInNldENvbW1hbmRPcHJpaG9kIiwiT3ByaWhvZCIsImFwcGNuIiwiY2xpZW50UmVzT3ByaWhvZCIsIkFuc3dlck9wcmlob2QiLCJhbnN3ZXJSZXNIb2xkZXIiLCJSZXN1bHRIb2xkZXIiLCJidG5PcHJpaG9kIiwibG9hZEltYWdlIiwidGV4dE1lc3NhZ2UiLCJpc2NoZWNrIiwic2VuZE9wcmlob2QiLCJ3aG8iLCJyb2xlIiwiaXNTZW5kU2tsYWQiLCJySG9sZGVyIiwiSG9sZGVyIiwiZXhlY3V0ZSIsImZpcnN0U3RhcnQiLCJzZXRBbGxQcm9kdWN0c0ZvbGRlciIsIkdldEFsbFByb2R1Y3RGb2xkZXIiLCJhcnJDYXRzIiwiZ2V0QWxsUHJvZEZvbGRlciIsImhvbGRlclNlbFBhdGhOYW1lIiwiaG9sZGVyIiwic2V0R2V0QWxsRGF0YVRhYmxlT3ByaWhvZCIsIkdldEFsbEZyb21UYWJsZU9wcmlob2QiLCJ0YWJsZURhdGFPcHIiLCJnZXRBbGxEYXRhVGFibGVPcHJpaG9kIiwiaG9sZGVyVGFibGVPcHJoIiwiaG9sZGVyVE8iLCJ2IiwiRW51bVBhZ2VOYW1lIiwiT1BSSUhPRCIsIkFMTFBST0QiLCJUYWJsZVByb2R1Y3RzIiwiY250IiwiY3JlYXRlTGlzdENhdHMiLCJkd25sIiwid2luZG93IiwiVGVsZWdyYW0iLCJXZWJBcHAiLCJyZWFkeSIsInByZXZlbnREZWZhdWx0IiwiZ2V0RXhjZWxGaWxlIiwidXJsbGluayIsImdldExpbmtEb3dubG9hZEV4Y2VsbCIsIm9wZW5MaW5rIiwiYnRuUmVmcmVzaFRva2VuIiwiZm9ybSIsImlsb2dpbiIsImlwYXNzdyIsInNlbmREYXRhIiwiY3JlZGVudGlhbCIsInJlc3VsdFRva2VuUmVmIiwic2VuZFJlZnJlc2hUb2tlbiIsImluZm9wIiwic2V0QXR0cmlidXRlIiwiYnRuUmV3cml0ZVRhYmxlRGIiLCJwaW5mb3JldyIsInJlc3VsdCIsInJld3JpdGVQcm9kdWN0c1RhYmxlIiwiSE9TVCIsIkFwcENvbm5lY3QiLCJob3N0IiwiZ2V0UHJvZEZvbGRlcnMiLCJ1cmwiLCJyZXNwIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJqc29uIiwiYmxvYiIsImdldFByb2R1Y3RCeUNhdHMiLCJ1cmkiLCJyZXF1ZXN0RGF0YSIsIlVSSVNrbGFkIiwiZ2V0UmVzcFNlbmRGb3JtRGF0YU9wcmlob2QiLCJmb3JtRGF0YSIsInJlc3BvbnNlIiwiZG9PcHJpaG9kIiwiZ2V0VGFibGVPcHJpaG9kIiwiZGVsZXRlUm93IiwiaWRyb3ciLCJkZWxJZCIsImdldEF0dHJpYnV0ZXNOYW1lQ29sb3JzQnlQYXRoTmFtZSIsInBhdGhOYW1lIiwicmVxRGF0YSIsInNlbmRUZWxlZ3JhbURhdGEiLCJob2xkIiwiYXJyRGF0YSIsImNsaWVudCIsImV4ZWN1dGVDYWxsYmFjayIsInJlY2lldmVyIiwicmVzcEV4ZWN1dGUiLCJnZXRSZXNwb25zZSIsIkNtZERlbGV0ZVJvd1RhYmxlT3ByaWhvZCIsIkJhc2VDb21tYW5kIiwiQ21kU2VuZEZvcm1PcHJpaG9kIiwiR2V0QWxsUHJvZHNCeVBhdGhOYW1lIiwiR2V0QXR0cmlidXRlc0J5UGF0aE5hbWUiLCJjbWRTZW5kRGF0YUZvcm1PcHJpaG9kIiwiY29tbWFuZEdldEF0dHJDb2xvck5hbWUiLCJjb21tYW5kRGVsUm93IiwiaWQiLCJ0ZXh0Iiwib24iLCJsb2FkSW1nIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwiaWRjb250YWluZXIiLCJzZXRHZXRQcm9kQnlDYXRzIiwicmVzdWx0SG9sZGVyIiwiZm9yRWFjaCIsImVsIiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJub2RlTmFtZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlQ29udGFpbmVyIiwibWFrZVRhYmxlIiwidGhlYWQiLCJ0ciIsInRoIiwidGJvZHkiLCJjZWxsTmFtZSIsImNvbG9yIiwiYXJ0aWNsZSIsInRkIiwiZmlsbFNlbGVjdFBhaHROYW1lc09wcmlob2QiLCJzZWxlY3QiLCJsaXN0ZGF0YSIsImVtcHR5Rmlyc3QiLCJsaXN0ZCIsInVuc2hpZnQiLCJvcHRpb24iLCJzaG9ydFNwbGl0UGF0aE5hbWUiLCJzaG9ydFBuYW1lIiwic2V0Q2FsbGJhY2tTZWxlY3QiLCJjYWxsYiIsImRlbENhbGxiYWNrU2VsZWN0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsYlNlbFBhdGhOYW1lIiwib3B0cyIsImNoaWxkTm9kZXMiLCJzZXRHZXRBdHRyc0NvbG9yTmFtZSIsIkhUTUxPcHRpb25FbGVtZW50Iiwic2VsZWN0ZWQiLCJjbGllbnRDb2xvciIsIkZpbGxTZWxlY3RDb2xvciIsImNsaWVudE5hbWUiLCJGaWxsU2VsZWN0TmFtZSIsImdldEF0dHJzQ29sb3JOYW1lIiwicmVzdWx0SG9sZGVyQ29sb3IiLCJyZXN1bHRIb2xkZXJOYW1lIiwiaGxkQ29sb3IiLCJjb2xvcnMiLCJobGROYW1lIiwibmFtZXMiLCJmZGF0YSIsIkZvcm1EYXRhIiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJhcHBlbmQiLCJIVE1MSW5wdXRFbGVtZW50IiwiZmxzIiwiZmlsZXMiLCJmIiwiZHQiLCJzZXRTZW5kRm9ybU9wcmlob2QiLCJzZW5kRGF0YUZvcm1PcHJpaG9kIiwibXNnYXJyIiwibWFwIiwibWFrZU9wcmlob2RUYWJsZSIsImxhc3RWYWxQYXRoTmFtZSIsInNwbCIsImVsZW0iLCJIVE1MQW5jaG9yRWxlbWVudCIsInJvd0lkIiwic2V0Q21kRGVsZXRlUm93IiwicmVzRGVsIiwic2VuZERlbGV0ZVJvd0J5SWQiLCJkZWxIb2xkZXIiLCJyZXNEZWxIb2xkZXIiLCJwcm9kdWN0c19pZCIsImNvdW50IiwiZGF0ZSIsInRpbWUiLCJhbnN3ZXJPcHJpaG9kIiwiX2NudCIsImFycmRhdGEiLCJJbnZva2VyIiwiYWxsUHJvZHVjdHNGb2xkZXIiLCJwcm9kdWN0QnlDYXRzIiwiY29sb3JOYW1lQnlDYXRlZ29yeSIsInNlbmRGb3JtT3ByaWhvZCIsImdldERhdGFUYWJsZU9wcmlob2QiLCJkZWxldGVSb3dGcm9tVGFibGUiLCJvcHJpaG9kIiwiY29tbWFuZCIsIm9wcmlob2REYXRhIiwiYXR0cnMiLCJDbGllbnREYXRhIiwiZmlsbENvbnRhaW5lciIsImNsZWFyQ29udGFpbmVyIiwiZG9tRWxlbSIsImNoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiLCJ0YmwiLCJpZHNlbCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iXSwic291cmNlUm9vdCI6IiJ9