(()=>{"use strict";var t={61:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,r){function s(t){try{h(o.next(t))}catch(t){r(t)}}function d(t){try{h(o.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,d)}h((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=n(541);window.Telegram.WebApp.ready(),window.Telegram.WebApp.expand(),o(void 0,void 0,void 0,(function*(){const t=Telegram.WebApp.initDataUnsafe||{},e=yield i.appcn.sendTelegramData(t);if(e.status>0)window.location.href=i.HOST+e.href;else{const t=document.getElementById("henter"),e=document.getElementById("pwait");t.textContent="Доступ запрещен.",e.textContent="Войдите через телеграм-бот."}}))},541:function(t,e){var n=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(i,r){function s(t){try{h(o.next(t))}catch(t){r(t)}}function d(t){try{h(o.throw(t))}catch(t){r(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,d)}h((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.appcn=e.AppConnect=e.HOST=void 0,e.HOST="https://kitopt24.site/";class o{constructor(t){this.host=e.HOST,this.host=t}getLinkDownloadExcell(){return this.host+"getOprihodsExcel"}getProdFolders(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+t,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({})});return yield e.json()}))}getExcelFile(){return n(this,void 0,void 0,(function*(){try{const t=yield fetch(this.host+"getOprihodsExcel",{method:"GET"});return yield t.blob()}catch(t){console.log("error AppConnect -> getExcelFile()")}return null}))}getProductByCats(t,e){return n(this,void 0,void 0,(function*(){const n={URISklad:e},o=yield fetch(this.host+t,{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(n)});return yield o.json()}))}getRespSendFormDataOprihod(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"formOprihod",{method:"POST",body:t});return yield e.json()}))}rewriteProductsTable(){return n(this,void 0,void 0,(function*(){const t=yield fetch(this.host+"writeFromMyskladToDb",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({})});return yield t.json()}))}sendRefreshToken(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"refreshTokenSklad",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)});return yield e.json()}))}doOprihod(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"doOprihod",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)});return yield e.json()}))}getTableOprihod(){return n(this,void 0,void 0,(function*(){const t=yield fetch(this.host+"getTableOprihod",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({})});return yield t.json()}))}deleteRow(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"deleteRow",{method:"post",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({delId:t})});return yield e.json()}))}getAttributesNameColorsByPathName(t){return n(this,void 0,void 0,(function*(){const e={pathName:t},n=yield fetch(this.host+"getAttrsByPath",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(e)});return yield n.json()}))}sendTelegramData(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.host+"fromTelegram",{method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)});return yield e.json()}))}}e.AppConnect=o,e.appcn=new o(e.HOST)}},e={};!function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={exports:{}};return t[o].call(r.exports,r,r.exports,n),r.exports}(61)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,